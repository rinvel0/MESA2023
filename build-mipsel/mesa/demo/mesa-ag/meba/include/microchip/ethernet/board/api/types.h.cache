{:	root[`{:ppo:Parslet::Slice:@positiono:Parslet::Position:@string"ÔH// Copyright (c) 2004-2020 Microchip Technology Inc. and its subsidiaries.
// SPDX-License-Identifier: MIT


#ifndef _MICROCHIP_ETHERNET_BOARD_TYPES_H_
#define _MICROCHIP_ETHERNET_BOARD_TYPES_H_

#include <stdint.h>
#include <microchip/ethernet/phy/api.h>
#include <microchip/ethernet/switch/api.h>
#include <microchip/ethernet/board/api/hdr_start.h>  // ALL INCLUDE ABOVE THIS LINE

// Forward declaration
struct meba_inst;

// This typedef is needed to keep backwards compatibility. Lets avoid using this
// in the API, as it hides the fact that this is a pointer.
typedef struct meba_inst *meba_inst_t;

typedef mesa_port_admin_state_t meba_port_admin_state_t;

#define MEBA_API_MK_VERSION(h,l) ((h << 16) | l)
#define MEBA_API_VERSION_MAJOR   0
#define MEBA_API_VERSION_MINOR   4
#define MEBA_API_VERSION         MEBA_API_MK_VERSION(MEBA_API_VERSION_MAJOR, \
                                                     MEBA_API_VERSION_MINOR)

#define MEBA_BIT(x)              (1<<(x))
#define MEBA_BITMASK(x)          (MEBA_BIT(x)-1)

#define MEBA_PORT_CAP_NONE              0x000000000
#define MEBA_PORT_CAP_AUTONEG           0x000000001
#define MEBA_PORT_CAP_10M_HDX           0x000000002
#define MEBA_PORT_CAP_10M_FDX           0x000000004
#define MEBA_PORT_CAP_100M_HDX          0x000000008
#define MEBA_PORT_CAP_100M_FDX          0x000000010
#define MEBA_PORT_CAP_1G_FDX            0x000000020
#define MEBA_PORT_CAP_2_5G_FDX          0x000000040
#define MEBA_PORT_CAP_5G_FDX            0x000000080
#define MEBA_PORT_CAP_10G_FDX           0x000000100
#define MEBA_PORT_CAP_25G_FDX           0x000000200
#define MEBA_PORT_CAP_FLOW_CTRL         0x000001000
#define MEBA_PORT_CAP_COPPER            0x000002000
#define MEBA_PORT_CAP_FIBER             0x000004000

// Dual media, copper preferred
#define MEBA_PORT_CAP_DUAL_COPPER       0x000008000

// Dual media, fiber preferred
#define MEBA_PORT_CAP_DUAL_FIBER        0x000010000

#define MEBA_PORT_CAP_SD_ENABLE         0x000020000
#define MEBA_PORT_CAP_SD_HIGH           0x000040000
#define MEBA_PORT_CAP_SD_INTERNAL       0x000080000
#define MEBA_PORT_CAP_XAUI_LANE_FLIP    0x000200000
#define MEBA_PORT_CAP_VTSS_10G_PHY      0x000400000
#define MEBA_PORT_CAP_SFP_DETECT        0x000800000
#define MEBA_PORT_CAP_STACKING          0x001000000

// Auto detect the SFP module for dual media
#define MEBA_PORT_CAP_DUAL_SFP_DETECT   0x002000000

// SFP only port (not dual media)
#define MEBA_PORT_CAP_SFP_ONLY          0x004000000

// SFP copper not supported in dual media
#define MEBA_PORT_CAP_DUAL_NO_COPPER    0x008000000
#define MEBA_PORT_CAP_SERDES_RX_INVERT  0x010000000
#define MEBA_PORT_CAP_SERDES_TX_INVERT  0x020000000

// Connected to internal PHY
#define MEBA_PORT_CAP_INT_PHY           0x040000000

// Force mode is unsupported
#define MEBA_PORT_CAP_NO_FORCE          0x080000000

// CPU port
#define MEBA_PORT_CAP_CPU               0x100000000

// If (DUAL_)SFP_DETECT is set, it is indeed possible to detect whether an SFP
// is inserted. If - at the same time - SFP_INACCESSIBLE is set, the SFP's I2C
// interface is not accessible, so the application should use a MAC-to-MAC
// driver when an SFP is inserted, rather than attempting to read the SFP's ROM.
// If (DUAL_)SFP_DETECT is not set on an SFP port, SFP_INACCESSIBLE is a don't
// care, and a MAC-to-MAC driver should be used right away (copper backplane).
#define MEBA_PORT_CAP_SFP_INACCESSIBLE  0x200000000

#define MEBA_PORT_CAP_HDX        \
        (MEBA_PORT_CAP_10M_HDX | \
         MEBA_PORT_CAP_100M_HDX)

// Tri-speed port full duplex only
#define MEBA_PORT_CAP_TRI_SPEED_FDX \
        (MEBA_PORT_CAP_AUTONEG    | \
         MEBA_PORT_CAP_1G_FDX     | \
         MEBA_PORT_CAP_100M_FDX   | \
         MEBA_PORT_CAP_10M_FDX    | \
         MEBA_PORT_CAP_FLOW_CTRL)

// Tri-speed port, both full and half duplex */
#define MEBA_PORT_CAP_TRI_SPEED        \
        (MEBA_PORT_CAP_TRI_SPEED_FDX | \
         MEBA_PORT_CAP_HDX)

// 1G PHY present */
#define MEBA_PORT_CAP_1G_PHY         \
        (MEBA_PORT_CAP_COPPER      | \
         MEBA_PORT_CAP_FIBER       | \
         MEBA_PORT_CAP_DUAL_COPPER | \
         MEBA_PORT_CAP_DUAL_FIBER)

// Tri-speed port copper only
#define MEBA_PORT_CAP_TRI_SPEED_COPPER \
        (MEBA_PORT_CAP_TRI_SPEED     | \
         MEBA_PORT_CAP_COPPER)

// Tri-speed port fiber only
#define MEBA_PORT_CAP_TRI_SPEED_FIBER \
        (MEBA_PORT_CAP_TRI_SPEED    | \
         MEBA_PORT_CAP_FIBER)

// Tri-speed port both fiber and copper. Copper prefered
#define MEBA_PORT_CAP_TRI_SPEED_DUAL_COPPER \
        (MEBA_PORT_CAP_TRI_SPEED          | \
         MEBA_PORT_CAP_DUAL_COPPER)

// Tri-speed port both fiber and copper. Fiber prefered
#define MEBA_PORT_CAP_TRI_SPEED_DUAL_FIBER \
        (MEBA_PORT_CAP_TRI_SPEED         | \
         MEBA_PORT_CAP_DUAL_FIBER)

// Any fiber mode
#define MEBA_PORT_CAP_ANY_FIBER      \
        (MEBA_PORT_CAP_FIBER       | \
         MEBA_PORT_CAP_DUAL_FIBER  | \
         MEBA_PORT_CAP_DUAL_COPPER | \
         MEBA_PORT_CAP_SFP_DETECT)

// Any fiber mode, but auto detection not supported
#define MEBA_PORT_CAP_SPEED_DUAL_ANY_FIBER_FIXED_SPEED \
        (MEBA_PORT_CAP_DUAL_FIBER                    | \
         MEBA_PORT_CAP_DUAL_COPPER)

// Any fiber mode, auto detection supported
#define MEBA_PORT_CAP_SPEED_DUAL_ANY_FIBER \
        (MEBA_PORT_CAP_DUAL_COPPER       | \
         MEBA_PORT_CAP_DUAL_FIBER        | \
         MEBA_PORT_CAP_DUAL_SFP_DETECT)

// Copper 5 Fiber mode, auto detection supported
#define MEBA_PORT_CAP_TRI_SPEED_DUAL_ANY_FIBER   \
        (MEBA_PORT_CAP_TRI_SPEED               | \
         MEBA_PORT_CAP_SPEED_DUAL_ANY_FIBER)

// Copper & Fiber mode, but SFP auto detection not supported
#define MEBA_PORT_CAP_TRI_SPEED_DUAL_ANY_FIBER_FIXED_SFP_SPEED \
        (MEBA_PORT_CAP_TRI_SPEED | \
         MEBA_PORT_CAP_SPEED_DUAL_ANY_FIBER_FIXED_SPEED)

// 1000Base-X fiber mode
#define MEBA_PORT_CAP_DUAL_FIBER_1000X \
        (MEBA_PORT_CAP_DUAL_FIBER | \
         MEBA_PORT_CAP_DUAL_COPPER)

// SFP fiber port 100FX/1G with auto negotiation and flow control
#define MEBA_PORT_CAP_SFP_1G       \
        (MEBA_PORT_CAP_AUTONEG   | \
         MEBA_PORT_CAP_100M_FDX  | \
         MEBA_PORT_CAP_1G_FDX    | \
         MEBA_PORT_CAP_FLOW_CTRL | \
         MEBA_PORT_CAP_SFP_ONLY)

// SFP fiber port 100FX/1G/2.5G with auto negotiation and flow control
#define MEBA_PORT_CAP_SFP_2_5G  \
        (MEBA_PORT_CAP_SFP_1G | \
         MEBA_PORT_CAP_2_5G_FDX)

// SFP fiber port 100FX/1G/2.5G with auto negotiation and flow control, signal
// detect high

#define MEBA_PORT_CAP_SFP_SD_HIGH    \
        (MEBA_PORT_CAP_SD_ENABLE   | \
         MEBA_PORT_CAP_SD_HIGH     | \
         MEBA_PORT_CAP_SD_INTERNAL | \
         MEBA_PORT_CAP_SFP_DETECT  | \
         MEBA_PORT_CAP_SFP_ONLY)

// SFP fiber port 100FX/1G/2.5G with auto negotiation and flow control, signal
// detect high
#define MEBA_PORT_CAP_SFP_SD_HIGH_NO_DETECT \
        (MEBA_PORT_CAP_SD_ENABLE          | \
         MEBA_PORT_CAP_SD_HIGH            | \
         MEBA_PORT_CAP_SD_INTERNAL        | \
         MEBA_PORT_CAP_SFP_ONLY)

#define MEBA_PORT_CAP_COPPER_10G \
        (MEBA_PORT_CAP_10G_FDX | \
         MEBA_PORT_CAP_COPPER)

// 100M/1G/2.5G Tri-speed port full duplex only
#define MEBA_PORT_CAP_2_5G_TRI_SPEED_FDX \
        (MEBA_PORT_CAP_AUTONEG         | \
         MEBA_PORT_CAP_2_5G_FDX        | \
         MEBA_PORT_CAP_1G_FDX          | \
         MEBA_PORT_CAP_100M_FDX        | \
         MEBA_PORT_CAP_FLOW_CTRL)

// 100M/1G/2.5G Tri-speed port, all full duplex and 100M half duplex
#define MEBA_PORT_CAP_2_5G_TRI_SPEED        \
        (MEBA_PORT_CAP_2_5G_TRI_SPEED_FDX | \
         MEBA_PORT_CAP_100M_HDX)

// 100M/1G/2.5G Tri-speed port copper only
#define MEBA_PORT_CAP_2_5G_TRI_SPEED_COPPER \
        (MEBA_PORT_CAP_2_5G_TRI_SPEED     | \
         MEBA_PORT_CAP_COPPER)

// Bit-mask containing the port capabilities
typedef uint64_t meba_port_cap_t;

typedef enum {
    // Initialize Board
    MEBA_BOARD_INITIALIZE,
    // Global Port Reset
    MEBA_PORT_RESET,
    // Global Port Post Reset
    MEBA_PORT_RESET_POST,
    // Status LED Initialize
    MEBA_STATUS_LED_INITIALIZE,
    // Port LED Initialize
    MEBA_PORT_LED_INITIALIZE,
    // Fan Initialize
    MEBA_FAN_INITIALIZE,
    // Sensors Initialize
    MEBA_SENSOR_INITIALIZE,
    // Interrupts Initialize
    MEBA_INTERRUPT_INITIALIZE,
    // Initialize the SyncE DPLL i.e. setup dividers, references, monitors etc.
    MEBA_SYNCE_DPLL_INITIALIZE,
    // PoE Initialize
    MEBA_POE_INITIALIZE,
    // Phy Initialize
    MEBA_PHY_INITIALIZE
} meba_reset_point_t;

typedef enum {
    // Port temperature sensor in Celsius (signed)
    MEBA_SENSOR_PORT_TEMP,
    // Board/chassis temperature sensor in Celsius (signed)
    MEBA_SENSOR_BOARD_TEMP,
} meba_sensor_t;

typedef enum {
    MEBA_CAP_FIRST = 50000, // First MEBA capability (generic)
    MEBA_CAP_POE = MEBA_CAP_FIRST,

    // AD5667 DAC used to Adjust the 1588 ref clock
    MEBA_CAP_1588_CLK_ADJ_DAC,

    // Set 1588 ref clock to different frequencies
    MEBA_CAP_1588_REF_CLK_SEL,

    // Number of board temperature sensors
    MEBA_CAP_TEMP_SENSORS,

    // Number of exposed (external) ports on board
    MEBA_CAP_BOARD_PORT_COUNT,

    // Number of ports in the port map (may be > MEBA_CAP_BOARD_PORT_COUNT if
    // having MEP or Mirror loop ports)
    MEBA_CAP_BOARD_PORT_MAP_COUNT,

    // Number of alternate (port) LED modes
    MEBA_CAP_LED_MODES,

    // Dying gasp power loss hardware support
    MEBA_CAP_DYING_GASP,

    MEBA_CAP_FAN_SUPPORT,
    MEBA_CAP_LED_DIM_SUPPORT,  // LED Dimming

    // The PCB107 CPLD design was originally made specifically for PCB107 but is
    // now being used as a general component on other boards as well
    MEBA_CAP_BOARD_HAS_PCB107_CPLD,

    // Some boards drive CS to PCB107 CPLD via a mux
    MEBA_CAP_PCB107_CPLD_CS_VIA_MUX,

    // PCB-135 cpld
    MEBA_CAP_BOARD_HAS_PCB135_CPLD,

    // DPLL number for the DPLL used for SYNCE
    MEBA_CAP_SYNCE_CLOCK_DPLL,

    // Number of clock output references, including 10G ports, which must be
    // connected to the controller outputs
    MEBA_CAP_SYNCE_CLOCK_OUTPUT_CNT,

    // Clock output used for PTP independent Phase/Frequency adjustment
    MEBA_CAP_SYNCE_PTP_CLOCK_OUTPUT,

    // Default holdover post filtering
    MEBA_CAP_SYNCE_HO_POST_FILTERING_BW,

    // Number of EEC options that can be selected
    MEBA_CAP_SYNCE_CLOCK_EEC_OPTION_CNT,

    // ID of the interrupt handling PPS events
    MEBA_CAP_ONE_PPS_INT_ID,

    // Board supports running SyncE/PTP in single DPLL mode
    MEBA_CAP_SYNCE_DPLL_MODE_SINGLE,

    // Board supports running SyncE/PTP in dual DPLL mode (i.e. Independent or
    // Common mode)
    MEBA_CAP_SYNCE_DPLL_MODE_DUAL,

    // To identify if CPLD mux has to be configured for station clock
    MEBA_CAP_SYNCE_STATION_CLOCK_MUX_SET,

    // Board supports PoE 802.3bt with up to 90W per port
    MEBA_CAP_POE_BT,

    // Number of exposed (external) ports directly connected to the CPU
    MEBA_CAP_CPU_PORTS_COUNT,

    MEBA_CAP_LAST   // Last MEBA capability (must be last in list)
} meba_cap_t;

typedef enum {
    MEBA_TRACE_LVL_RACKET  = 1,
    MEBA_TRACE_LVL_NOISE   = 2,
    MEBA_TRACE_LVL_DEBUG   = 4,
    MEBA_TRACE_LVL_INFO    = 6,
    MEBA_TRACE_LVL_WARNING = 8,
    MEBA_TRACE_LVL_ERROR   = 9,
    MEBA_TRACE_LVL_NONE    = 10,
} meba_trace_level_t;

typedef enum {
    MEBA_LED_TYPE_FRONT,
    MEBA_LED_TYPE_POE,
    MEBA_LED_TYPE_DC_A,
    MEBA_LED_TYPE_DC_B,
    MEBA_LED_TYPE_ALARM,
    MEBA_LED_TYPE_COUNT,
} meba_led_type_t;

typedef enum {
    MEBA_LED_COLOR_OFF,
    MEBA_LED_COLOR_GREEN,
    MEBA_LED_COLOR_RED,
    MEBA_LED_COLOR_YELLOW,
    MEBA_LED_COLOR_COUNT,
} meba_led_color_t;

typedef enum {
    MEBA_EVENT_FIRST,

    // Loss of signal - link down on PHY - loss of SFP optical signal
    MEBA_EVENT_LOS = MEBA_EVENT_FIRST,

    // Fast link failure detect on PHY (Enzo - Atom)
    MEBA_EVENT_FLNK,

    // Automatic Media-Sence on PHY
    MEBA_EVENT_AMS,

    // VOE interrupt
    MEBA_EVENT_VOE,

    // PTP Synchronization pulse update
    MEBA_EVENT_SYNC,

    // PTP External Synchronization input
    MEBA_EVENT_EXT_SYNC,

    // PTP External Synchronization 1 input (Serval only)
    MEBA_EVENT_EXT_1_SYNC,

    // PTP Clock adjustment updated
    MEBA_EVENT_CLK_ADJ,

    // PTP Clock timestamp is updated
    MEBA_EVENT_CLK_TSTAMP,

    // The 4 PTP pins have individual enums as the corresponding interrupt must
    // be enabled separately
    MEBA_EVENT_PTP_PIN_0,
    MEBA_EVENT_PTP_PIN_1,
    MEBA_EVENT_PTP_PIN_2,
    MEBA_EVENT_PTP_PIN_3,

    // TS More than one engine find match
    MEBA_EVENT_INGR_ENGINE_ERR,

    // TS Preamble too short to append timestamp
    MEBA_EVENT_INGR_RW_PREAM_ERR,

    // TS FCS error in ingress
    MEBA_EVENT_INGR_RW_FCS_ERR,

    // TS More than one engine find match
    MEBA_EVENT_EGR_ENGINE_ERR,

    // TS FCS error in egress
    MEBA_EVENT_EGR_RW_FCS_ERR,

    // TS Timestamp captured in Tx TSFIFO
    MEBA_EVENT_EGR_TIMESTAMP_CAPTURED,

    // TS Tx TSFIFO overflow
    MEBA_EVENT_EGR_FIFO_OVERFLOW,

    // General Purpose Push Button
    MEBA_EVENT_PUSH_BUTTON,

    // SFP Module Detect
    MEBA_EVENT_MOD_DET,

    // KR activity
    MEBA_EVENT_KR,

    MEBA_EVENT_LAST
} meba_event_t;

typedef enum {
    MEBA_PTP_IO_CAP_UNUSED       = 0x0,
    MEBA_PTP_IO_CAP_TIME_IF_IN   = 0x1,
    MEBA_PTP_IO_CAP_TIME_IF_OUT  = 0x2,
    MEBA_PTP_IO_CAP_PIN_IN       = 0x4,
    MEBA_PTP_IO_CAP_PIN_OUT      = 0x8,
    MEBA_PTP_IO_CAP_PHY_SYNC     = 0x10
} meba_ptp_io_cap_t;

// Interrupt signalling callback type
// source_id   [IN] The interrupt source which fired.
// instance_no [IN] The interrupt instance which fired
typedef void (*meba_event_signal_t)(meba_event_t event,
                                    uint32_t instance_no);

// Board configuration call out. This is used by MEBA, to ask the application
// for certain configuration.
// tag    [IN]  Configuration item name tag
// buf    [OUT] Configuration item value (text)
// bufsize[IN]  Size of output buffer buf
// buflen [OUT] Number of valid bytes in buf
typedef mesa_rc (*meba_conf_get_t)(const char *tag,
                                   char *buf,
                                   size_t bufsize,
                                   size_t *buflen);

typedef void (*meba_debug_t)(meba_trace_level_t level,
                             const char *location,
                             uint32_t line_no,
                             const char *fmt,
                             ...);

// [TEMPORARY] Clock event enable
typedef mesa_rc (*meba_clock_event_enable_t)(struct meba_inst *inst,
                                             meba_event_t event,
                                             mesa_bool_t enable);

// [TEMPORARY] Clock irq handler
//
// Handle low-level chip interrupt, generating generic, application-level
// events.
//
// chip_irq        [IN] Chip interrupt which triggered
// signal_notifier [IN] Function to deliver decoded interrupts to
typedef mesa_rc (*meba_clock_irq_handler_t)(
        struct meba_inst *inst,
        mesa_irq_t chip_irq,
        meba_event_signal_t signal_notifier);

// MEBA call-out functions
typedef struct {
    mesa_reg_read_t  reg_read;
    mesa_reg_write_t reg_write;
    mesa_i2c_read_t  i2c_read;
    mesa_i2c_write_t i2c_write;
    meba_conf_get_t  conf_get;
    meba_debug_t     debug;
    meba_clock_event_enable_t clock_event_enable; // TEMPORARY
    meba_clock_irq_handler_t  clock_irq_handler;  // TEMPORARY
    mepa_lock_func_t  lock_enter; // lock callback function called before entering MEPA Api
    mepa_lock_func_t  lock_exit;  // unlock callback function called after executing MEPA Api
    mepa_trace_func_t trace;
} meba_board_interface_t;

 // INTERIM board enum - will be deleted eventually
typedef enum {
    VTSS_BOARD_UNKNOWN = 0,
    // 1-3 is obsolete
    VTSS_BOARD_LUTON10_REF = 4,
    VTSS_BOARD_LUTON26_REF,
    VTSS_BOARD_JAG_CU24_REF,
    VTSS_BOARD_JAG_SFP24_REF,
    VTSS_BOARD_JAG_PCB107_REF,
    // 9 is obsolete
    VTSS_BOARD_JAG_CU48_REF = 10,
    VTSS_BOARD_SERVAL_REF,
    VTSS_BOARD_SERVAL_PCB106_REF,
    // 13 is obsolete
    VTSS_BOARD_SERVAL2_NID_REF = 14,
    VTSS_BOARD_JAGUAR2_CU48_REF,
    VTSS_BOARD_JAGUAR2_REF,
    VTSS_BOARD_JAGUAR2_AQR_REF,
    VTSS_BOARD_SERVALT_NID_REF,
    // 19-27 are obsolete
    VTSS_BOARD_OCELOT_REF = 28, // PCB120
    VTSS_BOARD_OCELOT_PCB123_REF,
    VTSS_BOARD_OCELOT_PCB123_LAN8814_REF,
    VTSS_BOARD_LUTON10_PDS408G, // PoE design from PoE business unit
    VTSS_BOARD_FIREANT_PCB134_REF = 134,
    VTSS_BOARD_FIREANT_PCB135_REF = 135,
    VTSS_BOARD_LAN9668_ADARO_REF = 0x6813,
    VTSS_BOARD_LAN9668_SUNRISE_REF = 0x6849,
    VTSS_BOARD_LAN9668_SVB_REF = 0x8281,
    VTSS_BOARD_LAN9668_8PORT_REF = 0x8290,
    VTSS_BOARD_LAN9668_ENDNODE_REF = 0x8291,
    VTSS_BOARD_LAN9668_ENDNODE_CARRIER_REF = 0x8309,
} vtss_board_type_t;

typedef struct {
    char name[32];
    mesa_target_type_t   target;
    mesa_port_mux_mode_t mux_mode;

    // Board type (INTERIM) - DO NOT DEPEND ON THIS
    vtss_board_type_t board_type;
} meba_board_props_t;


typedef struct {
    mesa_port_map_t        map;
    mesa_port_interface_t  mac_if;
    meba_port_cap_t        cap;
    // Chips including multiple PHYs (dual, quad) typically have shared
    // resources. The base-port indicate which "port" owning such
    // shared resources.
    mesa_port_no_t         phy_base_port;
    // Chip port number (may be different than poe channel number)
    mesa_chip_no_t         poe_chip_port;
    mesa_bool_t            poe_support;
} meba_port_entry_t;

// Yes, this is a MEPA type defined here. In MEPA it is "just" a pointer which
// are never de-referenced.
typedef struct mepa_callout_ctx {
    mesa_inst_t             inst;
    struct meba_inst        *meba_inst;
    mepa_port_no_t          port_no;
    mesa_miim_controller_t  miim_controller;
    uint8_t                 miim_addr;
    mesa_chip_no_t          chip_no;
} mepa_callout_ctx_t;

typedef struct {
    // The duration of time to be before going to low level (seconds)
    uint8_t start_time;

    // The level to be at before going to low level (pct)
    uint8_t start_level;

    // The min level supported by fan (pct)
    uint8_t min_pwm;
} meba_fan_param_t;

typedef struct {
    mesa_bool_t  tx_fault;
    mesa_bool_t  los;        // Loss Of Signal
    mesa_bool_t  present;    // SFP module present
} meba_sfp_status_t;

#include <microchip/ethernet/board/api/hdr_end.h>
#endif // _MICROCHIP_ETHERNET_BOARD_TYPES_H_
:@byteposir:	@str"0#ifndef _MICROCHIP_ETHERNET_BOARD_TYPES_H_
:@line_cacheo:Parslet::Source::LineCache:@line_endse:!Parslet::Source::RangeSearch[AiPipiqiriiÃiÄiØi i+iiii©iªiûi7i^i_iiiÊiíii_i¬i­i×ii	i=iqi¥iÙiiAiui©iÝiiEiyi­iáiâii6i7iViii¿iói'i[iiÃi÷iøi%	iY	iZ	i|	i°	i±	iÛ	i
iC
iw
ix
i
iÉ
iÊ
iç
iii(i\i]i¬iûiFiiæi5iiijii°iÑiÒiõiiAigii³iÕiÖii/iXitiuii±iØiÿi&iIiJihiiºiÙiÚi÷iiGieifiiÍiûii iXii²iÕiÖièii6i]ii§i¨iÜiiNirisiiÌiùi&iNiOii³iæiiiQii·iðiñi
i3iYi}i~iÀiåi
i/iTiyiiiâii&iGiHii¦i§iÎiõiiCijiiiÛiêiiFiti¢iÃiÄiçi
i)i*iZii°iÛii1iSiTiiÇiõiiiBipii½i¾iëiiii5iPiii~ii¶iÓiói i, iB i[ iu i i® iÍ i!i=!iS!il!i!i!i°!i±!iÀ!ió!i"iJ"if"iw"ix"i"iÆ"ié"iê"i#i=#i>#iq#i#i#i¼#i×#iØ#i$i*$i+$iy$i¡$iÄ$iÅ$iñ$i	%i
%i8%iQ%iR%il%i%i%iì%i1&iU&iV&i&i°&i±&iÅ&ié&iê&i'i8'i9'i'i±'iÖ'i×'i(iD(iE(il(i(i(iÈ(iñ(iò(i!)i>)i?)i{)i )i¡)ið)i*i'*i(*in*i*i*iÓ*iè*ié*i1+iO+iP+i+i¡+i¢+i±+iÑ+iñ+i,i1,iQ,iq,i,i¨,i©,i¸,iÑ,iè,i -i-i1-iJ-i]-i^-im-i-i-i·-iÒ-iì-i .i.i.i&.i'.im.i.i.iÊ.iß.ià.i/i/i/i./iB/iC/ik/i/i/i«/iÄ/iÅ/iÿ/i0i0i?0iW0iX0i~0i0i0iê0i1i!1i;1iU1io1ip1i1iº1i»1iì1i2i2i.2iN2iO2iy2i2i2i·2iÖ2i×2i3i(3i)3iF3ih3ii3i3i¨3i©3iÂ3iÚ3iÛ3iî3i4i4i4i&4i'4i64i^4i4i®4iÖ4iþ4i&5i;5i<5ib5i5iÏ5i6iB6iC6i6i¯6iÛ6i7i57ib7i7iÄ7i÷7i+8i,8ic8i8iÅ8ió8i9i9i99i~9i¿9i:i:i#:i&:ip:i{:i~:iµ:i÷:i$;iD;ia;i;i;i«;i¼;iÛ;iû;i<i:<iY<iu<i´<ió<iO=i­=iÊ=iä=iå=i>i(>iD>i[>i{>i>i´>iÒ>iñ>i?i(?iC?ie?i{?i ?iÁ?iÝ?iý?i@i7@ia@i@i­@iò@iAiDAioAiAiÅAiðAiBiRBigBihBiyBiBi­BiÐBiÑBiCi'Ci=Ci>Ci?CiPCipCiCi³CiûCi=DiVDiDiÃDiíDiEi*Ei+EizEiEi¸EiÚEiFi'FiTFi{Fi Fi¶Fi·FiÈFiGi&Gi'GiaGizGi{Gi§Gi¼GiÐGiÑGiâGiýGi,Hi_HitHiuHi§HiÔH:@last_line_endiÔH{;o;;o;	;
@
;i;"1#define _MICROCHIP_ETHERNET_BOARD_TYPES_H_

;@{;o;;o;	;
@
;iÄ;"#include <stdint.h>
;@{;o;;o;	;
@
;iØ;"-#include <microchip/ethernet/phy/api.h>
;@{;o;;o;	;
@
;i ;"0#include <microchip/ethernet/switch/api.h>
;@{;o;;o;	;
@
;i+;"Z#include <microchip/ethernet/board/api/hdr_start.h>  // ALL INCLUDE ABOVE THIS LINE

;@{
:keywordo;;o;	;
@
;i7;"typedef;@:type_aliaso;;o;	;
@
;i?;"struct meba_inst *;@:typedef_nameo;;o;	;
@
;iQ;"meba_inst_t;@:
array[ :cap0{
;o;;o;	;
@
;i_;"typedef;@;o;;o;	;
@
;ig;"mesa_port_admin_state_t ;@;o;;o;	;
@
;i;"meba_port_admin_state_t;@;[ ;0{;o;;o;	;
@
;i;"6#define MEBA_API_MK_VERSION(h,l) ((h << 16) | l)
;@{;o;;o;	;
@
;iÊ;"(#define MEBA_API_VERSION_MAJOR   0
;@{;o;;o;	;
@
;ií;"(#define MEBA_API_VERSION_MINOR   4
;@{;o;;o;	;
@
;i;"#define MEBA_API_VERSION         MEBA_API_MK_VERSION(MEBA_API_VERSION_MAJOR, \
                                                     MEBA_API_VERSION_MINOR)

;@{;o;;o;	;
@
;i­;"/#define MEBA_BIT(x)              (1<<(x))
;@{;o;;o;	;
@
;i×;"7#define MEBA_BITMASK(x)          (MEBA_BIT(x)-1)

;@{;o;;o;	;
@
;i	;"9#define MEBA_PORT_CAP_NONE              0x000000000
;@{;o;;o;	;
@
;i=;"9#define MEBA_PORT_CAP_AUTONEG           0x000000001
;@{;o;;o;	;
@
;iq;"9#define MEBA_PORT_CAP_10M_HDX           0x000000002
;@{;o;;o;	;
@
;i¥;"9#define MEBA_PORT_CAP_10M_FDX           0x000000004
;@{;o;;o;	;
@
;iÙ;"9#define MEBA_PORT_CAP_100M_HDX          0x000000008
;@{;o;;o;	;
@
;i;"9#define MEBA_PORT_CAP_100M_FDX          0x000000010
;@{;o;;o;	;
@
;iA;"9#define MEBA_PORT_CAP_1G_FDX            0x000000020
;@{;o;;o;	;
@
;iu;"9#define MEBA_PORT_CAP_2_5G_FDX          0x000000040
;@{;o;;o;	;
@
;i©;"9#define MEBA_PORT_CAP_5G_FDX            0x000000080
;@{;o;;o;	;
@
;iÝ;"9#define MEBA_PORT_CAP_10G_FDX           0x000000100
;@{;o;;o;	;
@
;i;"9#define MEBA_PORT_CAP_25G_FDX           0x000000200
;@{;o;;o;	;
@
;iE;"9#define MEBA_PORT_CAP_FLOW_CTRL         0x000001000
;@{;o;;o;	;
@
;iy;"9#define MEBA_PORT_CAP_COPPER            0x000002000
;@{;o;;o;	;
@
;i­;":#define MEBA_PORT_CAP_FIBER             0x000004000

;@{;o;;o;	;
@
;i;":#define MEBA_PORT_CAP_DUAL_COPPER       0x000008000

;@{;o;;o;	;
@
;iV;":#define MEBA_PORT_CAP_DUAL_FIBER        0x000010000

;@{;o;;o;	;
@
;i;"9#define MEBA_PORT_CAP_SD_ENABLE         0x000020000
;@{;o;;o;	;
@
;i¿;"9#define MEBA_PORT_CAP_SD_HIGH           0x000040000
;@{;o;;o;	;
@
;ió;"9#define MEBA_PORT_CAP_SD_INTERNAL       0x000080000
;@{;o;;o;	;
@
;i';"9#define MEBA_PORT_CAP_XAUI_LANE_FLIP    0x000200000
;@{;o;;o;	;
@
;i[;"9#define MEBA_PORT_CAP_VTSS_10G_PHY      0x000400000
;@{;o;;o;	;
@
;i;"9#define MEBA_PORT_CAP_SFP_DETECT        0x000800000
;@{;o;;o;	;
@
;iÃ;":#define MEBA_PORT_CAP_STACKING          0x001000000

;@{;o;;o;	;
@
;i%	;":#define MEBA_PORT_CAP_DUAL_SFP_DETECT   0x002000000

;@{;o;;o;	;
@
;i|	;":#define MEBA_PORT_CAP_SFP_ONLY          0x004000000

;@{;o;;o;	;
@
;iÛ	;"9#define MEBA_PORT_CAP_DUAL_NO_COPPER    0x008000000
;@{;o;;o;	;
@
;i
;"9#define MEBA_PORT_CAP_SERDES_RX_INVERT  0x010000000
;@{;o;;o;	;
@
;iC
;":#define MEBA_PORT_CAP_SERDES_TX_INVERT  0x020000000

;@{;o;;o;	;
@
;i
;":#define MEBA_PORT_CAP_INT_PHY           0x040000000

;@{;o;;o;	;
@
;iç
;":#define MEBA_PORT_CAP_NO_FORCE          0x080000000

;@{;o;;o;	;
@
;i(;":#define MEBA_PORT_CAP_CPU               0x100000000

;@{;o;;o;	;
@
;i5;":#define MEBA_PORT_CAP_SFP_INACCESSIBLE  0x200000000

;@{;o;;o;	;
@
;ij;"m#define MEBA_PORT_CAP_HDX        \
        (MEBA_PORT_CAP_10M_HDX | \
         MEBA_PORT_CAP_100M_HDX)

;@{;o;;o;	;
@
;iõ;"á#define MEBA_PORT_CAP_TRI_SPEED_FDX \
        (MEBA_PORT_CAP_AUTONEG    | \
         MEBA_PORT_CAP_1G_FDX     | \
         MEBA_PORT_CAP_100M_FDX   | \
         MEBA_PORT_CAP_10M_FDX    | \
         MEBA_PORT_CAP_FLOW_CTRL)

;@{;o;;o;	;
@
;i;"t#define MEBA_PORT_CAP_TRI_SPEED        \
        (MEBA_PORT_CAP_TRI_SPEED_FDX | \
         MEBA_PORT_CAP_HDX)

;@{;o;;o;	;
@
;i;"À#define MEBA_PORT_CAP_1G_PHY         \
        (MEBA_PORT_CAP_COPPER      | \
         MEBA_PORT_CAP_FIBER       | \
         MEBA_PORT_CAP_DUAL_COPPER | \
         MEBA_PORT_CAP_DUAL_FIBER)

;@{;o;;o;	;
@
;ih;"w#define MEBA_PORT_CAP_TRI_SPEED_COPPER \
        (MEBA_PORT_CAP_TRI_SPEED     | \
         MEBA_PORT_CAP_COPPER)

;@{;o;;o;	;
@
;i÷;"t#define MEBA_PORT_CAP_TRI_SPEED_FIBER \
        (MEBA_PORT_CAP_TRI_SPEED    | \
         MEBA_PORT_CAP_FIBER)

;@{;o;;o;	;
@
;i;"#define MEBA_PORT_CAP_TRI_SPEED_DUAL_COPPER \
        (MEBA_PORT_CAP_TRI_SPEED          | \
         MEBA_PORT_CAP_DUAL_COPPER)

;@{;o;;o;	;
@
;iX;"~#define MEBA_PORT_CAP_TRI_SPEED_DUAL_FIBER \
        (MEBA_PORT_CAP_TRI_SPEED         | \
         MEBA_PORT_CAP_DUAL_FIBER)

;@{;o;;o;	;
@
;iè;"À#define MEBA_PORT_CAP_ANY_FIBER      \
        (MEBA_PORT_CAP_FIBER       | \
         MEBA_PORT_CAP_DUAL_FIBER  | \
         MEBA_PORT_CAP_DUAL_COPPER | \
         MEBA_PORT_CAP_SFP_DETECT)

;@{;o;;o;	;
@
;iÜ;"#define MEBA_PORT_CAP_SPEED_DUAL_ANY_FIBER_FIXED_SPEED \
        (MEBA_PORT_CAP_DUAL_FIBER                    | \
         MEBA_PORT_CAP_DUAL_COPPER)

;@{;o;;o;	;
@
;i;"°#define MEBA_PORT_CAP_SPEED_DUAL_ANY_FIBER \
        (MEBA_PORT_CAP_DUAL_COPPER       | \
         MEBA_PORT_CAP_DUAL_FIBER        | \
         MEBA_PORT_CAP_DUAL_SFP_DETECT)

;@{;o;;o;	;
@
;i;"#define MEBA_PORT_CAP_TRI_SPEED_DUAL_ANY_FIBER   \
        (MEBA_PORT_CAP_TRI_SPEED               | \
         MEBA_PORT_CAP_SPEED_DUAL_ANY_FIBER)

;@{;o;;o;	;
@
;iQ;" #define MEBA_PORT_CAP_TRI_SPEED_DUAL_ANY_FIBER_FIXED_SFP_SPEED \
        (MEBA_PORT_CAP_TRI_SPEED | \
         MEBA_PORT_CAP_SPEED_DUAL_ANY_FIBER_FIXED_SPEED)

;@{;o;;o;	;
@
;i
;"y#define MEBA_PORT_CAP_DUAL_FIBER_1000X \
        (MEBA_PORT_CAP_DUAL_FIBER | \
         MEBA_PORT_CAP_DUAL_COPPER)

;@{;o;;o;	;
@
;iÀ;"Û#define MEBA_PORT_CAP_SFP_1G       \
        (MEBA_PORT_CAP_AUTONEG   | \
         MEBA_PORT_CAP_100M_FDX  | \
         MEBA_PORT_CAP_1G_FDX    | \
         MEBA_PORT_CAP_FLOW_CTRL | \
         MEBA_PORT_CAP_SFP_ONLY)

;@{;o;;o;	;
@
;iâ;"k#define MEBA_PORT_CAP_SFP_2_5G  \
        (MEBA_PORT_CAP_SFP_1G | \
         MEBA_PORT_CAP_2_5G_FDX)

;@{;o;;o;	;
@
;i§;"å#define MEBA_PORT_CAP_SFP_SD_HIGH    \
        (MEBA_PORT_CAP_SD_ENABLE   | \
         MEBA_PORT_CAP_SD_HIGH     | \
         MEBA_PORT_CAP_SD_INTERNAL | \
         MEBA_PORT_CAP_SFP_DETECT  | \
         MEBA_PORT_CAP_SFP_ONLY)

;@{;o;;o;	;
@
;iê;"Ú#define MEBA_PORT_CAP_SFP_SD_HIGH_NO_DETECT \
        (MEBA_PORT_CAP_SD_ENABLE          | \
         MEBA_PORT_CAP_SD_HIGH            | \
         MEBA_PORT_CAP_SD_INTERNAL        | \
         MEBA_PORT_CAP_SFP_ONLY)

;@{;o;;o;	;
@
;iÄ;"k#define MEBA_PORT_CAP_COPPER_10G \
        (MEBA_PORT_CAP_10G_FDX | \
         MEBA_PORT_CAP_COPPER)

;@{;o;;o;	;
@
;iZ;"ú#define MEBA_PORT_CAP_2_5G_TRI_SPEED_FDX \
        (MEBA_PORT_CAP_AUTONEG         | \
         MEBA_PORT_CAP_2_5G_FDX        | \
         MEBA_PORT_CAP_1G_FDX          | \
         MEBA_PORT_CAP_100M_FDX        | \
         MEBA_PORT_CAP_FLOW_CTRL)

;@{;o;;o;	;
@
;i;"~#define MEBA_PORT_CAP_2_5G_TRI_SPEED        \
        (MEBA_PORT_CAP_2_5G_TRI_SPEED_FDX | \
         MEBA_PORT_CAP_100M_HDX)

;@{;o;;o;	;
@
;iB;"|#define MEBA_PORT_CAP_2_5G_TRI_SPEED_COPPER \
        (MEBA_PORT_CAP_2_5G_TRI_SPEED     | \
         MEBA_PORT_CAP_COPPER)

;@{
;o;;o;	;
@
;ië;"typedef;@;o;;o;	;
@
;ió;"uint64_t ;@;o;;o;	;
@
;iü;"meba_port_cap_t;@;[ ;0{
;o;;o;	;
@
;i;"typedef;@:enum_type_declare{;o;;o;	;
@
;i;"	enum;@:
enums[{:	enum{:enum_nameo;;o;	;
@
;i9;"MEBA_BOARD_INITIALIZE;@;0{;{;o;;o;	;
@
;im;"MEBA_PORT_RESET;@;0{;{;o;;o;	;
@
;i ;"MEBA_PORT_RESET_POST;@;0{;{;o;;o;	;
@
;i×;"MEBA_STATUS_LED_INITIALIZE;@;0{;{;o;;o;	;
@
;i ;"MEBA_PORT_LED_INITIALIZE;@;0{;{;o;;o;	;
@
;iF ;"MEBA_FAN_INITIALIZE;@;0{;{;o;;o;	;
@
;iy ;"MEBA_SENSOR_INITIALIZE;@;0{;{;o;;o;	;
@
;i² ;"MEBA_INTERRUPT_INITIALIZE;@;0{;{;o;;o;	;
@
;i!!;"MEBA_SYNCE_DPLL_INITIALIZE;@;0{;{;o;;o;	;
@
;iW!;"MEBA_POE_INITIALIZE;@;0{;{;o;;o;	;
@
;i!;"MEBA_PHY_INITIALIZE
;@;0;o;;o;	;
@
;i!;"meba_reset_point_t;@;[ ;0{
;o;;o;	;
@
;i±!;"typedef;@;{;o;;o;	;
@
;i¹!;"	enum;@;[{;{;o;;o;	;
@
;i÷!;"MEBA_SENSOR_PORT_TEMP;@;0{;{;o;;o;	;
@
;iN";"MEBA_SENSOR_BOARD_TEMP;@;0;o;;o;	;
@
;ih";"meba_sensor_t;@;[ ;0{
;o;;o;	;
@
;ix";"typedef;@;{;o;;o;	;
@
;i";"	enum;@;[{;{	;o;;o;	;
@
;i";"MEBA_CAP_FIRST ;@:operatoro;;o;	;
@
;i";"=;@:	expro;;o;	;
@
;i";"
50000;@;0{;{	;o;;o;	;
@
;iÊ";"MEBA_CAP_POE ;@;o;;o;	;
@
;i×";"=;@;o;;o;	;
@
;iÙ";"MEBA_CAP_FIRST;@;0{;{;o;;o;	;
@
;i"#;"MEBA_CAP_1588_CLK_ADJ_DAC;@;0{;{;o;;o;	;
@
;iu#;"MEBA_CAP_1588_REF_CLK_SEL;@;0{;{;o;;o;	;
@
;iÀ#;"MEBA_CAP_TEMP_SENSORS;@;0{;{;o;;o;	;
@
;i$;"MEBA_CAP_BOARD_PORT_COUNT;@;0{;{;o;;o;	;
@
;i¥$;""MEBA_CAP_BOARD_PORT_MAP_COUNT;@;0{;{;o;;o;	;
@
;iõ$;"MEBA_CAP_LED_MODES;@;0{;{;o;;o;	;
@
;i<%;"MEBA_CAP_DYING_GASP;@;0{;{;o;;o;	;
@
;iV%;"MEBA_CAP_FAN_SUPPORT;@;0{;{;o;;o;	;
@
;ip%;"MEBA_CAP_LED_DIM_SUPPORT;@;0{;{;o;;o;	;
@
;i5&;"#MEBA_CAP_BOARD_HAS_PCB107_CPLD;@;0{;{;o;;o;	;
@
;i&;"$MEBA_CAP_PCB107_CPLD_CS_VIA_MUX;@;0{;{;o;;o;	;
@
;iÉ&;"#MEBA_CAP_BOARD_HAS_PCB135_CPLD;@;0{;{;o;;o;	;
@
;i';"MEBA_CAP_SYNCE_CLOCK_DPLL;@;0{;{;o;;o;	;
@
;iµ';"$MEBA_CAP_SYNCE_CLOCK_OUTPUT_CNT;@;0{;{;o;;o;	;
@
;i#(;"$MEBA_CAP_SYNCE_PTP_CLOCK_OUTPUT;@;0{;{;o;;o;	;
@
;ip(;"(MEBA_CAP_SYNCE_HO_POST_FILTERING_BW;@;0{;{;o;;o;	;
@
;iÌ(;"(MEBA_CAP_SYNCE_CLOCK_EEC_OPTION_CNT;@;0{;{;o;;o;	;
@
;i%);"MEBA_CAP_ONE_PPS_INT_ID;@;0{;{;o;;o;	;
@
;i);"$MEBA_CAP_SYNCE_DPLL_MODE_SINGLE;@;0{;{;o;;o;	;
@
;i*;""MEBA_CAP_SYNCE_DPLL_MODE_DUAL;@;0{;{;o;;o;	;
@
;ir*;")MEBA_CAP_SYNCE_STATION_CLOCK_MUX_SET;@;0{;{;o;;o;	;
@
;i×*;"MEBA_CAP_POE_BT;@;0{;{;o;;o;	;
@
;i5+;"MEBA_CAP_CPU_PORTS_COUNT;@;0{;{;o;;o;	;
@
;iT+;"MEBA_CAP_LAST   ;@;0;o;;o;	;
@
;i+;"meba_cap_t;@;[ ;0{
;o;;o;	;
@
;i¢+;"typedef;@;{;o;;o;	;
@
;iª+;"	enum;@;[{;{	;o;;o;	;
@
;iµ+;"MEBA_TRACE_LVL_RACKET  ;@;o;;o;	;
@
;iÌ+;"=;@;o;;o;	;
@
;iÎ+;"1;@;0{;{	;o;;o;	;
@
;iÕ+;"MEBA_TRACE_LVL_NOISE   ;@;o;;o;	;
@
;iì+;"=;@;o;;o;	;
@
;iî+;"2;@;0{;{	;o;;o;	;
@
;iõ+;"MEBA_TRACE_LVL_DEBUG   ;@;o;;o;	;
@
;i,;"=;@;o;;o;	;
@
;i,;"4;@;0{;{	;o;;o;	;
@
;i,;"MEBA_TRACE_LVL_INFO    ;@;o;;o;	;
@
;i,,;"=;@;o;;o;	;
@
;i.,;"6;@;0{;{	;o;;o;	;
@
;i5,;"MEBA_TRACE_LVL_WARNING ;@;o;;o;	;
@
;iL,;"=;@;o;;o;	;
@
;iN,;"8;@;0{;{	;o;;o;	;
@
;iU,;"MEBA_TRACE_LVL_ERROR   ;@;o;;o;	;
@
;il,;"=;@;o;;o;	;
@
;in,;"9;@;0{;{	;o;;o;	;
@
;iu,;"MEBA_TRACE_LVL_NONE    ;@;o;;o;	;
@
;i,;"=;@;o;;o;	;
@
;i,;"10;@;0;o;;o;	;
@
;i,;"meba_trace_level_t;@;[ ;0{
;o;;o;	;
@
;i©,;"typedef;@;{;o;;o;	;
@
;i±,;"	enum;@;[{;{;o;;o;	;
@
;i¼,;"MEBA_LED_TYPE_FRONT;@;0{;{;o;;o;	;
@
;iÕ,;"MEBA_LED_TYPE_POE;@;0{;{;o;;o;	;
@
;iì,;"MEBA_LED_TYPE_DC_A;@;0{;{;o;;o;	;
@
;i-;"MEBA_LED_TYPE_DC_B;@;0{;{;o;;o;	;
@
;i-;"MEBA_LED_TYPE_ALARM;@;0{;{;o;;o;	;
@
;i5-;"MEBA_LED_TYPE_COUNT;@;0;o;;o;	;
@
;iL-;"meba_led_type_t;@;[ ;0{
;o;;o;	;
@
;i^-;"typedef;@;{;o;;o;	;
@
;if-;"	enum;@;[
{;{;o;;o;	;
@
;iq-;"MEBA_LED_COLOR_OFF;@;0{;{;o;;o;	;
@
;i-;"MEBA_LED_COLOR_GREEN;@;0{;{;o;;o;	;
@
;i£-;"MEBA_LED_COLOR_RED;@;0{;{;o;;o;	;
@
;i»-;"MEBA_LED_COLOR_YELLOW;@;0{;{;o;;o;	;
@
;iÖ-;"MEBA_LED_COLOR_COUNT;@;0;o;;o;	;
@
;iî-;"meba_led_color_t;@;[ ;0{
;o;;o;	;
@
;i.;"typedef;@;{;o;;o;	;
@
;i	.;"	enum;@;[{;{;o;;o;	;
@
;i.;"MEBA_EVENT_FIRST;@;0{;{	;o;;o;	;
@
;iq.;"MEBA_EVENT_LOS ;@;o;;o;	;
@
;i.;"=;@;o;;o;	;
@
;i.;"MEBA_EVENT_FIRST;@;0{;{;o;;o;	;
@
;iÎ.;"MEBA_EVENT_FLNK;@;0{;{;o;;o;	;
@
;i/;"MEBA_EVENT_AMS;@;0{;{;o;;o;	;
@
;i2/;"MEBA_EVENT_VOE;@;0{;{;o;;o;	;
@
;io/;"MEBA_EVENT_SYNC;@;0{;{;o;;o;	;
@
;i¯/;"MEBA_EVENT_EXT_SYNC;@;0{;{;o;;o;	;
@
;i0;"MEBA_EVENT_EXT_1_SYNC;@;0{;{;o;;o;	;
@
;iC0;"MEBA_EVENT_CLK_ADJ;@;0{;{;o;;o;	;
@
;i0;"MEBA_EVENT_CLK_TSTAMP;@;0{;{;o;;o;	;
@
;i1;"MEBA_EVENT_PTP_PIN_0;@;0{;{;o;;o;	;
@
;i%1;"MEBA_EVENT_PTP_PIN_1;@;0{;{;o;;o;	;
@
;i?1;"MEBA_EVENT_PTP_PIN_2;@;0{;{;o;;o;	;
@
;iY1;"MEBA_EVENT_PTP_PIN_3;@;0{;{;o;;o;	;
@
;i1;"MEBA_EVENT_INGR_ENGINE_ERR;@;0{;{;o;;o;	;
@
;ið1;"!MEBA_EVENT_INGR_RW_PREAM_ERR;@;0{;{;o;;o;	;
@
;i22;"MEBA_EVENT_INGR_RW_FCS_ERR;@;0{;{;o;;o;	;
@
;i}2;"MEBA_EVENT_EGR_ENGINE_ERR;@;0{;{;o;;o;	;
@
;i»2;"MEBA_EVENT_EGR_RW_FCS_ERR;@;0{;{;o;;o;	;
@
;i3;"&MEBA_EVENT_EGR_TIMESTAMP_CAPTURED;@;0{;{;o;;o;	;
@
;iJ3;"!MEBA_EVENT_EGR_FIFO_OVERFLOW;@;0{;{;o;;o;	;
@
;i3;"MEBA_EVENT_PUSH_BUTTON;@;0{;{;o;;o;	;
@
;iÆ3;"MEBA_EVENT_MOD_DET;@;0{;{;o;;o;	;
@
;iò3;"MEBA_EVENT_KR;@;0{;{;o;;o;	;
@
;i4;"MEBA_EVENT_LAST
;@;0;o;;o;	;
@
;i4;"meba_event_t;@;[ ;0{
;o;;o;	;
@
;i'4;"typedef;@;{;o;;o;	;
@
;i/4;"	enum;@;[{;{	;o;;o;	;
@
;i:4;""MEBA_PTP_IO_CAP_UNUSED       ;@;o;;o;	;
@
;iW4;"=;@;o;;o;	;
@
;iY4;"0x0;@;0{;{	;o;;o;	;
@
;ib4;""MEBA_PTP_IO_CAP_TIME_IF_IN   ;@;o;;o;	;
@
;i4;"=;@;o;;o;	;
@
;i4;"0x1;@;0{;{	;o;;o;	;
@
;i4;""MEBA_PTP_IO_CAP_TIME_IF_OUT  ;@;o;;o;	;
@
;i§4;"=;@;o;;o;	;
@
;i©4;"0x2;@;0{;{	;o;;o;	;
@
;i²4;""MEBA_PTP_IO_CAP_PIN_IN       ;@;o;;o;	;
@
;iÏ4;"=;@;o;;o;	;
@
;iÑ4;"0x4;@;0{;{	;o;;o;	;
@
;iÚ4;""MEBA_PTP_IO_CAP_PIN_OUT      ;@;o;;o;	;
@
;i÷4;"=;@;o;;o;	;
@
;iù4;"0x8;@;0{;{	;o;;o;	;
@
;i5;""MEBA_PTP_IO_CAP_PHY_SYNC     ;@;o;;o;	;
@
;i5;"=;@;o;;o;	;
@
;i!5;"
0x10
;@;0;o;;o;	;
@
;i(5;"meba_ptp_io_cap_t;@;[ ;0{;o;;o;	;
@
;iÏ5;"typedef;@:typedef_fptr{	:return_typeo;;o;	;
@
;i×5;"
void ;@:fptr_nameo;;o;	;
@
;iÞ5;"meba_event_signal_t;@:	args[{:normal{	:	typeo;;o;	;
@
;ió5;"meba_event_t ;@:	nameo;;o;	;
@
;i 6;"
event;@;[ ;0{;!{	;"o;;o;	;
@
;i+6;"uint32_t ;@;#o;;o;	;
@
;i46;"instance_no;@;[ ;0;0{;o;;o;	;
@
;ib7;"typedef;@;{	;o;;o;	;
@
;ij7;"mesa_rc ;@;o;;o;	;
@
;it7;"meba_conf_get_t;@; [	{;!{	;"o;;o;	;
@
;i7;"const char *;@;#o;;o;	;
@
;i7;"tag;@;[ ;0{;!{	;"o;;o;	;
@
;i¹7;"char *;@;#o;;o;	;
@
;i¿7;"buf;@;[ ;0{;!{	;"o;;o;	;
@
;iç7;"size_t ;@;#o;;o;	;
@
;iî7;"bufsize;@;[ ;0{;!{	;"o;;o;	;
@
;i8;"size_t *;@;#o;;o;	;
@
;i"8;"buflen;@;[ ;0;0{;o;;o;	;
@
;i,8;"typedef;@;{	;o;;o;	;
@
;i48;"
void ;@;o;;o;	;
@
;i;8;"meba_debug_t;@; [	{;!{	;"o;;o;	;
@
;iI8;"meba_trace_level_t ;@;#o;;o;	;
@
;i\8;"
level;@;[ ;0{;!{	;"o;;o;	;
@
;i8;"const char *;@;#o;;o;	;
@
;i8;"location;@;[ ;0{;!{	;"o;;o;	;
@
;i³8;"uint32_t ;@;#o;;o;	;
@
;i¼8;"line_no;@;[ ;0{;!{	;"o;;o;	;
@
;iâ8;"const char *;@;#o;;o;	;
@
;iî8;"fmt;@;[ ;0;0{;o;;o;	;
@
;i99;"typedef;@;{	;o;;o;	;
@
;iA9;"mesa_rc ;@;o;;o;	;
@
;iK9;"meba_clock_event_enable_t;@; [{;!{	;"o;;o;	;
@
;if9;"struct meba_inst *;@;#o;;o;	;
@
;ix9;"	inst;@;[ ;0{;!{	;"o;;o;	;
@
;i«9;"meba_event_t ;@;#o;;o;	;
@
;i¸9;"
event;@;[ ;0{;!{	;"o;;o;	;
@
;iì9;"mesa_bool_t ;@;#o;;o;	;
@
;iø9;"enable;@;[ ;0;0{;o;;o;	;
@
;i÷:;"typedef;@;{	;o;;o;	;
@
;iÿ:;"mesa_rc ;@;o;;o;	;
@
;i	;;"meba_clock_irq_handler_t;@; [{;!{	;"o;;o;	;
@
;i,;;"struct meba_inst *;@;#o;;o;	;
@
;i>;;"	inst;@;[ ;0{;!{	;"o;;o;	;
@
;iL;;"mesa_irq_t ;@;#o;;o;	;
@
;iW;;"chip_irq;@;[ ;0{;!{	;"o;;o;	;
@
;ii;;"meba_event_signal_t ;@;#o;;o;	;
@
;i};;"signal_notifier;@;[ ;0;0{
;o;;o;	;
@
;i«;;"typedef;@:struct_type_declare{:struct_members[{:member{;!{	;"o;;o;	;
@
;iÀ;;"mesa_reg_read_t  ;@;#o;;o;	;
@
;iÑ;;"reg_read;@;[ ;0{;&{;!{	;"o;;o;	;
@
;iß;;"mesa_reg_write_t ;@;#o;;o;	;
@
;ið;;"reg_write;@;[ ;0{;&{;!{	;"o;;o;	;
@
;iÿ;;"mesa_i2c_read_t  ;@;#o;;o;	;
@
;i<;"i2c_read;@;[ ;0{;&{;!{	;"o;;o;	;
@
;i<;"mesa_i2c_write_t ;@;#o;;o;	;
@
;i/<;"i2c_write;@;[ ;0{;&{;!{	;"o;;o;	;
@
;i><;"meba_conf_get_t  ;@;#o;;o;	;
@
;iO<;"conf_get;@;[ ;0{;&{;!{	;"o;;o;	;
@
;i]<;"meba_debug_t     ;@;#o;;o;	;
@
;in<;"
debug;@;[ ;0{;&{;!{	;"o;;o;	;
@
;iy<;"meba_clock_event_enable_t ;@;#o;;o;	;
@
;i<;"clock_event_enable;@;[ ;0{;&{;!{	;"o;;o;	;
@
;i¸<;"meba_clock_irq_handler_t  ;@;#o;;o;	;
@
;iÒ<;"clock_irq_handler;@;[ ;0{;&{;!{	;"o;;o;	;
@
;i÷<;"mepa_lock_func_t  ;@;#o;;o;	;
@
;i	=;"lock_enter;@;[ ;0{;&{;!{	;"o;;o;	;
@
;iS=;"mepa_lock_func_t  ;@;#o;;o;	;
@
;ie=;"lock_exit;@;[ ;0{;&{;!{	;"o;;o;	;
@
;i±=;"mepa_trace_func_t ;@;#o;;o;	;
@
;iÃ=;"
trace;@;[ ;0;o;;o;	;
@
;iÌ=;"meba_board_interface_t;@;[ ;0{
;o;;o;	;
@
;i>;"typedef;@;{;o;;o;	;
@
;i!>;"	enum;@;[{;{	;o;;o;	;
@
;i,>;"VTSS_BOARD_UNKNOWN ;@;o;;o;	;
@
;i?>;"=;@;o;;o;	;
@
;iA>;"0;@;0{;{	;o;;o;	;
@
;i_>;"VTSS_BOARD_LUTON10_REF ;@;o;;o;	;
@
;iv>;"=;@;o;;o;	;
@
;ix>;"4;@;0{;{;o;;o;	;
@
;i>;"VTSS_BOARD_LUTON26_REF;@;0{;{;o;;o;	;
@
;i>;"VTSS_BOARD_JAG_CU24_REF;@;0{;{;o;;o;	;
@
;i¸>;"VTSS_BOARD_JAG_SFP24_REF;@;0{;{;o;;o;	;
@
;iÖ>;"VTSS_BOARD_JAG_PCB107_REF;@;0{;{	;o;;o;	;
@
;i
?;"VTSS_BOARD_JAG_CU48_REF ;@;o;;o;	;
@
;i"?;"=;@;o;;o;	;
@
;i$?;"10;@;0{;{;o;;o;	;
@
;i,?;"VTSS_BOARD_SERVAL_REF;@;0{;{;o;;o;	;
@
;iG?;"!VTSS_BOARD_SERVAL_PCB106_REF;@;0{;{	;o;;o;	;
@
;i?;" VTSS_BOARD_SERVAL2_NID_REF ;@;o;;o;	;
@
;i?;"=;@;o;;o;	;
@
;i?;"14;@;0{;{;o;;o;	;
@
;i¤?;" VTSS_BOARD_JAGUAR2_CU48_REF;@;0{;{;o;;o;	;
@
;iÅ?;"VTSS_BOARD_JAGUAR2_REF;@;0{;{;o;;o;	;
@
;iá?;"VTSS_BOARD_JAGUAR2_AQR_REF;@;0{;{;o;;o;	;
@
;i@;"VTSS_BOARD_SERVALT_NID_REF;@;0{;{	;o;;o;	;
@
;i;@;"VTSS_BOARD_OCELOT_REF ;@;o;;o;	;
@
;iQ@;"=;@;o;;o;	;
@
;iS@;"28;@;0{;{;o;;o;	;
@
;ie@;"!VTSS_BOARD_OCELOT_PCB123_REF;@;0{;{;o;;o;	;
@
;i@;")VTSS_BOARD_OCELOT_PCB123_LAN8814_REF;@;0{;{;o;;o;	;
@
;i±@;"VTSS_BOARD_LUTON10_PDS408G;@;0{;{	;o;;o;	;
@
;iö@;"#VTSS_BOARD_FIREANT_PCB134_REF ;@;o;;o;	;
@
;iA;"=;@;o;;o;	;
@
;iA;"134;@;0{;{	;o;;o;	;
@
;iA;"#VTSS_BOARD_FIREANT_PCB135_REF ;@;o;;o;	;
@
;i=A;"=;@;o;;o;	;
@
;i?A;"135;@;0{;{	;o;;o;	;
@
;iHA;""VTSS_BOARD_LAN9668_ADARO_REF ;@;o;;o;	;
@
;ieA;"=;@;o;;o;	;
@
;igA;"0x6813;@;0{;{	;o;;o;	;
@
;isA;"$VTSS_BOARD_LAN9668_SUNRISE_REF ;@;o;;o;	;
@
;iA;"=;@;o;;o;	;
@
;iA;"0x6849;@;0{;{	;o;;o;	;
@
;i A;" VTSS_BOARD_LAN9668_SVB_REF ;@;o;;o;	;
@
;i»A;"=;@;o;;o;	;
@
;i½A;"0x8281;@;0{;{	;o;;o;	;
@
;iÉA;""VTSS_BOARD_LAN9668_8PORT_REF ;@;o;;o;	;
@
;iæA;"=;@;o;;o;	;
@
;ièA;"0x8290;@;0{;{	;o;;o;	;
@
;iôA;"$VTSS_BOARD_LAN9668_ENDNODE_REF ;@;o;;o;	;
@
;iB;"=;@;o;;o;	;
@
;iB;"0x8291;@;0{;{	;o;;o;	;
@
;i!B;",VTSS_BOARD_LAN9668_ENDNODE_CARRIER_REF ;@;o;;o;	;
@
;iHB;"=;@;o;;o;	;
@
;iJB;"0x8309;@;0;o;;o;	;
@
;iTB;"vtss_board_type_t;@;[ ;0{
;o;;o;	;
@
;ihB;"typedef;@;${;%[	{;&{;!{	;"o;;o;	;
@
;i}B;"
char ;@;#o;;o;	;
@
;iB;"	name;@;[{;o;;o;	;
@
;iB;"32;@;0{;&{;!{	;"o;;o;	;
@
;iB;"mesa_target_type_t   ;@;#o;;o;	;
@
;i¥B;"target;@;[ ;0{;&{;!{	;"o;;o;	;
@
;i±B;"mesa_port_mux_mode_t ;@;#o;;o;	;
@
;iÆB;"mux_mode;@;[ ;0{;&{;!{	;"o;;o;	;
@
;i	C;"vtss_board_type_t ;@;#o;;o;	;
@
;iC;"board_type;@;[ ;0;o;;o;	;
@
;i)C;"meba_board_props_t;@;[ ;0{
;o;;o;	;
@
;i?C;"typedef;@;${;%[{;&{;!{	;"o;;o;	;
@
;iTC;"mesa_port_map_t        ;@;#o;;o;	;
@
;ikC;"map;@;[ ;0{;&{;!{	;"o;;o;	;
@
;itC;"mesa_port_interface_t  ;@;#o;;o;	;
@
;iC;"mac_if;@;[ ;0{;&{;!{	;"o;;o;	;
@
;iC;"meba_port_cap_t        ;@;#o;;o;	;
@
;i®C;"cap;@;[ ;0{;&{;!{	;"o;;o;	;
@
;iZD;"mesa_port_no_t         ;@;#o;;o;	;
@
;iqD;"phy_base_port;@;[ ;0{;&{;!{	;"o;;o;	;
@
;iÇD;"mesa_chip_no_t         ;@;#o;;o;	;
@
;iÞD;"poe_chip_port;@;[ ;0{;&{;!{	;"o;;o;	;
@
;iñD;"mesa_bool_t            ;@;#o;;o;	;
@
;iE;"poe_support;@;[ ;0;o;;o;	;
@
;iE;"meba_port_entry_t;@;[ ;0{
;o;;o;	;
@
;iE;"typedef;@;${;%[{;&{;!{	;"o;;o;	;
@
;i¼E;"mesa_inst_t             ;@;#o;;o;	;
@
;iÔE;"	inst;@;[ ;0{;&{;!{	;"o;;o;	;
@
;iÞE;"struct meba_inst        *;@;#o;;o;	;
@
;i÷E;"meba_inst;@;[ ;0{;&{;!{	;"o;;o;	;
@
;iF;"mepa_port_no_t          ;@;#o;;o;	;
@
;iF;"port_no;@;[ ;0{;&{;!{	;"o;;o;	;
@
;i+F;"mesa_miim_controller_t  ;@;#o;;o;	;
@
;iCF;"miim_controller;@;[ ;0{;&{;!{	;"o;;o;	;
@
;iXF;"uint8_t                 ;@;#o;;o;	;
@
;ipF;"miim_addr;@;[ ;0{;&{;!{	;"o;;o;	;
@
;iF;"mesa_chip_no_t          ;@;#o;;o;	;
@
;iF;"chip_no;@;[ ;0;o;;o;	;
@
;i¢F;"mepa_callout_ctx_t;@;[ ;0{
;o;;o;	;
@
;i·F;"typedef;@;${;%[{;&{;!{	;"o;;o;	;
@
;iG;"uint8_t ;@;#o;;o;	;
@
;iG;"start_time;@;[ ;0{;&{;!{	;"o;;o;	;
@
;ieG;"uint8_t ;@;#o;;o;	;
@
;imG;"start_level;@;[ ;0{;&{;!{	;"o;;o;	;
@
;i«G;"uint8_t ;@;#o;;o;	;
@
;i³G;"min_pwm;@;[ ;0;o;;o;	;
@
;i¾G;"meba_fan_param_t;@;[ ;0{
;o;;o;	;
@
;iÑG;"typedef;@;${;%[{;&{;!{	;"o;;o;	;
@
;iæG;"mesa_bool_t  ;@;#o;;o;	;
@
;ióG;"tx_fault;@;[ ;0{;&{;!{	;"o;;o;	;
@
;iH;"mesa_bool_t  ;@;#o;;o;	;
@
;iH;"los;@;[ ;0{;&{;!{	;"o;;o;	;
@
;i0H;"mesa_bool_t  ;@;#o;;o;	;
@
;i=H;"present;@;[ ;0;o;;o;	;
@
;iaH;"meba_sfp_status_t;@;[ ;0{;o;;o;	;
@
;iuH;"7#include <microchip/ethernet/board/api/hdr_end.h>
;@{;o;;o;	;
@
;i§H;"2#endif // _MICROCHIP_ETHERNET_BOARD_TYPES_H_
;@