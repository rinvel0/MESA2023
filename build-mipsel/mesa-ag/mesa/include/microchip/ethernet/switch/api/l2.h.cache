{:	root[å{:ppo:Parslet::Slice:@positiono:Parslet::Position:@string"^ù// Copyright (c) 2004-2020 Microchip Technology Inc. and its subsidiaries.
// SPDX-License-Identifier: MIT


#ifndef _MICROCHIP_ETHERNET_SWITCH_API_L2_
#define _MICROCHIP_ETHERNET_SWITCH_API_L2_

#include <microchip/ethernet/switch/api/types.h>
#include <microchip/ethernet/switch/api/qos.h>
#include <microchip/ethernet/switch/api/tsn.h>
#include <microchip/ethernet/switch/api/vop.h>
#include <microchip/ethernet/hdr_start.h>  // ALL INCLUDE ABOVE THIS LINE

/* - MAC address table --------------------------------------------- */

// MAC address entry
typedef struct
{
    mesa_vid_mac_t   vid_mac;          // VLAN ID and MAC addr
    mesa_port_list_t destination;      // Destination ports
    mesa_bool_t      copy_to_cpu;      // CPU copy flag for DMAC lookup
    mesa_bool_t      copy_to_cpu_smac; // CPU copy flag for SMAC lookup
    mesa_bool_t      locked;           // Locked/static flag
    mesa_bool_t      index_table;      // Index table used
    mesa_bool_t      aged;             // Age flag
    mesa_packet_rx_queue_t cpu_queue;  // CPU queue
} mesa_mac_table_entry_t;

// Add MAC address entry.
// entry [IN]  MAC address entry structure.
mesa_rc mesa_mac_table_add(const mesa_inst_t             inst,
                           const mesa_mac_table_entry_t  *const entry);

// Delete MAC address entry.
// vid_mac [IN]  VLAN ID and MAC address structure.
mesa_rc mesa_mac_table_del(const mesa_inst_t     inst,
                           const mesa_vid_mac_t  *const vid_mac);

// Get MAC address entry.
// vid_mac [IN]  VLAN ID and MAC address.
// entry [OUT]   MAC address entry.
mesa_rc mesa_mac_table_get(const mesa_inst_t       inst,
                           const mesa_vid_mac_t    *const vid_mac,
                           mesa_mac_table_entry_t  *const entry);

// Lookup next MAC address entry.
// vid_mac [IN]  VLAN ID and MAC address.
// entry [OUT]   MAC address entry.
mesa_rc mesa_mac_table_get_next(const mesa_inst_t       inst,
                                const mesa_vid_mac_t    *const vid_mac,
                                mesa_mac_table_entry_t  *const entry);


// MAC address table age time
typedef uint32_t mesa_mac_table_age_time_t;

// Get MAC address table age time.
// age_time [OUT]  MAC age time in seconds. Value zero disables aging.
//                 The default is 300 seconds.
mesa_rc mesa_mac_table_age_time_get(const mesa_inst_t          inst,
                                    mesa_mac_table_age_time_t  *const age_time);

// Set MAC address table age time.
// age_time [IN]  MAC age time in seconds. Value zero disables aging.
mesa_rc mesa_mac_table_age_time_set(const mesa_inst_t                inst,
                                    const mesa_mac_table_age_time_t  age_time);

// Do age scan of the MAC address table.
// This should be done periodically with interval T/2, where T is the age timer.
mesa_rc mesa_mac_table_age(const mesa_inst_t  inst);

// Do VLAN specific age scan of the MAC address table.
// vid [IN]  VLAN ID.
mesa_rc mesa_mac_table_vlan_age(const mesa_inst_t  inst,
                                const mesa_vid_t   vid);

// Flush MAC address table, i.e. remove all unlocked entries.
mesa_rc mesa_mac_table_flush(const mesa_inst_t inst);

// Delete MAC address entries learned on port.
// port_no [IN]  Port number.
mesa_rc mesa_mac_table_port_flush(const mesa_inst_t     inst,
                                  const mesa_port_no_t  port_no);

// Delete MAC address entries learned on VLAN ID.
// vid [IN]  VLAN ID.
mesa_rc mesa_mac_table_vlan_flush(const mesa_inst_t  inst,
                                  const mesa_vid_t   vid);

// Delete MAC address entries learned on port and VLAN ID.
// port_no [IN]  Port number.
// vid [IN]      VLAN ID.
mesa_rc mesa_mac_table_vlan_port_flush(const mesa_inst_t     inst,
                                       const mesa_port_no_t  port_no,
                                       const mesa_vid_t      vid);

// MAC address table status
typedef struct
{
    mesa_event_t learned;  // One or more entries were learned
    mesa_event_t replaced; // One or more entries were replaced
    mesa_event_t moved;    // One or more entries moved to another port
    mesa_event_t aged;     // One or more entries were aged
} mesa_mac_table_status_t;

// Get MAC address table status.
// status [OUT]  MAC address table status.
mesa_rc mesa_mac_table_status_get(const mesa_inst_t        inst,
                                  mesa_mac_table_status_t  *const status);

// Learning mode
typedef struct
{
    mesa_bool_t automatic;  // Automatic learning done by switch chip (default enabled)
    mesa_bool_t cpu;        // Learn frames copied to CPU (default disabled)
    mesa_bool_t discard;    // Learn frames discarded (default disabled)
} mesa_learn_mode_t;

// Get the learn mode for a port.
// port_no [IN]  Port number.
// mode [OUT]    Learn mode.
mesa_rc mesa_learn_port_mode_get(const mesa_inst_t     inst,
                                 const mesa_port_no_t  port_no,
                                 mesa_learn_mode_t     *const mode);
// Set the learn mode for a port.
// port_no [IN]  Port number.
// mode [IN]     Learn mode.
mesa_rc mesa_learn_port_mode_set(const mesa_inst_t        inst,
                                 const mesa_port_no_t     port_no,
                                 const mesa_learn_mode_t  *const mode);

/* - Operational state --------------------------------------------- */

// Get port operational state.
// port_no [IN]  Port number.
// state [OUT]   Port state, TRUE if link is up.
mesa_rc mesa_port_state_get(const mesa_inst_t     inst,
                            const mesa_port_no_t  port_no,
                            mesa_bool_t           *const state);


// Set port operational state.
// port_no [IN]  Port number.
// state [IN]    Port state, TRUE if link is up.
//               By default, all ports are down.
mesa_rc mesa_port_state_set(const mesa_inst_t     inst,
                            const mesa_port_no_t  port_no,
                            mesa_bool_t           state);

/* - Spanning Tree ------------------------------------------------- */

// Spanning Tree state
typedef enum
{
    MESA_STP_STATE_DISCARDING,  // STP state discarding (admin/operational down)
    MESA_STP_STATE_LEARNING,    // STP state learning
    MESA_STP_STATE_FORWARDING   // STP state forwarding
} mesa_stp_state_t;

// Get Spanning Tree state for a port.
// port_no [IN]  Port number.
// state [OUT]   STP state.
mesa_rc mesa_stp_port_state_get(const mesa_inst_t     inst,
                                const mesa_port_no_t  port_no,
                                mesa_stp_state_t      *const state);

// Set Spanning Tree state for a port.
// port_no [IN]  Port number.
// state [IN]    STP state. By default, all ports are forwarding.
mesa_rc mesa_stp_port_state_set(const mesa_inst_t       inst,
                                const mesa_port_no_t    port_no,
                                const mesa_stp_state_t  state);

// MSTP instance number
typedef uint32_t mesa_msti_t;

#define MESA_MSTIS           (65)                         // Number of MSTP instances
#define MESA_MSTI_START      (0)                          // MSTI start number
#define MESA_MSTI_END        (MESA_MSTI_START+MESA_MSTIS) // MSTI end number
#define MESA_MSTI_ARRAY_SIZE MESA_MSTI_END                // MSTI array size

// Get MSTP instance mapping for a VLAN.
// vid [IN]    VLAN ID.
// msti [OUT]  MSTP instance.
mesa_rc mesa_mstp_vlan_msti_get(const mesa_inst_t  inst,
                                const mesa_vid_t   vid,
                                mesa_msti_t        *const msti);

// Set MSTP instance mapping for a VLAN.
// vid [IN]   VLAN ID.
// msti [IN]  MSTP instance.
//            By default, all VLANs map to the first MSTP instance.
mesa_rc mesa_mstp_vlan_msti_set(const mesa_inst_t  inst,
                                const mesa_vid_t   vid,
                                const mesa_msti_t  msti);

// Get MSTP state for a port and MSTP instance.
// port_no [IN]  Port number.
// msti [IN]     MSTP instance.
// state [OUT]   MSTP state.
mesa_rc mesa_mstp_port_msti_state_get(const mesa_inst_t     inst,
                                      const mesa_port_no_t  port_no,
                                      const mesa_msti_t     msti,
                                      mesa_stp_state_t      *const state);

// Set MSTP state for a port and MSTP instance.
// port_no [IN]  Port number.
// msti [IN]     MSTP instance.
// state [IN]    MSTP state.
//               By default, all ports are forwarding for the first MSTP instance.
mesa_rc mesa_mstp_port_msti_state_set(const mesa_inst_t       inst,
                                      const mesa_port_no_t    port_no,
                                      const mesa_msti_t       msti,
                                      const mesa_stp_state_t  state);

/* - VLAN ---------------------------------------------------------- */

// VLAN configuration
typedef struct {
    mesa_etype_t s_etype; // Alternative S-tag Ethernet Type (default 0x88a8)
} mesa_vlan_conf_t;

// Get VLAN configuration.
// conf [OUT]  VLAN configuration structure.
mesa_rc mesa_vlan_conf_get(const mesa_inst_t inst,
                           mesa_vlan_conf_t  *const conf);

// Set VLAN configuration.
// conf [IN]  VLAN configuration structure.
mesa_rc mesa_vlan_conf_set(const mesa_inst_t      inst,
                           const mesa_vlan_conf_t *const conf);

// VLAN port type configuration
typedef enum
{
    MESA_VLAN_PORT_TYPE_UNAWARE, // VLAN unaware port
    MESA_VLAN_PORT_TYPE_C,       // C-port
    MESA_VLAN_PORT_TYPE_S,       // S-port
    MESA_VLAN_PORT_TYPE_S_CUSTOM // S-port using alternative Ethernet Type
} mesa_vlan_port_type_t;

// VLAN port configuration
typedef struct
{
    mesa_vlan_port_type_t port_type;      // Port type (ingress and egress)
    mesa_vid_t            pvid;           // Port VLAN ID (PVID, ingress)
    mesa_vid_t            untagged_vid;   // Port untagged VLAN ID (UVID, egress)
    mesa_vlan_frame_t     frame_type;     // Acceptable frame type (ingress)
    mesa_bool_t           ingress_filter; // Ingress filtering
} mesa_vlan_port_conf_t;

// Get VLAN mode for port.
// port_no [IN]  Port number.
// conf [OUT]    VLAN port configuration structure.
mesa_rc mesa_vlan_port_conf_get(const mesa_inst_t      inst,
                                const mesa_port_no_t   port_no,
                                mesa_vlan_port_conf_t  *const conf);

// Set VLAN mode for port.
// port_no [IN]  Port number.
// conf [IN]     VLAN port configuration structure.
//               By default, all ports are VLAN unaware with PVID equal to 1.
mesa_rc mesa_vlan_port_conf_set(const mesa_inst_t            inst,
                                const mesa_port_no_t         port_no,
                                const mesa_vlan_port_conf_t  *const conf);

// Get VLAN membership.
// vid [IN]      VLAN ID.
// member [OUT]  VLAN port member list.
mesa_rc mesa_vlan_port_members_get(const mesa_inst_t inst,
                                   const mesa_vid_t  vid,
                                   mesa_port_list_t  *port_list);

// Set VLAN membership.
// vid [IN]     VLAN ID.
// member [IN]  VLAN port member list.
//              By default, all ports are members of VLAN 1.
mesa_rc mesa_vlan_port_members_set(const mesa_inst_t      inst,
                                   const mesa_vid_t       vid,
                                   const mesa_port_list_t *port_list);

// VLAN ID configuration
typedef struct
{
    mesa_bool_t learning;        // Enable/disable learning
    mesa_bool_t flooding;        // Enable/disable flooding
    mesa_bool_t mirror;          // Enable/disable mirroring
    mesa_bool_t ingress_filter;  // Ingress filtering
    mesa_vid_t  fid CAP(L2_SVL); // Forwarding ID for SVL/IVL control
} mesa_vlan_vid_conf_t;

// Get VLAN ID configuration
// vid [IN]    VLAN ID.
// conf [OUT]  VLAN configuration.
mesa_rc mesa_vlan_vid_conf_get(const mesa_inst_t    inst,
                               const mesa_vid_t     vid,
                               mesa_vlan_vid_conf_t *const conf);

// Set VLAN ID configuration
// vid [IN]   VLAN ID.
// conf [IN]  VLAN configuration.
// By default, all VLANs have learning enabled and the FID is equal to the VID.
mesa_rc mesa_vlan_vid_conf_set(const mesa_inst_t          inst,
                               const mesa_vid_t           vid,
                               const mesa_vlan_vid_conf_t *const conf);

// VLAN Tx tag control
typedef enum
{
    MESA_VLAN_TX_TAG_PORT,    // Egress tagging determined by VLAN port configuration
    MESA_VLAN_TX_TAG_DISABLE, // Egress tagging disabled
    MESA_VLAN_TX_TAG_ENABLE,  // Egress tagging enabled
} mesa_vlan_tx_tag_t;

// Get VLAN Tx tagging configuration.
// vid [IN]      VLAN ID.
// cnt [IN]      Number of ports.
// tx_tag [OUT]  Egress port tagging list.
mesa_rc mesa_vlan_tx_tag_get(const mesa_inst_t  inst,
                             const mesa_vid_t   vid,
                             const uint32_t     cnt,
                             mesa_vlan_tx_tag_t *const tx_tag);

// Set VLAN Tx tagging configuration.
// vid [IN]     VLAN ID.
// cnt [IN]     Number of ports.
// tx_tag [IN]  Egress port tagging list.
//              By default, the VLAN port configuration is used for all ports in all VLANs.
mesa_rc mesa_vlan_tx_tag_set(const mesa_inst_t        inst,
                             const mesa_vid_t         vid,
                             const uint32_t           cnt,
                             const mesa_vlan_tx_tag_t *const tx_tag);

// Container for VLAN counters
typedef struct {
    uint64_t frames; // Number of frames
    uint64_t bytes;  // Number of bytes
} mesa_vlan_counter_types_t CAP(L2_VLAN_COUNTERS);

// VLAN counters
typedef struct {
    mesa_vlan_counter_types_t rx_vlan_unicast;   // Number of received unicast frames or bytes
    mesa_vlan_counter_types_t rx_vlan_multicast; // Number of received multicast frames or bytes
    mesa_vlan_counter_types_t rx_vlan_broadcast; // Number of received broadcast frames or bytes
} mesa_vlan_counters_t CAP(L2_VLAN_COUNTERS);

// Get VLAN Counters.
// vid [IN]       VLAN ID.
// counters [OUT] VLAN counters.
mesa_rc mesa_vlan_counters_get(const mesa_inst_t    inst,
                               const mesa_vid_t     vid,
                               mesa_vlan_counters_t *const counters)
    CAP(L2_VLAN_COUNTERS);

// Clear VLAN Counters.
// vid [IN]  VLAN ID.
mesa_rc mesa_vlan_counters_clear(const mesa_inst_t inst,
                                 const mesa_vid_t  vid)
    CAP(L2_VLAN_COUNTERS);

/* - VCL ----------------------------------------------------------- */

// VCL port configuration
typedef struct {
    mesa_bool_t          dmac_dip; // Enable DMAC/DIP matching (default SMAC/SIP)
    mesa_vcap_key_type_t key_type; // Key type for VCL lookup
} mesa_vcl_port_conf_t;

// Get VCL port configuration.
// port_no [IN]  Port number.
// conf [OUT]    VCL port configuration structure.
mesa_rc mesa_vcl_port_conf_get(const mesa_inst_t    inst,
                               const mesa_port_no_t port_no,
                               mesa_vcl_port_conf_t *const conf);
// Get VCL port configuration.
// port_no [IN]  Port number.
// conf [IN]     VCL port configuration structure.
//               By default, NORMAL key type and SMAC/SIP lookup is used.
mesa_rc mesa_vcl_port_conf_set(const mesa_inst_t          inst,
                               const mesa_port_no_t       port_no,
                               const mesa_vcl_port_conf_t *const conf);

// VCE frame type
typedef enum
{
    MESA_VCE_TYPE_ANY,     // Any frame type
    MESA_VCE_TYPE_ETYPE,   // Ethernet Type
    MESA_VCE_TYPE_LLC,     // LLC
    MESA_VCE_TYPE_SNAP,    // SNAP
    MESA_VCE_TYPE_IPV4,    // IPv4
    MESA_VCE_TYPE_IPV6     // IPv6
} mesa_vce_type_t;

// VCE ID type
typedef uint32_t mesa_vce_id_t;

#define MESA_VCL_IDS        256                              // Number of VCLs
#define MESA_VCL_ID_START   0                                // VCL ID start number
#define MESA_VCL_ID_END     (MESA_VCL_ID_START+MESA_VCL_IDS) // VCL ID end number
#define MESA_VCL_ARRAY_SIZE MESA_VCL_ID_END                  // VCL ID array size

#define MESA_VCE_ID_LAST 0 // Special value used to add last in list

// VCE MAC header information
typedef struct
{
    mesa_vcap_bit_t dmac_mc; // Multicast DMAC
    mesa_vcap_bit_t dmac_bc; // Broadcast DMAC
    mesa_vcap_u48_t dmac;    // DMAC
    mesa_vcap_u48_t smac;    // SMAC
} mesa_vce_mac_t;

// VCE tag information
typedef struct
{
    mesa_vcap_vid_t vid;    // VLAN ID (12 bit)
    mesa_vcap_u8_t  pcp;    // PCP (3 bit)
    mesa_vcap_bit_t dei;    // DEI
    mesa_vcap_bit_t tagged; // Tagged/untagged frame
    mesa_vcap_bit_t s_tag;  // S-tag type
} mesa_vce_tag_t;

// Frame data for MESA_VCE_TYPE_ETYPE
typedef struct
{
    mesa_vcap_u16_t etype; // Ethernet Type value
    mesa_vcap_u32_t data;  // MAC data
    mesa_vcap_u8_t  mel;   // MEG level (7 bit)
} mesa_vce_frame_etype_t;

// Frame data for MESA_VCE_TYPE_LLC
typedef struct
{
    mesa_vcap_u48_t data; // Data
} mesa_vce_frame_llc_t;

// Frame data for MESA_VCE_TYPE_SNAP
typedef struct
{
    mesa_vcap_u48_t data; // Data
} mesa_vce_frame_snap_t;

// Frame data for MESA_VCE_TYPE_IPV4
typedef struct
{
    mesa_vcap_bit_t fragment; // Fragment
    mesa_vcap_bit_t options;  // Header options
    mesa_vcap_vr_t  dscp;     // DSCP field (6 bit)
    mesa_vcap_u8_t  proto;    // Protocol
    mesa_vcap_ip_t  sip;      // Source IP address
    mesa_vcap_ip_t  dip;      // Destination IP address
    mesa_vcap_vr_t  sport;    // UDP/TCP: Source port
    mesa_vcap_vr_t  dport;    // UDP/TCP: Destination port
} mesa_vce_frame_ipv4_t;

// Frame data for MESA_VCE_TYPE_IPV6
typedef struct
{
    mesa_vcap_vr_t   dscp;  // DSCP field (6 bit)
    mesa_vcap_u8_t   proto; // Protocol
    mesa_vcap_u128_t sip;   // Source IP address
    mesa_vcap_u128_t dip;   // Destination IP address
    mesa_vcap_vr_t   sport; // UDP/TCP: Source port
    mesa_vcap_vr_t   dport; // UDP/TCP: Destination port
} mesa_vce_frame_ipv6_t;

// VCE Key
typedef struct
{
    mesa_port_list_t port_list; // Port list
    mesa_vce_mac_t   mac;       // MAC header
    mesa_vce_tag_t   tag;       // Outer tag
    mesa_vce_tag_t   inner_tag; // Inner tag
    mesa_vce_type_t  type;      // VCE frame type

    union
    {
        // MESA_VCE_TYPE_ANY: No specific fields
        mesa_vce_frame_etype_t etype; // MESA_VCE_TYPE_ETYPE
        mesa_vce_frame_llc_t   llc;   // MESA_VCE_TYPE_LLC
        mesa_vce_frame_snap_t  snap;  // MESA_VCE_TYPE_SNAP
        mesa_vce_frame_ipv4_t  ipv4;  // MESA_VCE_TYPE_IPV4
        mesa_vce_frame_ipv6_t  ipv6;  // MESA_VCE_TYPE_IPV6
    } frame;  // Frame type specific data
} mesa_vce_key_t;

// Ingress map selection
typedef enum {
    MESA_IMAP_SEL_DISABLE, // Ingress map not used
    MESA_IMAP_SEL_OUTER,   // Ingress map used for outer tag
    MESA_IMAP_SEL_INNER,   // Ingress map used for inner tag
} mesa_imap_sel_t;

// OAM detection signalled to VOE
typedef enum {
    MESA_OAM_DETECT_NONE,                     // No OAM detection
    MESA_OAM_DETECT_UNTAGGED,                 // Untagged OAM detection
    MESA_OAM_DETECT_SINGLE_TAGGED,            // Single tagged OAM detection
    MESA_OAM_DETECT_DOUBLE_TAGGED,            // Double tagged OAM detection
    MESA_OAM_DETECT_TRIPLE_TAGGED CAP(VOP_V2) // Triple tagged OAM detection
} mesa_oam_detect_t CAP(VOP);

// VCE Action
typedef struct
{
    mesa_vid_t                vid;         // Classified VLAN ID
    mesa_acl_policy_no_t      policy_no;   // ACL policy number
    mesa_bool_t               pop_enable;  // Tag pop enable
    uint8_t                   pop_cnt;     // Tag pop count
    mesa_imap_sel_t           map_sel;     // Ingress map selection
    mesa_qos_ingress_map_id_t map_id;      // Ingress map to use for classification
    mesa_iflow_id_t           flow_id;     // Ingress flow ID.
                                           // (VOP_V2) If MESA_IFLOW_ID_NONE OAM will be handled by the possibly enabled port-VOE.
    mesa_oam_detect_t         oam_detect;  // OAM detection
    mesa_bool_t               prio_enable; // Enable priority classification
    mesa_prio_t               prio;        // Priority value
    mesa_bool_t               dp_enable;   // Enable DP classification
    mesa_dp_level_t           dp;          // DP value
    mesa_bool_t               dscp_enable; // Enable DSCP classification
    mesa_dscp_t               dscp;        // DSCP value
    mesa_bool_t               pcp_enable;  // Enable PCP classification
    mesa_pcp_t                pcp;         // PCP value
    mesa_bool_t               dei_enable;  // Enable DEI classification
    mesa_dei_t                dei;         // DEI value
} mesa_vce_action_t;

// VLAN Control Entry
typedef struct
{
    mesa_vce_id_t     id;     // VCE ID
    mesa_vce_key_t    key;    // VCE Key
    mesa_vce_action_t action; // VCE Action
} mesa_vce_t;

// Initialize VCE to default values.
// type [IN]  VCE type.
// vce [OUT]  VCE structure.
mesa_rc mesa_vce_init(const mesa_inst_t      inst,
                      const mesa_vce_type_t  type,
                      mesa_vce_t             *const vce);

// Add/modify VCE.
// vce_id [IN]  VCE ID. The VCE will be added before the entry with this ID.
//                      MESA_VCE_ID_LAST is reserved for inserting last.
// vce [IN]     VCE structure.
mesa_rc mesa_vce_add(const mesa_inst_t    inst,
                     const mesa_vce_id_t  vce_id,
                     const mesa_vce_t     *const vce);

// Delete VCE.
// vce_id [IN]  VCE ID.
mesa_rc mesa_vce_del(const mesa_inst_t    inst,
                     const mesa_vce_id_t  vce_id);

/* - Ingress counters ---------------------------------------------- */

// Class/COSID count
typedef uint8_t mesa_class_cnt_t;

// Ingress counter ID
typedef uint16_t mesa_ingress_cnt_id_t;

// Allocate ingress counters.
// cnt [IN]   Number of classes/COSIDs
// id [OUT]   Ingress counter ID.
mesa_rc mesa_ingress_cnt_alloc(const mesa_inst_t      inst,
                               const mesa_class_cnt_t cnt,
                               mesa_ingress_cnt_id_t  *const id);

// Free ingress counters.
// id [IN]    Ingress counter ID.
mesa_rc mesa_ingress_cnt_free(const mesa_inst_t           inst,
                              const mesa_ingress_cnt_id_t id);

// Ingress counters
typedef struct {
    // For the following counter pairs, only the frame counters are valid in PSFP mode
    mesa_counter_pair_t rx_green;        // Rx green frames/bytes
    mesa_counter_pair_t rx_yellow;       // Rx yellow frames/bytes
    mesa_counter_pair_t rx_red;          // Rx red frames/bytes

    // The following counters are only valid in PSFP mode
    mesa_counter_t      rx_match;        // MatchingFramesCount: Rx matching frames
    mesa_counter_t      rx_gate_pass;    // PassingFramesCount: Rx passed gate
    mesa_counter_t      rx_gate_discard; // NotPassingFramesCount: Rx discarded by gate
    mesa_counter_t      rx_sdu_pass;     // PassingSDUCount: Rx passed maximum SDU size filter
    mesa_counter_t      rx_sdu_discard;  // NotPassingSDUCount: Rx discarded by maximum SDU size filter

    // The following counters are valid in any mode
    mesa_counter_pair_t rx_discard;      // Rx discarded frames/bytes
    mesa_counter_pair_t tx_discard;      // Tx discarded frames/bytes
} mesa_ingress_counters_t;

// Get ingress counters.
// id [IN]         Ingress counter ID.
// cosid [IN]      COSID.
// counters [OUT]  Counters.
mesa_rc mesa_ingress_cnt_get(const mesa_inst_t           inst,
                             const mesa_ingress_cnt_id_t id,
                             const mesa_cosid_t          cosid,
                             mesa_ingress_counters_t     *counters);

// Clear ingress counters.
// id [IN]     Ingress counter ID.
// cosid [IN]  COSID.
mesa_rc mesa_ingress_cnt_clear(const mesa_inst_t           inst,
                               const mesa_ingress_cnt_id_t id,
                               const mesa_cosid_t          cosid);

/* - Dual Leaky Bucket policers ------------------------------------ */

// DLB policer ID
typedef uint16_t mesa_dlb_policer_id_t;

// Allocate DLB policers.
// cnt [IN]   Number of classes/COSIDs
// id [OUT]   DLB policer ID.
mesa_rc mesa_dlb_policer_alloc(const mesa_inst_t      inst,
                               const mesa_class_cnt_t cnt,
                               mesa_dlb_policer_id_t  *const id);

// Free DLB policers.
// id [IN]    DLB policer ID.
mesa_rc mesa_dlb_policer_free(const mesa_inst_t           inst,
                              const mesa_dlb_policer_id_t id);

// Get DLB policer configuration.
// id [IN]     DLB policer ID.
// cosid [IN]  COSID.
// conf [OUT]  Policer configuration.
mesa_rc mesa_dlb_policer_conf_get(const mesa_inst_t           inst,
                                  const mesa_dlb_policer_id_t id,
                                  const mesa_cosid_t          cosid,
                                  mesa_dlb_policer_conf_t     *const conf);

// Set DLB policer configuration.
// id [IN]     DLB policer ID.
// cosid [IN]  COSID.
// conf [IN]   Policer configuration.
//             By default, all DLB policers are disabled.
// On Sparx-5 architecture this function has the following behavior:
// Policers are in HW divided into groups with these attributes:
//      minimum burst size
//      maximum burst size
//      minimum information rate
//      maximum information rate that is based on actual burst size. Higher burst size give higher max rate.
// A policer must fit into a group. Unsupported combinations of burst size and information rate exists.
// When requested burst size and information rate is not supported, the parameters are changed for best fit.
// Requested information rate too low is changed to the all group lowest minimum
// Requested information rate too high is changed to the all group highest maximum
// Requested burst size too low is changed to the group minimum for the selected rate
// Requested burst size too high is changed to the group maximum for the selected rate
mesa_rc mesa_dlb_policer_conf_set(const mesa_inst_t             inst,
                                  const mesa_dlb_policer_id_t   id,
                                  const mesa_cosid_t            cosid,
                                  const mesa_dlb_policer_conf_t *const conf);

// DLB policer status
typedef struct {
    mesa_bool_t mark_all_red; // MarkAllFramesRed: Discard all frames if red frame seen
} mesa_dlb_policer_status_t;

// Get DLB policer status.
// id [IN]       DLB policer ID.
// cosid [IN]    COSID.
// status [OUT]  DLB policer status.
mesa_rc mesa_dlb_policer_status_get(const mesa_inst_t           inst,
                                    const mesa_dlb_policer_id_t id,
                                    const mesa_cosid_t          cosid,
                                    mesa_dlb_policer_status_t   *const status);

/* - Ingress flow -------------------------------------------------- */

// Allocate ingress flow.
// id [OUT]   Ingress flow ID.
mesa_rc mesa_iflow_alloc(const mesa_inst_t inst,
                         mesa_iflow_id_t   *const id);

// Free ingress flow.
// id [IN]    Ingress flow ID.
mesa_rc mesa_iflow_free(const mesa_inst_t     inst,
                        const mesa_iflow_id_t id);

// Ingress flow configuration
typedef struct
{
    mesa_bool_t            cnt_enable;          // Enable ingress counter mapping
    mesa_ingress_cnt_id_t  cnt_id;              // Ingress counter ID
    mesa_bool_t            dlb_enable;          // Enable DLB policer
    mesa_dlb_policer_id_t  dlb_id;              // DLB policer ID
    mesa_voe_idx_t         voe_idx CAP(VOP);    // VOE index or MESA_VOE_IDX_NONE.
                                                // (VOP_V2) If MESA_VOE_IDX_NONE possibly enabled port-VOE will see OAM as data - else OAM will be handled by the VOE.
    mesa_voi_idx_t         voi_idx CAP(VOP_V2); // VOI index or MESA_VOI_IDX_NONE
    mesa_frer_iflow_conf_t frer CAP(L2_FRER);   // FRER ingress flow configuration
    mesa_psfp_iflow_conf_t psfp CAP(L2_PSFP);   // PSFP ingress flow configuration
    mesa_bool_t            cut_through_disable CAP(QOS_EGRESS_QUEUE_CUT_THROUGH); // Force store-and-forward
} mesa_iflow_conf_t;

// Get ingress flow configuration.
// id [IN]     Ingress flow ID.
// conf [OUT]  Ingress flow configuration.
mesa_rc mesa_iflow_conf_get(const mesa_inst_t     inst,
                            const mesa_iflow_id_t id,
                            mesa_iflow_conf_t     *const conf);

// Set ingress flow configuration.
// id [IN]    Ingress flow ID.
// conf [IN]  Ingress flow configuration.
mesa_rc mesa_iflow_conf_set(const mesa_inst_t      inst,
                            const mesa_iflow_id_t   id,
                            const mesa_iflow_conf_t *const conf);

/* - Tag Control List ---------------------------------------------- */

// TCE ID type
typedef uint32_t mesa_tce_id_t;

#define MESA_TCE_ID_LAST 0 // Special value used to add last in list

// Egress flow ID
typedef uint16_t mesa_eflow_id_t;

#define MESA_EFLOW_ID_NONE 0 // No flow ID allocated

// TCE Key
typedef struct
{
    mesa_port_list_t port_list;   // Port list
    mesa_vid_t       vid;         // Classified VLAN ID (zero means any VID)
    mesa_bool_t      flow_enable; // Enable ingress flow ID instead of VLAN ID
    mesa_iflow_id_t  flow_id;     // Ingress flow ID
} mesa_tce_key_t;

// TCE TPID selection
typedef enum {
    MESA_TPID_SEL_PORT,    // Tag pushed according to port VLAN configuration
    MESA_TPID_SEL_NONE,    // No tag pushed
    MESA_TPID_SEL_C,       // C-tag pushed
    MESA_TPID_SEL_S,       // S-tag pushed
    MESA_TPID_SEL_S_CUSTOM // S-custom tag pushed
} mesa_tpid_sel_t;

// TCE PCP selection
typedef enum {
    MESA_PCP_SEL_PORT,       // PCP selected according to port QoS configuration
    MESA_PCP_SEL_FIXED,      // Fixed PCP value
    MESA_PCP_SEL_CLASSIFIED, // Classified PCP value
    MESA_PCP_SEL_MAPPED      // Mapped PCP value
} mesa_pcp_sel_t;

// TCE DEI selection
typedef enum {
    MESA_DEI_SEL_PORT,       // DEI selected according to port QoS configuration
    MESA_DEI_SEL_FIXED,      // Fixed DEI value
    MESA_DEI_SEL_CLASSIFIED, // Classified DEI value
    MESA_DEI_SEL_MAPPED      // Mapped DEI value
} mesa_dei_sel_t;

#define MESA_TCE_VID_CLASSIFIED 0    // Use classified VID
#define MESA_TCE_VID_PRIORITY   4096 // Use priority-tag (VID zero)

// TCE tag information
typedef struct
{
    mesa_tpid_sel_t          tpid;    // TPID selection
    mesa_vid_t               vid;     // VLAN ID or special values MESA_TCE_VID_* above
    mesa_pcp_sel_t           pcp_sel; // PCP selection
    mesa_pcp_t               pcp;     // PCP value
    mesa_dei_sel_t           dei_sel; // DEI selection
    mesa_dei_t               dei;     // DEI value
    mesa_qos_egress_map_id_t map_id;  // Egress QoS map
} mesa_tce_tag_t;

// R-tag selection
typedef enum {
    MESA_RTAG_SEL_NONE,  // No R-tag pushed
    MESA_RTAG_SEL_OUTER, // Outer R-tag pushed
    MESA_RTAG_SEL_INNER, // Inner R-tag pushed
} mesa_rtag_sel_t;

// TCE R-tag information
typedef struct {
    mesa_rtag_sel_t sel; // R-tag push selection
    mesa_bool_t     pop; // R-tag popping
} mesa_tce_rtag_t;

// TCE Action
typedef struct
{
    mesa_tce_tag_t  tag;       // Outer tag
    mesa_tce_tag_t  inner_tag; // Inner tag
    uint8_t         pop_cnt;   // Tag pop count
    mesa_eflow_id_t flow_id;   // Egress flow ID.
                               // (VOP_V2) If MESA_EFLOW_ID_NONE possibly enabled port-VOE will see OAM as data.
    mesa_tce_rtag_t rtag;      // R-tag control, if capability MESA_CAP_L2_FRER is non-zero and MESA_CAP_L2_FRER_IFLOW_POP is zero.
} mesa_tce_action_t;

// Tag Control Entry
typedef struct
{
    mesa_tce_id_t     id;     // TCE ID
    mesa_tce_key_t    key;    // TCE Key
    mesa_tce_action_t action; // TCE Action
} mesa_tce_t;

// Initialize TCE to default values.
// tce [OUT]  TCE structure.
mesa_rc mesa_tce_init(const mesa_inst_t inst,
                      mesa_tce_t        *const tce);

// Add/modify TCE.
// tce_id [IN]  TCE ID. The TCE will be added before the entry with this ID.
//                      MESA_TCE_ID_LAST is reserved for inserting last.
// tce [IN]     TCE structure.
mesa_rc mesa_tce_add(const mesa_inst_t   inst,
                     const mesa_tce_id_t tce_id,
                     const mesa_tce_t    *const tce);

// Delete TCE.
// tce_id [IN]  TCE ID.
mesa_rc mesa_tce_del(const mesa_inst_t   inst,
                     const mesa_tce_id_t tce_id);

/* - Egress counters ----------------------------------------------- */

// Egress counter ID
typedef uint16_t mesa_egress_cnt_id_t;

// Allocate egress counters.
// cnt [IN]   Number of classes/COSIDs
// id [OUT]   Egress counter ID.
mesa_rc mesa_egress_cnt_alloc(const mesa_inst_t      inst,
                              const mesa_class_cnt_t cnt,
                              mesa_egress_cnt_id_t   *const id);

// Free egress counters.
// id [IN]    Egress counter ID.
mesa_rc mesa_egress_cnt_free(const mesa_inst_t          inst,
                             const mesa_egress_cnt_id_t id);

// Egress counters
typedef struct {
    mesa_counter_pair_t tx_green;   // Tx green frames/bytes
    mesa_counter_pair_t tx_yellow;  // Tx yellow frames/bytes
} mesa_egress_counters_t;

// Get egress counters.
// id [IN]         Egress counter ID.
// cosid [IN]      COSID.
// counters [OUT]  Counters.
mesa_rc mesa_egress_cnt_get(const mesa_inst_t          inst,
                            const mesa_egress_cnt_id_t id,
                            const mesa_cosid_t         cosid,
                            mesa_egress_counters_t     *counters);

// Clear egress counters.
// id [IN]     Egress counter ID.
// cosid [IN]  COSID.
mesa_rc mesa_egress_cnt_clear(const mesa_inst_t          inst,
                              const mesa_egress_cnt_id_t id,
                              const mesa_cosid_t         cosid);

/* - Egress flow --------------------------------------------------- */

// Allocate egress flow.
// id [OUT]   Egress flow ID.
mesa_rc mesa_eflow_alloc(const mesa_inst_t inst,
                         mesa_eflow_id_t   *const id);

// Free egress flow.
// id [IN]    Egress flow ID.
mesa_rc mesa_eflow_free(const mesa_inst_t     inst,
                        const mesa_eflow_id_t id);

// Egress flow configuration
typedef struct
{
    mesa_bool_t          cnt_enable;          // Enable ingress counter mapping
    mesa_egress_cnt_id_t cnt_id;              // Ingress counter ID
    mesa_voe_idx_t       voe_idx CAP(VOP);    // VOE index or MESA_VOE_IDX_NONE. 
                                              // (VOP_V2) If MESA_VOE_IDX_NONE possibly enabled port-VOE will see OAM as data - else OAM will be handled by the VOE.
    mesa_voi_idx_t       voi_idx CAP(VOP_V2); // VOI index or MESA_VOI_IDX_NONE
} mesa_eflow_conf_t;

// Get egress flow configuration.
// id [IN]     Egress flow ID.
// conf [OUT]  Egress flow configuration.
mesa_rc mesa_eflow_conf_get(const mesa_inst_t     inst,
                            const mesa_eflow_id_t id,
                            mesa_eflow_conf_t     *const conf);

// Set egress flow configuration.
// id [IN]    Egress flow ID.
// conf [IN]  Egress flow configuration.
mesa_rc mesa_eflow_conf_set(const mesa_inst_t       inst,
                            const mesa_eflow_id_t   id,
                            const mesa_eflow_conf_t *const conf);

/* - VLAN translation ---------------------------------------------- */

// VLAN translation port-to-group configuration
typedef struct {
    uint16_t         group_id;  // Group ID
    mesa_port_list_t port_list; // Port list
} mesa_vlan_trans_port2grp_conf_t;

// VLAN translation direction
typedef enum {
    MESA_VLAN_TRANS_DIR_BOTH,     // Bidirectional translation
    MESA_VLAN_TRANS_DIR_INGRESS,  // Ingress translation
    MESA_VLAN_TRANS_DIR_EGRESS    // Egress translation
} mesa_vlan_trans_dir_t;

// VLAN translation group-to-VLAN configuration
typedef struct {
    uint16_t              group_id;  // Group ID
    mesa_vid_t            vid;       // External VLAN ID (ingress key, egress data)
    mesa_vid_t            trans_vid; // Internal VLAN ID (egress key, ingress data)
    mesa_vlan_trans_dir_t dir;       // Direction
} mesa_vlan_trans_grp2vlan_conf_t;

// Add VLAN Translation Group entry.
// conf      [IN]  Translation configuration.
mesa_rc mesa_vlan_trans_group_add(const mesa_inst_t                     inst,
                                  const mesa_vlan_trans_grp2vlan_conf_t *const conf);

// Delete VLAN Translation Group entry.
// conf [IN] Translation configuration.
mesa_rc mesa_vlan_trans_group_del(const mesa_inst_t                     inst,
                                  const mesa_vlan_trans_grp2vlan_conf_t *const conf);

// Get VLAN Translation Group entry.
// in   [IN]  Translation configuration.
// conf [OUT] Translation configuration.
mesa_rc mesa_vlan_trans_group_get(const mesa_inst_t                     inst,
                                  const mesa_vlan_trans_grp2vlan_conf_t *const in,
                                  mesa_vlan_trans_grp2vlan_conf_t       *const conf);

// Get next VLAN Translation Group entry.
// in   [IN]  Translation configuration.
// conf [OUT] Translation configuration.
mesa_rc mesa_vlan_trans_group_get_next(const mesa_inst_t                     inst,
                                       const mesa_vlan_trans_grp2vlan_conf_t *const in,
                                       mesa_vlan_trans_grp2vlan_conf_t       *conf);

// Associate VLAN Translation Group entries to a port_list.
// Each port can only be member of one group.
// conf [IN]  Translation group.
mesa_rc mesa_vlan_trans_group_to_port_set(const mesa_inst_t                     inst,
                                          const mesa_vlan_trans_port2grp_conf_t *const conf);

// VLAN Translation function to fetch all ports for a group.
// group_id [IN]  Group ID.
// conf     [OUT] Translation group.
mesa_rc mesa_vlan_trans_group_to_port_get(const mesa_inst_t               inst,
                                          const uint16_t                  group_id,
                                          mesa_vlan_trans_port2grp_conf_t *conf);

// VLAN Translation function to fetch all ports for next group.
// group_id [IN]  Group ID.
// conf     [OUT] Translation group.
mesa_rc mesa_vlan_trans_group_to_port_get_next(const mesa_inst_t               inst,
                                               const uint16_t                  group_id,
                                               mesa_vlan_trans_port2grp_conf_t *conf);

// VCAP port configuration
typedef struct {
    mesa_vcap_key_type_t key_type_is1_1; // Key type for second IS1 lookup
    mesa_bool_t          dmac_dip_1;     // Enable DMAC/DIP matching in second lookup (default SMAC/SIP)
} mesa_vcap_port_conf_t CAP(L2_VCAP_PORT_CONF);

// Get VCAP port configuration.
// port_no [IN]  Port number.
// conf [OUT]    VCAP port configuration structure.
mesa_rc mesa_vcap_port_conf_get(const mesa_inst_t     inst,
                                const mesa_port_no_t  port_no,
                                mesa_vcap_port_conf_t *const conf)
    CAP(L2_VCAP_PORT_CONF);

// Set VCAP port configuration.
// port_no [IN]  Port number.
// conf [IN]     VCAP port configuration structure.
mesa_rc mesa_vcap_port_conf_set(const mesa_inst_t           inst,
                                const mesa_port_no_t        port_no,
                                const mesa_vcap_port_conf_t *const conf)
    CAP(L2_VCAP_PORT_CONF);

/* - Port Isolation------------------------------------------------- */

// Get enable/disable port isolation for VLAN.
// vid [IN]        VLAN ID.
// isolated [OUT]  VLAN isolation enable/disable option.
mesa_rc mesa_isolated_vlan_get(const mesa_inst_t  inst,
                               const mesa_vid_t   vid,
                               mesa_bool_t        *const isolated);


// Set enable/disable port isolation for VLAN.
// vid [IN]       VLAN ID.
// isolated [IN]  VLAN isolation enable/disable option.
//                By default, port isolation is disabled for all VLANs.
mesa_rc mesa_isolated_vlan_set(const mesa_inst_t  inst,
                               const mesa_vid_t   vid,
                               const mesa_bool_t  isolated);

// Get the isolated port member set.
// member [OUT]  Isolated port member list.
mesa_rc mesa_isolated_port_members_get(const mesa_inst_t inst,
                                       mesa_port_list_t  *port_list);

// Set the isolated port member set.
// member [IN]  Isolated port member list.
//              By default, no ports are isolated.
mesa_rc mesa_isolated_port_members_set(const mesa_inst_t      inst,
                                       const mesa_port_list_t *port_list);

/* - Private VLAN (PVLAN) ------------------------------------------ */

// Private VLAN Number
typedef uint32_t mesa_pvlan_no_t;

// Get Private VLAN membership.
// pvlan_no [IN]  Private VLAN group number.
// member [OUT]   Private VLAN port member list.
mesa_rc mesa_pvlan_port_members_get(const mesa_inst_t     inst,
                                    const mesa_pvlan_no_t pvlan_no,
                                    mesa_port_list_t      *port_list);

// Set Private VLAN membership.
// pvlan_no [IN]  Private VLAN group number.
// member [IN]    Private VLAN port member list.
//                By default, all ports are member of PVLAN 0.
mesa_rc mesa_pvlan_port_members_set(const mesa_inst_t      inst,
                                    const mesa_pvlan_no_t  pvlan_no,
                                    const mesa_port_list_t *port_list);

// Get Asymmetric Private VLAN membership.
// port_no [IN]  Ingress port.
// member [OUT]  Asymmetric Private VLAN port member list.
mesa_rc mesa_apvlan_port_members_get(const mesa_inst_t    inst,
                                     const mesa_port_no_t port_no,
                                     mesa_port_list_t     *port_list);

// Set Asymmetric Private VLAN membership.
// port_no [IN]  Ingress port.
// member [IN]   Asymmetric Private VLAN port member list.
//               By default, all ports are allowed to forward to all other ports.
mesa_rc mesa_apvlan_port_members_set(const mesa_inst_t      inst,
                                     const mesa_port_no_t   port_no,
                                     const mesa_port_list_t *port_list);


// Destination port group number
typedef mesa_port_no_t mesa_dgroup_no_t;

// Destination group port configuration
typedef struct {
    mesa_dgroup_no_t dgroup_no; // Destination port group
} mesa_dgroup_port_conf_t;

// Get Destination Group configuration for port.
// port_no [IN]  Port number.
// conf [OUT]    Destination group port configuration.
mesa_rc mesa_dgroup_port_conf_get(const mesa_inst_t       inst,
                                  const mesa_port_no_t    port_no,
                                  mesa_dgroup_port_conf_t *const conf);

// Set Destination Group configuration for port.
// port_no [IN]  Port number.
// conf [IN]     Destination group port configuration.
//               By default, the destination group for each port is equal to the port number.
mesa_rc mesa_dgroup_port_conf_set(const mesa_inst_t             inst,
                                  const mesa_port_no_t          port_no,
                                  const mesa_dgroup_port_conf_t *const conf);

/* - SFLOW --------------------------------------------------------- */

// sFlow configuration structure.
// Not all sampling rates are supported.
// Since the sFlow standard mandates that returned sample rates are
// actual sample rates and not desired sample rates, it is recommended
// to call mesa_sflow_sampling_rate_convert() to obtain the actual
// sample rate given a desired sample rate.
// mesa_sflow_port_conf_set() will auto-convert the requested sample rate
// to an actual sample rate, which will be returned in subsequent calls
// to mesa_sflow_port_conf_get().

// sFlow ingress and/or egress sampling is supported.
typedef enum {
    MESA_SFLOW_TYPE_NONE = 0, // Sampler is not enabled on the port.
    MESA_SFLOW_TYPE_RX,       // Sampler is enabled for ingress on the port.
    MESA_SFLOW_TYPE_TX,       // Sampler is enabled for egress on the port.
    MESA_SFLOW_TYPE_ALL       // Sampler is enabled for both ingress and egress on the port.
} mesa_sflow_type_t;

typedef struct {
    mesa_sflow_type_t type;          // Sample direction. Also used to turn off sampling.
    uint32_t          sampling_rate; // A value of N means: sample on average 1 out of N frames. 0 disables sampling.
} mesa_sflow_port_conf_t;

// Get port sFlow configuration.
// port_no [IN]  Port number (a.k.a. data source).
// conf    [OUT] sFlow sampler configuration.
mesa_rc mesa_sflow_port_conf_get(const mesa_inst_t            inst,
                                 const mesa_port_no_t         port_no,
                                       mesa_sflow_port_conf_t *const conf);

// Set port sFlow configuration.
// port_no [IN] Port number (a.k.a. data source).
// conf    [IN] sFlow sampler configuration.
mesa_rc mesa_sflow_port_conf_set(const mesa_inst_t            inst,
                                 const mesa_port_no_t         port_no,
                                 const mesa_sflow_port_conf_t *const conf);

// Convert desired sample rate to supported sample rate
//
// Since it may not be possible to realize all desired sample rates
// in H/W, this function can be used to query for an actual
// sample rate given a desired sample rate.
//
// If the sFlow application code wishes to support more than one
// sampler instance per port, it will have to use only powers of
// two for the sampling rate. To obtain powers of two sampling
// rates, given an arbitrary input sampling rate, set power2 to TRUE,
// otherwise set it to FALSE.
//
// power2   [IN]  Only return sampling rates in powers of two.
// rate_in  [IN]  Desired sample rate
// rate_out [OUT] Realizable sample rate
mesa_rc mesa_sflow_sampling_rate_convert(const mesa_inst_t inst,
                                         const mesa_bool_t power2,
                                         const uint32_t    rate_in,
                                               uint32_t    *const rate_out);

/* - Aggregation --------------------------------------------------- */

// Get aggregation port members.
// aggr_no [IN]  Aggregation number.
// member [OUT]  Aggregation port member list.
mesa_rc mesa_aggr_port_members_get(const mesa_inst_t    inst,
                                   const mesa_aggr_no_t aggr_no,
                                   mesa_port_list_t     *port_list);

// Set aggregation port members.
// aggr_no [IN]  Aggregation number.
// member [IN]   Aggregation port member list.
//               By default, no ports are aggregated.
mesa_rc mesa_aggr_port_members_set(const mesa_inst_t      inst,
                                   const mesa_aggr_no_t   aggr_no,
                                   const mesa_port_list_t *port_list);

// Aggregation traffic distribution mode
typedef struct
{
    mesa_bool_t smac_enable;        // Source MAC address
    mesa_bool_t dmac_enable;        // Destination MAC address
    mesa_bool_t sip_dip_enable;     // Source and destination IP address
    mesa_bool_t sport_dport_enable; // Source and destination UDP/TCP port
} mesa_aggr_mode_t;

// Get aggregation traffic distribution mode.
// mode [OUT]  Distribution mode structure.
mesa_rc mesa_aggr_mode_get(const mesa_inst_t  inst,
                           mesa_aggr_mode_t   *const mode);


// Set aggregation traffic distribution mode.
// mode [IN]  Distribution mode structure.
//            By default, SMAC is enabled.
mesa_rc mesa_aggr_mode_set(const mesa_inst_t       inst,
                           const mesa_aggr_mode_t  *const mode);

/* - Mirroring ----------------------------------------------------- */

// Mirror port configuration
typedef enum
{
    MESA_MIRROR_TAG_NONE,    // No mirror tag is added
    MESA_MIRROR_TAG_C,       // C-tag is added
    MESA_MIRROR_TAG_S,       // S-tag is added
    MESA_MIRROR_TAG_S_CUSTOM // Custom S-tag is added
} mesa_mirror_tag_t CAP(L2_MIRROR_TAG);

// Mirror configuration
typedef struct
{
    mesa_port_no_t    port_no;                // Mirror port or MESA_PORT_NO_NONE
    mesa_bool_t       fwd_enable;             // Enable normal traffic forwarding to mirror port
    mesa_mirror_tag_t tag CAP(L2_MIRROR_TAG); // Mirror tag type
    mesa_vid_t        vid CAP(L2_MIRROR_TAG); // Mirror tag VID
    mesa_tagprio_t    pcp CAP(L2_MIRROR_TAG); // Mirror tag PCP
    mesa_dei_t        dei CAP(L2_MIRROR_TAG); // Mirror tag DEI
} mesa_mirror_conf_t;

// Get the mirror configuration.
// conf [OUT]  Mirror configuration.
mesa_rc mesa_mirror_conf_get(const mesa_inst_t  inst,
                             mesa_mirror_conf_t *const conf);

// Set the mirror configuration.
// conf [IN]  Mirror configuration.
//            By default, mirroring is disabled.
mesa_rc mesa_mirror_conf_set(const mesa_inst_t        inst,
                             const mesa_mirror_conf_t *const conf);

// Get the mirror monitor port.
// port_no [OUT]  Port number.
mesa_rc mesa_mirror_monitor_port_get(const mesa_inst_t  inst,
                                     mesa_port_no_t     *const port_no);

// Set the mirror monitor port.
// port_no [IN]  Port number or MESA_PORT_NO_NONE.
mesa_rc mesa_mirror_monitor_port_set(const mesa_inst_t     inst,
                                     const mesa_port_no_t  port_no);

// Get the mirror ingress ports list.
// member [OUT]  Port member list.
mesa_rc mesa_mirror_ingress_ports_get(const mesa_inst_t inst,
                                      mesa_port_list_t  *port_list);

// Set the mirror ingress port list.
// member [IN]  Port member list.
mesa_rc mesa_mirror_ingress_ports_set(const mesa_inst_t      inst,
                                      const mesa_port_list_t *port_list);

// Get the mirror egress port list.
// member [OUT]  Port member list.
mesa_rc mesa_mirror_egress_ports_get(const mesa_inst_t inst,
                                     mesa_port_list_t  *port_list);

// Set the mirror egress port list.
// member [IN]  Port member list.
mesa_rc mesa_mirror_egress_ports_set(const mesa_inst_t      inst,
                                     const mesa_port_list_t *port_list);

// Get the mirror CPU ingress.
// member [OUT]  CPU  member
mesa_rc mesa_mirror_cpu_ingress_get(const mesa_inst_t  inst,
                                    mesa_bool_t        *member);

// Set CPU ingress mirroring (frames from the CPU)
// member [IN]  CPU member.
mesa_rc mesa_mirror_cpu_ingress_set(const mesa_inst_t  inst,
                                    const mesa_bool_t  member);

// Get the mirror CPU egress
// member [OUT]  CPU member.
mesa_rc mesa_mirror_cpu_egress_get(const mesa_inst_t  inst,
                                   mesa_bool_t        *member);

// Set the mirror CPU egress (frames to the CPU)
// member [IN]  CPU member.
mesa_rc mesa_mirror_cpu_egress_set(const mesa_inst_t  inst,
                                   const mesa_bool_t  member);

/* - Flooding control ---------------------------------------------- */

// Get unicast flood members.
// member [OUT]  Port member list.
mesa_rc mesa_uc_flood_members_get(const mesa_inst_t inst,
                                  mesa_port_list_t  *port_list);

// Set unicast flood members.
// member [IN]  Port member list.
//              By default, all ports are members.
mesa_rc mesa_uc_flood_members_set(const mesa_inst_t      inst,
                                  const mesa_port_list_t *port_list);

// Get multicast flood members.
// member [OUT]  Port member list.
mesa_rc mesa_mc_flood_members_get(const mesa_inst_t inst,
                                  mesa_port_list_t  *port_list);

// Set multicast flood members.
// This member set is used when flooding multicast frames, which are not IPv4/IPv6 data frames.
// member [IN]  Port member list.
//              By default, all ports are members.
mesa_rc mesa_mc_flood_members_set(const mesa_inst_t      inst,
                                  const mesa_port_list_t *port_list);

/* - IPv4 multicast ------------------------------------------ */

// Get IPv4 multicast flood members.
// member [OUT]  Port member list.
mesa_rc mesa_ipv4_mc_flood_members_get(const mesa_inst_t inst,
                                       mesa_port_list_t  *port_list);

// Set IPv4 multicast flood members.
// This member set is used when flooding IPv4 multicast data frames, meaning
// DIP in range 224.0.1.0 to 239.255.255.255.
// member [IN]  Port member list.
//              Ports connected to IPv4 multicast routers should be enabled.
//              By default, all ports are members.
mesa_rc mesa_ipv4_mc_flood_members_set(const mesa_inst_t      inst,
                                       const mesa_port_list_t *port_list);

// Add IPv4 multicast entry.
// vid [IN]     VLAN ID.
// sip [IN]     Source IP address (zero means any source).
// dip [IN]     Destination IP address.
// member [IN]  Port member list.
mesa_rc mesa_ipv4_mc_add(const mesa_inst_t      inst,
                         const mesa_vid_t       vid,
                         const mesa_ip_t        sip,
                         const mesa_ip_t        dip,
                         const mesa_port_list_t *port_list)
    CAP(L2_IPV4_MC_SIP);

// Delete IPv4 multicast entry.
// vid [IN]     VLAN ID.
// sip [IN]     Source IP address.
// dip [IN]     Destination IP address.
mesa_rc mesa_ipv4_mc_del(const mesa_inst_t inst,
                         const mesa_vid_t  vid,
                         const mesa_ip_t   sip,
                         const mesa_ip_t   dip)
    CAP(L2_IPV4_MC_SIP);

/* - IPv6 multicast ------------------------------------------- */

// Get IPv6 multicast flood members.
// member [OUT]  Port member list.
mesa_rc mesa_ipv6_mc_flood_members_get(const mesa_inst_t inst,
                                       mesa_port_list_t  *port_list);

// Set IPv6 multicast flood members.
// This member set is used when flooding IPv6 multicast data frames, meaning
// DIP in range FF00::/8 (optionally except Link-Local addresses, see below).
// member [IN]  Port member list.
//              Ports connected to IPv6 multicast routers should be enabled.
//              By default, all ports are members.
mesa_rc mesa_ipv6_mc_flood_members_set(const mesa_inst_t      inst,
                                       const mesa_port_list_t *port_list);

// Get IPv6 multicast control flooding mode.
// scope [OUT]  IPv6 multicast control flood.
mesa_rc mesa_ipv6_mc_ctrl_flood_get(const mesa_inst_t  inst,
                                    mesa_bool_t        *const scope);

// Set IPv6 multicast control flooding mode.
// This controls whether unknown Link-Local scope IPv6 multicasts (FF02::/16) are flooded
// using the multicast port list or the IPv6 multicast port list.
// scope [IN]  IPv6 multicast control flood.
//             0: Flood to multicast port members.
//             1: Flood to IPv6 multicast flood members.
mesa_rc mesa_ipv6_mc_ctrl_flood_set(const mesa_inst_t  inst,
                                    const mesa_bool_t  scope);

// Add IPv6 multicast entry.
// vid [IN]     VLAN ID.
// sip [IN]     Source IP address (zero means any source).
// dip [IN]     Destination IP address.
// member [IN]  Port member list.
mesa_rc mesa_ipv6_mc_add(const mesa_inst_t      inst,
                         const mesa_vid_t       vid,
                         const mesa_ipv6_t      sip,
                         const mesa_ipv6_t      dip,
                         const mesa_port_list_t *port_list)
    CAP(L2_IPV6_MC_SIP);

// Delete IPv6 multicast entry.
// vid [IN]  VLAN ID.
// sip [IN]  Source IP address.
// dip [IN]  Destination IP address.
mesa_rc mesa_ipv6_mc_del(const mesa_inst_t inst,
                         const mesa_vid_t  vid,
                         const mesa_ipv6_t sip,
                         const mesa_ipv6_t dip)
    CAP(L2_IPV6_MC_SIP);


/* - Ethernet Protection Switching ---------------------------------- */

// Port protection type
typedef enum
{
    MESA_EPS_PORT_1_PLUS_1, // 1+1 protection
    MESA_EPS_PORT_1_FOR_1   // 1:1 protection
} mesa_eps_port_type_t;

// Port protection configuration
typedef struct
{
    mesa_eps_port_type_t type;    // Protection type
    mesa_port_no_t       port_no; // Protection port or MESA_PORT_NO_NONE
} mesa_eps_port_conf_t;

// Get EPS port configuration.
// port_no [IN]  Working port.
// conf [OUT]    Protection configuration.
mesa_rc mesa_eps_port_conf_get(const mesa_inst_t     inst,
                               const mesa_port_no_t  port_no,
                               mesa_eps_port_conf_t  *const conf);

// Set EPS port configuration.
// port_no [IN]  Working port.
// conf [IN]     Protection configuration.
//               By default, all ports are unprotected.
mesa_rc mesa_eps_port_conf_set(const mesa_inst_t           inst,
                               const mesa_port_no_t        port_no,
                               const mesa_eps_port_conf_t  *const conf);


// EPS selector
typedef enum
{
    MESA_EPS_SELECTOR_WORKING,    // Select working port
    MESA_EPS_SELECTOR_PROTECTION  // Select protection port
} mesa_eps_selector_t;

// Get EPS port selector.
// port_no [IN]    Working port.
// selector [OUT]  Selector.
mesa_rc mesa_eps_port_selector_get(const mesa_inst_t     inst,
                                   const mesa_port_no_t  port_no,
                                   mesa_eps_selector_t   *const selector);

// Set EPS port selector.
// port_no [IN]   Working port.
// selector [IN]  Selector.
mesa_rc mesa_eps_port_selector_set(const mesa_inst_t          inst,
                                   const mesa_port_no_t       port_no,
                                   const mesa_eps_selector_t  selector);

/* - Ethernet Ring Protection Swiching ----------------------------- */

// ERPS instance number
typedef uint32_t mesa_erpi_t;

#define MESA_ERPIS           (64)                         // Number of ERPS instances
#define MESA_ERPI_START      (0)                          // ERPI start number
#define MESA_ERPI_END        (MESA_ERPI_START+MESA_ERPIS) // ERPI end number
#define MESA_ERPI_ARRAY_SIZE MESA_ERPI_END                // ERPI array size

// Get ERPS member state for a VLAN.
// erpi [IN]     ERPS instance.
// vid [IN]      VLAN ID.
// member [OUT]  Membership.
mesa_rc mesa_erps_vlan_member_get(const mesa_inst_t inst,
                                  const mesa_erpi_t erpi,
                                  const mesa_vid_t  vid,
                                  mesa_bool_t       *const member);

// Set ERPS member state for a VLAN.
// erpi [IN]    ERPS instance.
// vid [IN]     VLAN ID.
// member [IN]  Membership, TRUE if VLAN is included in ERPS instance.
//              By default, no VLANs map to a ring instance.
mesa_rc mesa_erps_vlan_member_set(const mesa_inst_t inst,
                                  const mesa_erpi_t erpi,
                                  const mesa_vid_t  vid,
                                  const mesa_bool_t member);

// ERPS state
typedef enum {
    MESA_ERPS_STATE_FORWARDING, // Forwarding
    MESA_ERPS_STATE_DISCARDING, // Discarding
} mesa_erps_state_t;

// Get ERPS state for ERPS instance and port.
// erpi [IN]     ERPS instance.
// port_no [IN]  Port number.
// state [OUT]   ERPS state.
mesa_rc mesa_erps_port_state_get(const mesa_inst_t    inst,
                                 const mesa_erpi_t    erpi,
                                 const mesa_port_no_t port_no,
                                 mesa_erps_state_t    *const state);

// Set ERPS state for ERPS instance and port.
// port_no [IN]  Port number.
// erpi [IN]     ERPS instance.
// state [IN]    ERPS state.
mesa_rc mesa_erps_port_state_set(const mesa_inst_t       inst,
                                 const mesa_erpi_t       erpi,
                                 const mesa_port_no_t    port_no,
                                 const mesa_erps_state_t state);

/* - Real-time Control List ---------------------------------------- */

// RCL VID configuration
typedef struct {
    mesa_bool_t pcp[MESA_PCP_CNT]; // PCP values
} mesa_rcl_vid_conf_t;

// Add/enable RCL VID classification.
// vid  [IN]  VLAN ID in outer tag or zero for untagged/priority-tagged frames
// conf [IN]  VLAN configuration structure.
mesa_rc mesa_rcl_vid_add(const mesa_inst_t         inst,
                         const mesa_vid_t          vid,
                         const mesa_rcl_vid_conf_t *const conf);

// Delete/disable RCL VID classification.
// vid  [IN]  VLAN ID in outer tag or zero for untagged/priority-tagged frames
mesa_rc mesa_rcl_vid_del(const mesa_inst_t inst,
                         const mesa_vid_t  vid);

// RCL Ethernet Type
typedef enum {
    MESA_RCL_ETYPE_ANY,      // Any Ethernet Type
    MESA_RCL_ETYPE_PROFINET, // Ethernet Type 0x8892
    MESA_RCL_ETYPE_OPC_UA,   // Ethernet Type 0xB62C
} mesa_rcl_etype_t;

// RCE key
typedef struct
{
    mesa_port_no_t   port_no;         // Ingress port
    mesa_vid_t       vid;             // VID or zero for untagged/priority-tagged
    mesa_vcap_bit_t  tagged;          // Outer tag
    mesa_bool_t      smac;            // SMAC/DMAC lookup selection
    mesa_vcap_u48_t  mac;             // SMAC/DMAC value
    mesa_rcl_etype_t etype;           // Ethernet type
    mesa_vcap_u16_t  frame_id;        // Profinet: FrameId
    mesa_vcap_u16_t  publisher_id;    // OPC-UA: PublisherId
    mesa_vcap_u16_t  writer_group_id; // OPC-UA: WriterGroupId
} mesa_rce_key_t;

// RCE action
typedef struct
{
    uint16_t         rtp_id;       // RTP identifier
    mesa_bool_t      rtp_sub_id;   // RTP sub-identifier
    mesa_bool_t      rtp_inbound;  // RTP inbound processing
    mesa_bool_t      port_enable;  // Enable port forwarding to egress port list
    mesa_port_list_t port_list;    // Egress port list (e.g. RTE port)
    mesa_bool_t      llct_enable;  // Enable Low-Latency Cut-Through
    mesa_port_no_t   llct_port_no; // LLCT egress port
} mesa_rce_action_t;

// RCE ID
typedef uint32_t mesa_rce_id_t;

#define MESA_RCE_ID_LAST 0 // Special value used to add last in list

// Real-time Control Entry
typedef struct
{
    mesa_rce_id_t     id;     // RCE ID
    mesa_rce_key_t    key;    // RCE Key
    mesa_rce_action_t action; // RCE Action
} mesa_rce_t;

// Initialize RCE to default values.
mesa_rc mesa_rce_init(const mesa_inst_t inst,
                      mesa_rce_t        *const rce);

// Add/modify RCE.
// rce_id [IN]  RCE ID. The RCE will be added before the entry with this ID.
//              MESA_RCE_ID_LAST is reserved for inserting last.
// rce [IN]     RCE structure.
mesa_rc mesa_rce_add(const mesa_inst_t   inst,
                     const mesa_rce_id_t rce_id,
                     const mesa_rce_t    *const rce);

// Delete RCE.
// rce_id [IN]  RCE ID.
mesa_rc mesa_rce_del(const mesa_inst_t   inst,
                     const mesa_rce_id_t rce_id);

// Legacy stacking types ------------------------------------------------------

// VStaX Unit Port Set ID (UPSID; 0-31).
typedef int mesa_vstax_upsid_t;

// Unit Port Set Port Number
typedef uint32_t mesa_vstax_upspn_t;

#include <microchip/ethernet/hdr_end.h>
#endif // _MICROCHIP_ETHERNET_SWITCH_API_L2_
:@byteposir:	@str"0#ifndef _MICROCHIP_ETHERNET_SWITCH_API_L2_
:@line_cacheo:Parslet::Source::LineCache:@line_endse:!Parslet::Source::RangeSearch[!iPipiqiriiÃiÄiõi$iSiiÌiÍiii+i:i<i{i·iÿiGii¿iòi&i@iAi[iiÆiii,i`iiÙiÚiôiiBi{i¾i ii#iMiqi¯i÷i>i?i@i^iii®iõi$	ii	iº	i»	iÞ	i$
io
i¿
iÀ
ié
i:ioipi§i½iöi/i0ini¤i¥iÔiòi0irisi¥i»iöi1i2imii¥ièi.iqiriiiiÞiifi¢i½i¾ißi
iKiii¨i·i¹ii^i§i¼i½ißiýiiWiiÜiþii9iyi¼iiiMiNimii¼iôi/ipiqirii¯iàiiIii¾i¿iiii,i.iiµiíiii)iGiciiÞi#i$iKiii«iéi*ijikii¡i¢iøiGiiáiâii#iAizi²ióiôii4iQiiÎii@iAiqii¯iÌi iS i ià iá i!i/!iO!il!i¿!i"iJ"i"iÔ"iÕ"i#i#i4#iE#i#i§#i¨#iÃ#ið#i#$i^$i_$iz$i¦$iÞ$i%i%i?%iL%iN%i%i¯%iÚ%i%&i>&i?&iZ&ii&ik&i·&i'iS'i 'iß'iø'iù'i(i2(if(i£(iã(i()i))iD)ib)i)iä)i'*im*i¸*i¹*iÑ*ië*i+iN+i+iÊ+iË+iã+iü+i#,i`,i ,iß,i&-i'-i@-iO-iQ-i-iÉ-i.i<.i.i.i.i¸.iÐ.ió.i-/if/i¨/i©/iÆ/iÝ/iÿ/iO0i0iÎ0i1i1i.1i;1i=1i1iÌ1i2i2i2iA2i[2i}2i¨2iÞ2i3iH3i3i3i¯3iÈ3ié3i4io4i«4iæ4i!5ig5ih5i5i5iÁ5ié5i6i6i.6i?6i6iÿ6i`7i7i7i¥7iÀ7iá7i8iT8i8i´8iµ8iÍ8iã8i9iT9io9ip9i¸9i¹9iÓ9iä9i6:it:i:i:i¬:iÊ:iý:i7;it;i¶;iÕ;ió;i&<ip<i°<ió<i;=i<=iN=i[=i]=i=i¶=iØ=iû=i>iA>iT>iU>id>i>i>iÔ>i(?iz?iÌ?iÍ?i@i@i1@i@@iB@iq@i @iÅ@iê@iü@iý@iAi#Ai%AiUAiAi£AiØAiBiBiBi;BiJBiLBi~Bi¥BiÕBiïBiðBiCi#Ci%CiGCi_Ci`CiCiCiCi¸CiÑCiÒCi÷CiDiDi2DibDiDiÀDióDi+EiaEiEiµEi¶EiÛEiêEiìEiFiFFiwFi­FiáFiGi3Gi4Gi?GiNGiPGi}Gi«GiØGiHi7Hi8HiBHiHHiyHi¶HiñHi-IiiIi¥IiÏIiáIiâIiûIi
Ji=JizJi·JiÊJiËJiíJiüJi>KiKiÓKi LimLiLiLiLi©Li«LiìLi,MiiMi¥MiéMi=Ni|NiÿNi;OiOiÅOiPiCPiPiÅPiQiEQiQiÅQiÚQiÛQiñQi RiRi*RiSRiRiRiRi³RiËRièRiSiNSiSiSiSiéSi2TiQTiTi³TiêTiëTiúTiUiBUiuUivUi¾Ui¿UiÔUiöUi÷UiVi5Vi6ViTVi{ViViÙViWiVWiWWiqWiWiÓWiXiXi'Xi8XiXiÑXiYiTYiUYiYiãYi2ZiZiéZiQ[iR[i[iÌ[i\i-\i.\iG\in\i\i¥\iä\i!]ia]i¦]i§]iÂ]iå]iû]i<^i{^i¾^i¿^i_i_i_iB_iC_i]_i_i¢_iÞ_i`i[`i\`ir`i`iÐ`iaiai2aiQaigaiaiÑaibiXbi¤bi¥biÇbiæbiübi"ci\ci¡ciâciýcidi9di¦diei{eiÌeifiufiÌfigiVgigiëgiìgihihikhihihi¤hiÅhiÝhiiiHiiiiÓii#ji$jiljimjiji¦ji×jikiki%kiDkixki«ki¬kiÊkiÙkiÛki-lisli¹liûliNmiõmiGniniíniZoiooipoioi³oiÞoipiLpipipi°piÏpiùpi2qijqi¬qi­qiõqiöqiri%ri&rikrilri~ri ri¡riÖri×riâriñrióri"siosi¾siósitititi+tiyti¥tiÐtiûti-ui@uiAuiVuieui¶uiæuiviLvi^vi_vitviviÔviwi9wijwi|wi}wi¸wiüwiýwixi#xi%xi]xiµxiìxiyiVyiyiÁyiÓyiÔyiçyiöyi"ziQzizizizi­zi¾ziïzi{i,{i-{i;{iJ{iL{ix{i¤{iÔ{i|iw|iû|i}i}i&}i5}i7}i_}i}i´}iÂ}iÃ}iè}i~i3~ih~ii~i|~iÉ~ii1i`iiÇiÈi×iïiiPiQiii¯iÖi×iôii<iwi±iòióii-iki¨i©i¼iÍi
iHibici{i¡i»iØiiPiiÑiÒiìii$ici iáiâi*i+iDibiiÊiËiàiþi2ieifiiiiäi(iziioiii§iÆiði(i^iiiÁißiiBizi¼i½iii6iGisi iÃiÄiâiñi0iii¡iºi»iëiüi-iiÕii*i+iPi~iÌi"i#iKisiÁiii=ifiiÝi0iii±iÚiiVi®iii@iniiåiCiDiiiÂiifi¸i¹iùii:iièi?i@i[ili·i iPiQiqiiÃiÿi>iiii¾iÜiiRiiàiüiýiEiFiuiiÊii9i}i~ii®iÉiiIii¸iõiöiiGiiÌiÍiòi iP i iß ià i(¡i)¡i@¡ib¡ic¡i¡i°¡iá¡i!¢ie¢i¬¢i­¢iÍ¢iú¢i+£ij£i«£ið£i8¤i9¤id¤i¤i¾¤iþ¤iA¥i¥i¥i´¥iÓ¥i¦i`¦i¢¦iç¦i0§i1§i2§iS§i|§i}§i¥§i¶§ið§i¨i¨i=¨i[¨i¨iÒ¨i©i]©i^©i©i­©iä©iBªiªiÑªi«i «ih«ii«i«i´«iø«i?¬i¬i®¬iø¬i@­ib­ic­i­i¨­ií­i:®i®iã®iø®iù®i
¯id¯iÚ¯iô¯iõ¯i°iI°iw°i»°i±iN±iO±ip±i¢±iÏ±i²iZ²i¦²i§²iß²iâ²i&³ib³i³i³iÒ³i´iR´i´i¶´i¹´iø´iµiGµiµiËµi¶i\¶i]¶i¥¶i¦¶iÇ¶iì¶i·iY·i·iß·ià·i¸i&¸iU¸i¸iË¸i¹iU¹iV¹i¹i¹i¹iÊ¹i	ºiRºiºi±ºi²ºiàºi»i@»i|»i}»i~»i¬»i×»i¼i;¼i|¼i}¼iÅ¼iÆ¼iã¼ið¼iò¼i)½iX½i½i½½iå½iæ½iþ½i¾i¾ia¾iÂ¾i¿iC¿i¿iÃ¿iÙ¿iÚ¿iû¿i ÀiVÀiÀiÀi¶ÀiÚÀiÁiGÁiÁiÁi¬ÁiËÁi	ÂiRÂiSÂisÂi¦ÂiçÂi,Ãi-ÃiSÃivÃi´ÃiùÃiúÃiÄiAÄiÄiÎÄiÏÄióÄiÅiSÅiÅiÅi¼ÅiÞÅi ÆiiÆijÆiÆi¦ÆiãÆi$Çi%ÇiXÇitÇi±ÇiñÇiòÇiÈi,ÈihÈi¨Èi©ÈiÚÈiöÈi2ÉiqÉirÉiºÉi»ÉiÙÉiüÉi6ÊiwÊixÊiÊi¸ÊiëÊi*ËipËiqËiËi´ËiîËi/Ìi0ÌiPÌi°ÌiÒÌiÍiDÍiÍiÍiÍÍiÎÍióÍiÎiUÎiÎiÎiÁÎiÏi<Ïi^Ïi«ÏiÞÏi"ÐimÐinÐiÐi¤ÐißÐiÑi)Ñi_ÑiÑiÉÑiþÑi:ÒiSÒiTÒitÒiÒi°ÒiØÒi	Ói9ÓiiÓiÓi²Ói³ÓiöÓi÷ÓiÔi?Ôi~ÔiÄÔiÅÔiêÔi7ÕiÕi§ÕiôÕi'ÖikÖi¶Öi·ÖiäÖi×iO×i×i×iÃ×iØi_ØiØi¿ØiøØi5ÙitÙiuÙiÙi«ÙiæÙiÚi0ÚifÚiÚiÐÚiÛiAÛiZÛi[Ûi{ÛiÛi±ÛiÖÛiÜi7ÜigÜiÜi°Üi±Üi²ÜiûÜiüÜiÝi!Ýi#ÝiQÝiÝiÝiÝi¹ÝiÈÝiÊÝiÿÝiIÞiaÞibÞiÞi ÞiËÞißiDßißißi§ßiÆßiñßi)àijài®ài÷àiøàiùài	áiáiáiQáiái¤ái¥ái¿áiàáiýái<âi~âiÉâiÊâiäâiãi ãidãi«ãiôãiõãi=äi>äiVäitäiuäiËäiåigåi´åiµåiÚåiúåiæi1æikæi¥æiÞæi"çi#çiHçigçiçiÇçièi>èixèi±èiîèiïèiýèiéi:éihéi}éi~éi¬éiÌéiêéiêiCêiêi¾êiëiëi2ëiPëipëiëiÌëiìiMìiìiìi×ìiØìiñìiíi3íiJíiKíiqíiÀíiìíi%îi]îiîiîiÉîiïiIïizïi{ïiïiïiÑïiði;ðiOðiPði[ðijðilði¢ðiôði'ñikñi¤ñiÛñiòiSòiòi¤òi¥òi³òiÂòiÄòiùòi2óioóiÀóiôiLôiôiôiôi£ôiÃôiÄôi	õi
õi%õi4õi6õi^õiõi³õiÁõiÂõiçõiöiJöiKöi^öi«öiìöi÷i:÷ik÷i¡÷i¢÷i±÷iÉ÷iø÷i*øi+øi{øi|øi¥øiÅøiÆøiãøiùi	ùi1ùi^ù:@last_line_endi^ù{;o;;o;	;
@
;i;"1#define _MICROCHIP_ETHERNET_SWITCH_API_L2_

;@{;o;;o;	;
@
;iÄ;"6#include <microchip/ethernet/switch/api/types.h>
;@{;o;;o;	;
@
;iõ;"4#include <microchip/ethernet/switch/api/qos.h>
;@{;o;;o;	;
@
;i$;"4#include <microchip/ethernet/switch/api/tsn.h>
;@{;o;;o;	;
@
;iS;"4#include <microchip/ethernet/switch/api/vop.h>
;@{;o;;o;	;
@
;i;"P#include <microchip/ethernet/hdr_start.h>  // ALL INCLUDE ABOVE THIS LINE

;@{
:keywordo;;o;	;
@
;i+;"typedef;@:struct_type_declare{:struct_members[{:member{:normal{	:	typeo;;o;	;
@
;i@;"mesa_vid_mac_t   ;@:	nameo;;o;	;
@
;iQ;"vid_mac;@:
array[ :cap0{;{;{	;o;;o;	;
@
;i;"mesa_port_list_t ;@;o;;o;	;
@
;i;"destination;@;[ ;0{;{;{	;o;;o;	;
@
;i»;"mesa_bool_t      ;@;o;;o;	;
@
;iÌ;"copy_to_cpu;@;[ ;0{;{;{	;o;;o;	;
@
;i;"mesa_bool_t      ;@;o;;o;	;
@
;i;"copy_to_cpu_smac;@;[ ;0{;{;{	;o;;o;	;
@
;iK;"mesa_bool_t      ;@;o;;o;	;
@
;i\;"locked;@;[ ;0{;{;{	;o;;o;	;
@
;i;"mesa_bool_t      ;@;o;;o;	;
@
;i;"index_table;@;[ ;0{;{;{	;o;;o;	;
@
;iÃ;"mesa_bool_t      ;@;o;;o;	;
@
;iÔ;"	aged;@;[ ;0{;{;{	;o;;o;	;
@
;iö;"mesa_packet_rx_queue_t ;@;o;;o;	;
@
;i;"cpu_queue;@;[ ;0:typedef_nameo;;o;	;
@
;i(;"mesa_mac_table_entry_t;@;[ ;0{:func_proto{;{	;o;;o;	;
@
;i;"mesa_rc ;@;o;;o;	;
@
;i;"mesa_mac_table_add;@;[ ;0:	args[{;{	;o;;o;	;
@
;i¢;"#const mesa_inst_t             ;@;o;;o;	;
@
;iÀ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iá;"*const mesa_mac_table_entry_t  *const ;@;o;;o;	;
@
;i;"
entry;@;[ ;0;0{;{;{	;o;;o;	;
@
;i`;"mesa_rc ;@;o;;o;	;
@
;ih;"mesa_mac_table_del;@;[ ;0;[{;{	;o;;o;	;
@
;i{;"const mesa_inst_t     ;@;o;;o;	;
@
;i;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i²;""const mesa_vid_mac_t  *const ;@;o;;o;	;
@
;iÏ;"vid_mac;@;[ ;0;0{;{;{	;o;;o;	;
@
;iB;"mesa_rc ;@;o;;o;	;
@
;iJ;"mesa_mac_table_get;@;[ ;0;[{;{	;o;;o;	;
@
;i];"const mesa_inst_t       ;@;o;;o;	;
@
;iu;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i;"$const mesa_vid_mac_t    *const ;@;o;;o;	;
@
;iµ;"vid_mac;@;[ ;0{;{	;o;;o;	;
@
;iÙ;"$mesa_mac_table_entry_t  *const ;@;o;;o;	;
@
;iø;"
entry;@;[ ;0;0{;{;{	;o;;o;	;
@
;iq;"mesa_rc ;@;o;;o;	;
@
;iy;"mesa_mac_table_get_next;@;[ ;0;[{;{	;o;;o;	;
@
;i;"const mesa_inst_t       ;@;o;;o;	;
@
;i©;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iÏ;"$const mesa_vid_mac_t    *const ;@;o;;o;	;
@
;iî;"vid_mac;@;[ ;0{;{	;o;;o;	;
@
;i;"$mesa_mac_table_entry_t  *const ;@;o;;o;	;
@
;i6;"
entry;@;[ ;0;0{
;o;;o;	;
@
;i^;"typedef;@:type_aliaso;;o;	;
@
;if;"uint32_t ;@;o;;o;	;
@
;io;"mesa_mac_table_age_time_t;@;[ ;0{;{;{	;o;;o;	;
@
;i$	;"mesa_rc ;@;o;;o;	;
@
;i,	;" mesa_mac_table_age_time_get;@;[ ;0;[{;{	;o;;o;	;
@
;iH	;" const mesa_inst_t          ;@;o;;o;	;
@
;ic	;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i	;"'mesa_mac_table_age_time_t  *const ;@;o;;o;	;
@
;i¯	;"age_time;@;[ ;0;0{;{;{	;o;;o;	;
@
;i$
;"mesa_rc ;@;o;;o;	;
@
;i,
;" mesa_mac_table_age_time_set;@;[ ;0;[{;{	;o;;o;	;
@
;iH
;"&const mesa_inst_t                ;@;o;;o;	;
@
;ii
;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i
;"&const mesa_mac_table_age_time_t  ;@;o;;o;	;
@
;i´
;"age_time;@;[ ;0;0{;{;{	;o;;o;	;
@
;i:;"mesa_rc ;@;o;;o;	;
@
;iB;"mesa_mac_table_age;@;[ ;0;[{;{	;o;;o;	;
@
;iU;"const mesa_inst_t  ;@;o;;o;	;
@
;ih;"	inst;@;[ ;0;0{;{;{	;o;;o;	;
@
;i½;"mesa_rc ;@;o;;o;	;
@
;iÅ;"mesa_mac_table_vlan_age;@;[ ;0;[{;{	;o;;o;	;
@
;iÝ;"const mesa_inst_t  ;@;o;;o;	;
@
;ið;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i;"const mesa_vid_t   ;@;o;;o;	;
@
;i);"vid;@;[ ;0;0{;{;{	;o;;o;	;
@
;in;"mesa_rc ;@;o;;o;	;
@
;iv;"mesa_mac_table_flush;@;[ ;0;[{;{	;o;;o;	;
@
;i;"const mesa_inst_t ;@;o;;o;	;
@
;i;"	inst;@;[ ;0;0{;{;{	;o;;o;	;
@
;iò;"mesa_rc ;@;o;;o;	;
@
;iú;"mesa_mac_table_port_flush;@;[ ;0;[{;{	;o;;o;	;
@
;i;"const mesa_inst_t     ;@;o;;o;	;
@
;i*;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iR;"const mesa_port_no_t  ;@;o;;o;	;
@
;ih;"port_no;@;[ ;0;0{;{;{	;o;;o;	;
@
;i»;"mesa_rc ;@;o;;o;	;
@
;iÃ;"mesa_mac_table_vlan_flush;@;[ ;0;[{;{	;o;;o;	;
@
;iÝ;"const mesa_inst_t  ;@;o;;o;	;
@
;ið;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i;"const mesa_vid_t   ;@;o;;o;	;
@
;i+;"vid;@;[ ;0;0{;{;{	;o;;o;	;
@
;i¥;"mesa_rc ;@;o;;o;	;
@
;i­;"#mesa_mac_table_vlan_port_flush;@;[ ;0;[{;{	;o;;o;	;
@
;iÌ;"const mesa_inst_t     ;@;o;;o;	;
@
;iâ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i;"const mesa_port_no_t  ;@;o;;o;	;
@
;i%;"port_no;@;[ ;0{;{	;o;;o;	;
@
;iU;"const mesa_vid_t      ;@;o;;o;	;
@
;ik;"vid;@;[ ;0;0{
;o;;o;	;
@
;i;"typedef;@;{;[	{;{;{	;o;;o;	;
@
;i£;"mesa_event_t ;@;o;;o;	;
@
;i°;"learned;@;[ ;0{;{;{	;o;;o;	;
@
;iâ;"mesa_event_t ;@;o;;o;	;
@
;iï;"replaced;@;[ ;0{;{;{	;o;;o;	;
@
;i";"mesa_event_t ;@;o;;o;	;
@
;i/;"
moved;@;[ ;0{;{;{	;o;;o;	;
@
;ij;"mesa_event_t ;@;o;;o;	;
@
;iw;"	aged;@;[ ;0;o;;o;	;
@
;i¤;"mesa_mac_table_status_t;@;[ ;0{;{;{	;o;;o;	;
@
;i
;"mesa_rc ;@;o;;o;	;
@
;i;"mesa_mac_table_status_get;@;[ ;0;[{;{	;o;;o;	;
@
;i,;"const mesa_inst_t        ;@;o;;o;	;
@
;iE;"	inst;@;[ ;0{;{	;o;;o;	;
@
;im;"%mesa_mac_table_status_t  *const ;@;o;;o;	;
@
;i;"status;@;[ ;0;0{
;o;;o;	;
@
;i¨;"typedef;@;{;[{;{;{	;o;;o;	;
@
;i½;"mesa_bool_t ;@;o;;o;	;
@
;iÉ;"automatic;@;[ ;0{;{;{	;o;;o;	;
@
;i;"mesa_bool_t ;@;o;;o;	;
@
;i!;"cpu;@;[ ;0{;{;{	;o;;o;	;
@
;ib;"mesa_bool_t ;@;o;;o;	;
@
;in;"discard;@;[ ;0;o;;o;	;
@
;i©;"mesa_learn_mode_t;@;[ ;0{;{;{	;o;;o;	;
@
;i;"mesa_rc ;@;o;;o;	;
@
;i";"mesa_learn_port_mode_get;@;[ ;0;[{;{	;o;;o;	;
@
;i;;"const mesa_inst_t     ;@;o;;o;	;
@
;iQ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;ix;"const mesa_port_no_t  ;@;o;;o;	;
@
;i;"port_no;@;[ ;0{;{	;o;;o;	;
@
;i¸;""mesa_learn_mode_t     *const ;@;o;;o;	;
@
;iÕ;"	mode;@;[ ;0;0{;{;{	;o;;o;	;
@
;i9;"mesa_rc ;@;o;;o;	;
@
;iA;"mesa_learn_port_mode_set;@;[ ;0;[{;{	;o;;o;	;
@
;iZ;"const mesa_inst_t        ;@;o;;o;	;
@
;is;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i;"const mesa_port_no_t     ;@;o;;o;	;
@
;i³;"port_no;@;[ ;0{;{	;o;;o;	;
@
;iÝ;"%const mesa_learn_mode_t  *const ;@;o;;o;	;
@
;iý;"	mode;@;[ ;0;0{;{;{	;o;;o;	;
@
;i¼;"mesa_rc ;@;o;;o;	;
@
;iÄ;"mesa_port_state_get;@;[ ;0;[{;{	;o;;o;	;
@
;iØ;"const mesa_inst_t     ;@;o;;o;	;
@
;iî;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i;"const mesa_port_no_t  ;@;o;;o;	;
@
;i&;"port_no;@;[ ;0{;{	;o;;o;	;
@
;iK;""mesa_bool_t           *const ;@;o;;o;	;
@
;ih;"
state;@;[ ;0;0{;{;{	;o;;o;	;
@
;i;"mesa_rc ;@;o;;o;	;
@
;i;"mesa_port_state_set;@;[ ;0;[{;{	;o;;o;	;
@
;i-;"const mesa_inst_t     ;@;o;;o;	;
@
;iC;"	inst;@;[ ;0{;{	;o;;o;	;
@
;ie;"const mesa_port_no_t  ;@;o;;o;	;
@
;i{;"port_no;@;[ ;0{;{	;o;;o;	;
@
;i ;"mesa_bool_t           ;@;o;;o;	;
@
;i¶;"
state;@;[ ;0;0{
;o;;o;	;
@
;i;"typedef;@:enum_type_declare{;o;;o;	;
@
;i';"	enum;@:
enums[{:	enum{:enum_nameo;;o;	;
@
;i2;"MESA_STP_STATE_DISCARDING;@;0{;!{;"o;;o;	;
@
;i;"MESA_STP_STATE_LEARNING;@;0{;!{;"o;;o;	;
@
;i¹;"!MESA_STP_STATE_FORWARDING   ;@;0;o;;o;	;
@
;iï;"mesa_stp_state_t;@;[ ;0{;{;{	;o;;o;	;
@
;ic;"mesa_rc ;@;o;;o;	;
@
;ik;"mesa_stp_port_state_get;@;[ ;0;[{;{	;o;;o;	;
@
;i;"const mesa_inst_t     ;@;o;;o;	;
@
;i;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i¿;"const mesa_port_no_t  ;@;o;;o;	;
@
;iÕ;"port_no;@;[ ;0{;{	;o;;o;	;
@
;iþ;""mesa_stp_state_t      *const ;@;o;;o;	;
@
;i;"
state;@;[ ;0;0{;{;{	;o;;o;	;
@
;i«;"mesa_rc ;@;o;;o;	;
@
;i³;"mesa_stp_port_state_set;@;[ ;0;[{;{	;o;;o;	;
@
;iË;"const mesa_inst_t       ;@;o;;o;	;
@
;iã;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i	;"const mesa_port_no_t    ;@;o;;o;	;
@
;i!;"port_no;@;[ ;0{;{	;o;;o;	;
@
;iJ;"const mesa_stp_state_t  ;@;o;;o;	;
@
;ib;"
state;@;[ ;0;0{
;o;;o;	;
@
;i;"typedef;@;o;;o;	;
@
;i;"uint32_t ;@;o;;o;	;
@
;i;"mesa_msti_t;@;[ ;0{;o;;o;	;
@
;i¢;"[#define MESA_MSTIS           (65)                         // Number of MSTP instances
;@{;o;;o;	;
@
;iø;"T#define MESA_MSTI_START      (0)                          // MSTI start number
;@{;o;;o;	;
@
;iG;"R#define MESA_MSTI_END        (MESA_MSTI_START+MESA_MSTIS) // MSTI end number
;@{;o;;o;	;
@
;i;"S#define MESA_MSTI_ARRAY_SIZE MESA_MSTI_END                // MSTI array size

;@{;{;{	;o;;o;	;
@
;iA;"mesa_rc ;@;o;;o;	;
@
;iI;"mesa_mstp_vlan_msti_get;@;[ ;0;[{;{	;o;;o;	;
@
;ia;"const mesa_inst_t  ;@;o;;o;	;
@
;it;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i;"const mesa_vid_t   ;@;o;;o;	;
@
;i­;"vid;@;[ ;0{;{	;o;;o;	;
@
;iÒ;"mesa_msti_t        *const ;@;o;;o;	;
@
;iì;"	msti;@;[ ;0;0{;{;{	;o;;o;	;
@
;i;"mesa_rc ;@;o;;o;	;
@
;i;"mesa_mstp_vlan_msti_set;@;[ ;0;[{;{	;o;;o;	;
@
;iµ;"const mesa_inst_t  ;@;o;;o;	;
@
;iÈ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iî;"const mesa_vid_t   ;@;o;;o;	;
@
;i;"vid;@;[ ;0{;{	;o;;o;	;
@
;i&;"const mesa_msti_t  ;@;o;;o;	;
@
;i9;"	msti;@;[ ;0;0{;{;{	;o;;o;	;
@
;iÌ;"mesa_rc ;@;o;;o;	;
@
;iÔ;""mesa_mstp_port_msti_state_get;@;[ ;0;[	{;{	;o;;o;	;
@
;iò;"const mesa_inst_t     ;@;o;;o;	;
@
;i ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i4 ;"const mesa_port_no_t  ;@;o;;o;	;
@
;iJ ;"port_no;@;[ ;0{;{	;o;;o;	;
@
;iy ;"const mesa_msti_t     ;@;o;;o;	;
@
;i ;"	msti;@;[ ;0{;{	;o;;o;	;
@
;i» ;""mesa_stp_state_t      *const ;@;o;;o;	;
@
;iØ ;"
state;@;[ ;0;0{;{;{	;o;;o;	;
@
;i¿!;"mesa_rc ;@;o;;o;	;
@
;iÇ!;""mesa_mstp_port_msti_state_set;@;[ ;0;[	{;{	;o;;o;	;
@
;iå!;"const mesa_inst_t       ;@;o;;o;	;
@
;iý!;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i)";"const mesa_port_no_t    ;@;o;;o;	;
@
;iA";"port_no;@;[ ;0{;{	;o;;o;	;
@
;ip";"const mesa_msti_t       ;@;o;;o;	;
@
;i";"	msti;@;[ ;0{;{	;o;;o;	;
@
;i´";"const mesa_stp_state_t  ;@;o;;o;	;
@
;iÌ";"
state;@;[ ;0;0{
;o;;o;	;
@
;i4#;"typedef;@;{;[{;{;{	;o;;o;	;
@
;iI#;"mesa_etype_t ;@;o;;o;	;
@
;iV#;"s_etype;@;[ ;0;o;;o;	;
@
;i#;"mesa_vlan_conf_t;@;[ ;0{;{;{	;o;;o;	;
@
;ið#;"mesa_rc ;@;o;;o;	;
@
;iø#;"mesa_vlan_conf_get;@;[ ;0;[{;{	;o;;o;	;
@
;i$;"const mesa_inst_t ;@;o;;o;	;
@
;i$;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i>$;"mesa_vlan_conf_t  *const ;@;o;;o;	;
@
;iW$;"	conf;@;[ ;0;0{;{;{	;o;;o;	;
@
;i¦$;"mesa_rc ;@;o;;o;	;
@
;i®$;"mesa_vlan_conf_set;@;[ ;0;[{;{	;o;;o;	;
@
;iÁ$;"const mesa_inst_t      ;@;o;;o;	;
@
;iØ$;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iù$;"#const mesa_vlan_conf_t *const ;@;o;;o;	;
@
;i%;"	conf;@;[ ;0;0{
;o;;o;	;
@
;i?%;"typedef;@;{;o;;o;	;
@
;iG%;"	enum;@; [	{;!{;"o;;o;	;
@
;iR%;" MESA_VLAN_PORT_TYPE_UNAWARE;@;0{;!{;"o;;o;	;
@
;i%;"MESA_VLAN_PORT_TYPE_C;@;0{;!{;"o;;o;	;
@
;i³%;"MESA_VLAN_PORT_TYPE_S;@;0{;!{;"o;;o;	;
@
;iÞ%;""MESA_VLAN_PORT_TYPE_S_CUSTOM ;@;0;o;;o;	;
@
;i'&;"mesa_vlan_port_type_t;@;[ ;0{
;o;;o;	;
@
;iZ&;"typedef;@;{;[
{;{;{	;o;;o;	;
@
;io&;"mesa_vlan_port_type_t ;@;o;;o;	;
@
;i&;"port_type;@;[ ;0{;{;{	;o;;o;	;
@
;i»&;"mesa_vid_t            ;@;o;;o;	;
@
;iÑ&;"	pvid;@;[ ;0{;{;{	;o;;o;	;
@
;i';"mesa_vid_t            ;@;o;;o;	;
@
;i';"untagged_vid;@;[ ;0{;{;{	;o;;o;	;
@
;iW';"mesa_vlan_frame_t     ;@;o;;o;	;
@
;im';"frame_type;@;[ ;0{;{;{	;o;;o;	;
@
;i¤';"mesa_bool_t           ;@;o;;o;	;
@
;iº';"ingress_filter;@;[ ;0;o;;o;	;
@
;iá';"mesa_vlan_port_conf_t;@;[ ;0{;{;{	;o;;o;	;
@
;if(;"mesa_rc ;@;o;;o;	;
@
;in(;"mesa_vlan_port_conf_get;@;[ ;0;[{;{	;o;;o;	;
@
;i(;"const mesa_inst_t      ;@;o;;o;	;
@
;i(;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iÃ(;"const mesa_port_no_t   ;@;o;;o;	;
@
;iÚ(;"port_no;@;[ ;0{;{	;o;;o;	;
@
;i);"#mesa_vlan_port_conf_t  *const ;@;o;;o;	;
@
;i!);"	conf;@;[ ;0;0{;{;{	;o;;o;	;
@
;iä);"mesa_rc ;@;o;;o;	;
@
;iì);"mesa_vlan_port_conf_set;@;[ ;0;[{;{	;o;;o;	;
@
;i*;""const mesa_inst_t            ;@;o;;o;	;
@
;i!*;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iG*;""const mesa_port_no_t         ;@;o;;o;	;
@
;id*;"port_no;@;[ ;0{;{	;o;;o;	;
@
;i*;")const mesa_vlan_port_conf_t  *const ;@;o;;o;	;
@
;i±*;"	conf;@;[ ;0;0{;{;{	;o;;o;	;
@
;i+;"mesa_rc ;@;o;;o;	;
@
;i+;"mesa_vlan_port_members_get;@;[ ;0;[{;{	;o;;o;	;
@
;i6+;"const mesa_inst_t ;@;o;;o;	;
@
;iH+;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iq+;"const mesa_vid_t  ;@;o;;o;	;
@
;i+;"vid;@;[ ;0{;{	;o;;o;	;
@
;i«+;"mesa_port_list_t  *;@;o;;o;	;
@
;i¾+;"port_list;@;[ ;0;0{;{;{	;o;;o;	;
@
;i`,;"mesa_rc ;@;o;;o;	;
@
;ih,;"mesa_vlan_port_members_set;@;[ ;0;[{;{	;o;;o;	;
@
;i,;"const mesa_inst_t      ;@;o;;o;	;
@
;i,;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iÃ,;"const mesa_vid_t       ;@;o;;o;	;
@
;iÚ,;"vid;@;[ ;0{;{	;o;;o;	;
@
;i-;"const mesa_port_list_t *;@;o;;o;	;
@
;i-;"port_list;@;[ ;0;0{
;o;;o;	;
@
;i@-;"typedef;@;{;[
{;{;{	;o;;o;	;
@
;iU-;"mesa_bool_t ;@;o;;o;	;
@
;ia-;"learning;@;[ ;0{;{;{	;o;;o;	;
@
;i-;"mesa_bool_t ;@;o;;o;	;
@
;i-;"flooding;@;[ ;0{;{;{	;o;;o;	;
@
;iÍ-;"mesa_bool_t ;@;o;;o;	;
@
;iÙ-;"mirror;@;[ ;0{;{;{	;o;;o;	;
@
;i
.;"mesa_bool_t ;@;o;;o;	;
@
;i.;"ingress_filter;@;[ ;0{;{;{	;o;;o;	;
@
;i@.;"mesa_vid_t  ;@;o;;o;	;
@
;iL.;"	fid ;@;[ ;o;;o;	;
@
;iP.;"CAP(L2_SVL);@;o;;o;	;
@
;i.;"mesa_vlan_vid_conf_t;@;[ ;0{;{;{	;o;;o;	;
@
;ió.;"mesa_rc ;@;o;;o;	;
@
;iû.;"mesa_vlan_vid_conf_get;@;[ ;0;[{;{	;o;;o;	;
@
;i/;"const mesa_inst_t    ;@;o;;o;	;
@
;i'/;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iL/;"const mesa_vid_t     ;@;o;;o;	;
@
;ia/;"vid;@;[ ;0{;{	;o;;o;	;
@
;i/;"!mesa_vlan_vid_conf_t *const ;@;o;;o;	;
@
;i¡/;"	conf;@;[ ;0;0{;{;{	;o;;o;	;
@
;iO0;"mesa_rc ;@;o;;o;	;
@
;iW0;"mesa_vlan_vid_conf_set;@;[ ;0;[{;{	;o;;o;	;
@
;in0;" const mesa_inst_t          ;@;o;;o;	;
@
;i0;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i®0;" const mesa_vid_t           ;@;o;;o;	;
@
;iÉ0;"vid;@;[ ;0{;{	;o;;o;	;
@
;ií0;"'const mesa_vlan_vid_conf_t *const ;@;o;;o;	;
@
;i1;"	conf;@;[ ;0;0{
;o;;o;	;
@
;i.1;"typedef;@;{;o;;o;	;
@
;i61;"	enum;@; [{;!{;"o;;o;	;
@
;iA1;"MESA_VLAN_TX_TAG_PORT;@;0{;!{;"o;;o;	;
@
;i1;"MESA_VLAN_TX_TAG_DISABLE;@;0{;!{;"o;;o;	;
@
;iÐ1;"MESA_VLAN_TX_TAG_ENABLE;@;0;o;;o;	;
@
;i2;"mesa_vlan_tx_tag_t;@;[ ;0{;{;{	;o;;o;	;
@
;i¨2;"mesa_rc ;@;o;;o;	;
@
;i°2;"mesa_vlan_tx_tag_get;@;[ ;0;[	{;{	;o;;o;	;
@
;iÅ2;"const mesa_inst_t  ;@;o;;o;	;
@
;iØ2;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iû2;"const mesa_vid_t   ;@;o;;o;	;
@
;i3;"vid;@;[ ;0{;{	;o;;o;	;
@
;i03;"const uint32_t     ;@;o;;o;	;
@
;iC3;"cnt;@;[ ;0{;{	;o;;o;	;
@
;ie3;"mesa_vlan_tx_tag_t *const ;@;o;;o;	;
@
;i3;"tx_tag;@;[ ;0;0{;{;{	;o;;o;	;
@
;io4;"mesa_rc ;@;o;;o;	;
@
;iw4;"mesa_vlan_tx_tag_set;@;[ ;0;[	{;{	;o;;o;	;
@
;i4;"const mesa_inst_t        ;@;o;;o;	;
@
;i¥4;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iÈ4;"const mesa_vid_t         ;@;o;;o;	;
@
;iá4;"vid;@;[ ;0{;{	;o;;o;	;
@
;i5;"const uint32_t           ;@;o;;o;	;
@
;i5;"cnt;@;[ ;0{;{	;o;;o;	;
@
;i>5;"%const mesa_vlan_tx_tag_t *const ;@;o;;o;	;
@
;i^5;"tx_tag;@;[ ;0;0{
;o;;o;	;
@
;i5;"typedef;@;{;[{;{;{	;o;;o;	;
@
;i5;"uint64_t ;@;o;;o;	;
@
;i¥5;"frames;@;[ ;0{;{;{	;o;;o;	;
@
;iÅ5;"uint64_t ;@;o;;o;	;
@
;iÎ5;"
bytes;@;[ ;0;o;;o;	;
@
;ië5;"mesa_vlan_counter_types_t ;@;[ ;o;;o;	;
@
;i6;"CAP(L2_VLAN_COUNTERS);@{
;o;;o;	;
@
;i.6;"typedef;@;{;[{;{;{	;o;;o;	;
@
;iC6;"mesa_vlan_counter_types_t ;@;o;;o;	;
@
;i]6;"rx_vlan_unicast;@;[ ;0{;{;{	;o;;o;	;
@
;i¢6;"mesa_vlan_counter_types_t ;@;o;;o;	;
@
;i¼6;"rx_vlan_multicast;@;[ ;0{;{;{	;o;;o;	;
@
;i7;"mesa_vlan_counter_types_t ;@;o;;o;	;
@
;i7;"rx_vlan_broadcast;@;[ ;0;o;;o;	;
@
;ib7;"mesa_vlan_counters_t ;@;[ ;o;;o;	;
@
;iw7;"CAP(L2_VLAN_COUNTERS);@{;{;{	;o;;o;	;
@
;iá7;"mesa_rc ;@;o;;o;	;
@
;ié7;"mesa_vlan_counters_get;@;[ ;0;[{;{	;o;;o;	;
@
;i 8;"const mesa_inst_t    ;@;o;;o;	;
@
;i8;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i:8;"const mesa_vid_t     ;@;o;;o;	;
@
;iO8;"vid;@;[ ;0{;{	;o;;o;	;
@
;is8;"!mesa_vlan_counters_t *const ;@;o;;o;	;
@
;i8;"counters;@;[ ;0;o;;o;	;
@
;i8;"CAP(L2_VLAN_COUNTERS);@{;{;{	;o;;o;	;
@
;iã8;"mesa_rc ;@;o;;o;	;
@
;ië8;"mesa_vlan_counters_clear;@;[ ;0;[{;{	;o;;o;	;
@
;i9;"const mesa_inst_t ;@;o;;o;	;
@
;i9;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i=9;"const mesa_vid_t  ;@;o;;o;	;
@
;iO9;"vid;@;[ ;0;o;;o;	;
@
;iX9;"CAP(L2_VLAN_COUNTERS);@{
;o;;o;	;
@
;iÓ9;"typedef;@;{;[{;{;{	;o;;o;	;
@
;iè9;"mesa_bool_t          ;@;o;;o;	;
@
;iý9;"dmac_dip;@;[ ;0{;{;{	;o;;o;	;
@
;i::;"mesa_vcap_key_type_t ;@;o;;o;	;
@
;iO:;"key_type;@;[ ;0;o;;o;	;
@
;iv:;"mesa_vcl_port_conf_t;@;[ ;0{;{;{	;o;;o;	;
@
;iý:;"mesa_rc ;@;o;;o;	;
@
;i;;"mesa_vcl_port_conf_get;@;[ ;0;[{;{	;o;;o;	;
@
;i;;"const mesa_inst_t    ;@;o;;o;	;
@
;i1;;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iV;;"const mesa_port_no_t ;@;o;;o;	;
@
;ik;;"port_no;@;[ ;0{;{	;o;;o;	;
@
;i;;"!mesa_vcl_port_conf_t *const ;@;o;;o;	;
@
;i¯;;"	conf;@;[ ;0;0{;{;{	;o;;o;	;
@
;ip<;"mesa_rc ;@;o;;o;	;
@
;ix<;"mesa_vcl_port_conf_set;@;[ ;0;[{;{	;o;;o;	;
@
;i<;" const mesa_inst_t          ;@;o;;o;	;
@
;iª<;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iÏ<;" const mesa_port_no_t       ;@;o;;o;	;
@
;iê<;"port_no;@;[ ;0{;{	;o;;o;	;
@
;i=;"'const mesa_vcl_port_conf_t *const ;@;o;;o;	;
@
;i4=;"	conf;@;[ ;0;0{
;o;;o;	;
@
;iN=;"typedef;@;{;o;;o;	;
@
;iV=;"	enum;@; [{;!{;"o;;o;	;
@
;ia=;"MESA_VCE_TYPE_ANY;@;0{;!{;"o;;o;	;
@
;i=;"MESA_VCE_TYPE_ETYPE;@;0{;!{;"o;;o;	;
@
;iº=;"MESA_VCE_TYPE_LLC;@;0{;!{;"o;;o;	;
@
;iÜ=;"MESA_VCE_TYPE_SNAP;@;0{;!{;"o;;o;	;
@
;iÿ=;"MESA_VCE_TYPE_IPV4;@;0{;!{;"o;;o;	;
@
;i">;"MESA_VCE_TYPE_IPV6     ;@;0;o;;o;	;
@
;iC>;"mesa_vce_type_t;@;[ ;0{
;o;;o;	;
@
;id>;"typedef;@;o;;o;	;
@
;il>;"uint32_t ;@;o;;o;	;
@
;iu>;"mesa_vce_id_t;@;[ ;0{;o;;o;	;
@
;i>;"T#define MESA_VCL_IDS        256                              // Number of VCLs
;@{;o;;o;	;
@
;iÔ>;"Y#define MESA_VCL_ID_START   0                                // VCL ID start number
;@{;o;;o;	;
@
;i(?;"W#define MESA_VCL_ID_END     (MESA_VCL_ID_START+MESA_VCL_IDS) // VCL ID end number
;@{;o;;o;	;
@
;iz?;"X#define MESA_VCL_ARRAY_SIZE MESA_VCL_ID_END                  // VCL ID array size

;@{;o;;o;	;
@
;iÍ?;"K#define MESA_VCE_ID_LAST 0 // Special value used to add last in list

;@{
;o;;o;	;
@
;i1@;"typedef;@;{;[	{;{;{	;o;;o;	;
@
;iF@;"mesa_vcap_bit_t ;@;o;;o;	;
@
;iV@;"dmac_mc;@;[ ;0{;{;{	;o;;o;	;
@
;iu@;"mesa_vcap_bit_t ;@;o;;o;	;
@
;i@;"dmac_bc;@;[ ;0{;{;{	;o;;o;	;
@
;i¤@;"mesa_vcap_u48_t ;@;o;;o;	;
@
;i´@;"	dmac;@;[ ;0{;{;{	;o;;o;	;
@
;iÉ@;"mesa_vcap_u48_t ;@;o;;o;	;
@
;iÙ@;"	smac;@;[ ;0;o;;o;	;
@
;iì@;"mesa_vce_mac_t;@;[ ;0{
;o;;o;	;
@
;iA;"typedef;@;{;[
{;{;{	;o;;o;	;
@
;i)A;"mesa_vcap_vid_t ;@;o;;o;	;
@
;i9A;"vid;@;[ ;0{;{;{	;o;;o;	;
@
;iYA;"mesa_vcap_u8_t  ;@;o;;o;	;
@
;iiA;"pcp;@;[ ;0{;{;{	;o;;o;	;
@
;iA;"mesa_vcap_bit_t ;@;o;;o;	;
@
;iA;"dei;@;[ ;0{;{;{	;o;;o;	;
@
;i§A;"mesa_vcap_bit_t ;@;o;;o;	;
@
;i·A;"tagged;@;[ ;0{;{;{	;o;;o;	;
@
;iÜA;"mesa_vcap_bit_t ;@;o;;o;	;
@
;iìA;"
s_tag;@;[ ;0;o;;o;	;
@
;iB;"mesa_vce_tag_t;@;[ ;0{
;o;;o;	;
@
;i;B;"typedef;@;{;[{;{;{	;o;;o;	;
@
;iPB;"mesa_vcap_u16_t ;@;o;;o;	;
@
;i`B;"
etype;@;[ ;0{;{;{	;o;;o;	;
@
;iB;"mesa_vcap_u32_t ;@;o;;o;	;
@
;iB;"	data;@;[ ;0{;{;{	;o;;o;	;
@
;i©B;"mesa_vcap_u8_t  ;@;o;;o;	;
@
;i¹B;"mel;@;[ ;0;o;;o;	;
@
;i×B;"mesa_vce_frame_etype_t;@;[ ;0{
;o;;o;	;
@
;iC;"typedef;@;{;[{;{;{	;o;;o;	;
@
;i)C;"mesa_vcap_u48_t ;@;o;;o;	;
@
;i9C;"	data;@;[ ;0;o;;o;	;
@
;iIC;"mesa_vce_frame_llc_t;@;[ ;0{
;o;;o;	;
@
;iC;"typedef;@;{;[{;{;{	;o;;o;	;
@
;iC;"mesa_vcap_u48_t ;@;o;;o;	;
@
;iªC;"	data;@;[ ;0;o;;o;	;
@
;iºC;"mesa_vce_frame_snap_t;@;[ ;0{
;o;;o;	;
@
;i÷C;"typedef;@;{;[{;{;{	;o;;o;	;
@
;iD;"mesa_vcap_bit_t ;@;o;;o;	;
@
;iD;"fragment;@;[ ;0{;{;{	;o;;o;	;
@
;i6D;"mesa_vcap_bit_t ;@;o;;o;	;
@
;iFD;"options;@;[ ;0{;{;{	;o;;o;	;
@
;ifD;"mesa_vcap_vr_t  ;@;o;;o;	;
@
;ivD;"	dscp;@;[ ;0{;{;{	;o;;o;	;
@
;iD;"mesa_vcap_u8_t  ;@;o;;o;	;
@
;iªD;"
proto;@;[ ;0{;{;{	;o;;o;	;
@
;iÄD;"mesa_vcap_ip_t  ;@;o;;o;	;
@
;iÔD;"sip;@;[ ;0{;{;{	;o;;o;	;
@
;i÷D;"mesa_vcap_ip_t  ;@;o;;o;	;
@
;iE;"dip;@;[ ;0{;{;{	;o;;o;	;
@
;i/E;"mesa_vcap_vr_t  ;@;o;;o;	;
@
;i?E;"
sport;@;[ ;0{;{;{	;o;;o;	;
@
;ieE;"mesa_vcap_vr_t  ;@;o;;o;	;
@
;iuE;"
dport;@;[ ;0;o;;o;	;
@
;iE;"mesa_vce_frame_ipv4_t;@;[ ;0{
;o;;o;	;
@
;iÛE;"typedef;@;{;[{;{;{	;o;;o;	;
@
;iðE;"mesa_vcap_vr_t   ;@;o;;o;	;
@
;iF;"	dscp;@;[ ;0{;{;{	;o;;o;	;
@
;i"F;"mesa_vcap_u8_t   ;@;o;;o;	;
@
;i3F;"
proto;@;[ ;0{;{;{	;o;;o;	;
@
;iJF;"mesa_vcap_u128_t ;@;o;;o;	;
@
;i[F;"sip;@;[ ;0{;{;{	;o;;o;	;
@
;i{F;"mesa_vcap_u128_t ;@;o;;o;	;
@
;iF;"dip;@;[ ;0{;{;{	;o;;o;	;
@
;i±F;"mesa_vcap_vr_t   ;@;o;;o;	;
@
;iÂF;"
sport;@;[ ;0{;{;{	;o;;o;	;
@
;iåF;"mesa_vcap_vr_t   ;@;o;;o;	;
@
;iöF;"
dport;@;[ ;0;o;;o;	;
@
;iG;"mesa_vce_frame_ipv6_t;@;[ ;0{
;o;;o;	;
@
;i?G;"typedef;@;{;[{;{;{	;o;;o;	;
@
;iTG;"mesa_port_list_t ;@;o;;o;	;
@
;ieG;"port_list;@;[ ;0{;{;{	;o;;o;	;
@
;iG;"mesa_vce_mac_t   ;@;o;;o;	;
@
;iG;"mac;@;[ ;0{;{;{	;o;;o;	;
@
;i¯G;"mesa_vce_tag_t   ;@;o;;o;	;
@
;iÀG;"tag;@;[ ;0{;{;{	;o;;o;	;
@
;iÜG;"mesa_vce_tag_t   ;@;o;;o;	;
@
;iíG;"inner_tag;@;[ ;0{;{;{	;o;;o;	;
@
;i	H;"mesa_vce_type_t  ;@;o;;o;	;
@
;iH;"	type;@;[ ;0{:member_union{:union_type_declare{;o;;o;	;
@
;i<H;"
union;@:union_members[
{;{;{	;o;;o;	;
@
;iH;"mesa_vce_frame_etype_t ;@;o;;o;	;
@
;iH;"
etype;@;[ ;0{;{;{	;o;;o;	;
@
;i¾H;"mesa_vce_frame_llc_t   ;@;o;;o;	;
@
;iÕH;"llc;@;[ ;0{;{;{	;o;;o;	;
@
;iùH;"mesa_vce_frame_snap_t  ;@;o;;o;	;
@
;iI;"	snap;@;[ ;0{;{;{	;o;;o;	;
@
;i5I;"mesa_vce_frame_ipv4_t  ;@;o;;o;	;
@
;iLI;"	ipv4;@;[ ;0{;{;{	;o;;o;	;
@
;iqI;"mesa_vce_frame_ipv6_t  ;@;o;;o;	;
@
;iI;"	ipv6;@;[ ;0;o;;o;	;
@
;i«I;"
frame;@;[ ;o;;o;	;
@
;iÑI;"mesa_vce_key_t;@;[ ;0{
;o;;o;	;
@
;iûI;"typedef;@;{;o;;o;	;
@
;iJ;"	enum;@; [{;!{;"o;;o;	;
@
;iJ;"MESA_IMAP_SEL_DISABLE;@;0{;!{;"o;;o;	;
@
;iAJ;"MESA_IMAP_SEL_OUTER;@;0{;!{;"o;;o;	;
@
;i~J;"MESA_IMAP_SEL_INNER;@;0;o;;o;	;
@
;i¹J;"mesa_imap_sel_t;@;[ ;0{
;o;;o;	;
@
;iíJ;"typedef;@;{;o;;o;	;
@
;iõJ;"	enum;@; [
{;!{;"o;;o;	;
@
;i K;"MESA_OAM_DETECT_NONE;@;0{;!{;"o;;o;	;
@
;iBK;"MESA_OAM_DETECT_UNTAGGED;@;0{;!{;"o;;o;	;
@
;iK;""MESA_OAM_DETECT_SINGLE_TAGGED;@;0{;!{;"o;;o;	;
@
;i×K;""MESA_OAM_DETECT_DOUBLE_TAGGED;@;0{;!{;"o;;o;	;
@
;i$L;"#MESA_OAM_DETECT_TRIPLE_TAGGED ;@;o;;o;	;
@
;iBL;"CAP(VOP_V2) ;@;o;;o;	;
@
;ioL;"mesa_oam_detect_t ;@;[ ;o;;o;	;
@
;iL;"CAP(VOP);@{
;o;;o;	;
@
;iL;"typedef;@;{;[{;{;{	;o;;o;	;
@
;i¯L;"mesa_vid_t                ;@;o;;o;	;
@
;iÉL;"vid;@;[ ;0{;{;{	;o;;o;	;
@
;iðL;"mesa_acl_policy_no_t      ;@;o;;o;	;
@
;i
M;"policy_no;@;[ ;0{;{;{	;o;;o;	;
@
;i0M;"mesa_bool_t               ;@;o;;o;	;
@
;iJM;"pop_enable;@;[ ;0{;{;{	;o;;o;	;
@
;imM;"uint8_t                   ;@;o;;o;	;
@
;iM;"pop_cnt;@;[ ;0{;{;{	;o;;o;	;
@
;i©M;"mesa_imap_sel_t           ;@;o;;o;	;
@
;iÃM;"map_sel;@;[ ;0{;{;{	;o;;o;	;
@
;iíM;"mesa_qos_ingress_map_id_t ;@;o;;o;	;
@
;iN;"map_id;@;[ ;0{;{;{	;o;;o;	;
@
;iAN;"mesa_iflow_id_t           ;@;o;;o;	;
@
;i[N;"flow_id;@;[ ;0{;{;{	;o;;o;	;
@
;iO;"mesa_oam_detect_t         ;@;o;;o;	;
@
;iO;"oam_detect;@;[ ;0{;{;{	;o;;o;	;
@
;i?O;"mesa_bool_t               ;@;o;;o;	;
@
;iYO;"prio_enable;@;[ ;0{;{;{	;o;;o;	;
@
;iO;"mesa_prio_t               ;@;o;;o;	;
@
;i¦O;"	prio;@;[ ;0{;{;{	;o;;o;	;
@
;iÉO;"mesa_bool_t               ;@;o;;o;	;
@
;iãO;"dp_enable;@;[ ;0{;{;{	;o;;o;	;
@
;iP;"mesa_dp_level_t           ;@;o;;o;	;
@
;i*P;"dp;@;[ ;0{;{;{	;o;;o;	;
@
;iGP;"mesa_bool_t               ;@;o;;o;	;
@
;iaP;"dscp_enable;@;[ ;0{;{;{	;o;;o;	;
@
;iP;"mesa_dscp_t               ;@;o;;o;	;
@
;iªP;"	dscp;@;[ ;0{;{;{	;o;;o;	;
@
;iÉP;"mesa_bool_t               ;@;o;;o;	;
@
;iãP;"pcp_enable;@;[ ;0{;{;{	;o;;o;	;
@
;iQ;"mesa_pcp_t                ;@;o;;o;	;
@
;i+Q;"pcp;@;[ ;0{;{;{	;o;;o;	;
@
;iIQ;"mesa_bool_t               ;@;o;;o;	;
@
;icQ;"dei_enable;@;[ ;0{;{;{	;o;;o;	;
@
;iQ;"mesa_dei_t                ;@;o;;o;	;
@
;i«Q;"dei;@;[ ;0;o;;o;	;
@
;iÇQ;"mesa_vce_action_t;@;[ ;0{
;o;;o;	;
@
;iñQ;"typedef;@;{;[{;{;{	;o;;o;	;
@
;iR;"mesa_vce_id_t     ;@;o;;o;	;
@
;iR;"id;@;[ ;0{;{;{	;o;;o;	;
@
;i.R;"mesa_vce_key_t    ;@;o;;o;	;
@
;i@R;"key;@;[ ;0{;{;{	;o;;o;	;
@
;iWR;"mesa_vce_action_t ;@;o;;o;	;
@
;iiR;"action;@;[ ;0;o;;o;	;
@
;iR;"mesa_vce_t;@;[ ;0{;{;{	;o;;o;	;
@
;ièR;"mesa_rc ;@;o;;o;	;
@
;iðR;"mesa_vce_init;@;[ ;0;[{;{	;o;;o;	;
@
;iþR;"const mesa_inst_t      ;@;o;;o;	;
@
;iS;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i1S;"const mesa_vce_type_t  ;@;o;;o;	;
@
;iHS;"	type;@;[ ;0{;{	;o;;o;	;
@
;idS;"#mesa_vce_t             *const ;@;o;;o;	;
@
;iS;"vce;@;[ ;0;0{;{;{	;o;;o;	;
@
;iQT;"mesa_rc ;@;o;;o;	;
@
;iYT;"mesa_vce_add;@;[ ;0;[{;{	;o;;o;	;
@
;ifT;"const mesa_inst_t    ;@;o;;o;	;
@
;i{T;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iT;"const mesa_vce_id_t  ;@;o;;o;	;
@
;i«T;"vce_id;@;[ ;0{;{	;o;;o;	;
@
;iÈT;"!const mesa_vce_t     *const ;@;o;;o;	;
@
;iäT;"vce;@;[ ;0;0{;{;{	;o;;o;	;
@
;iU;"mesa_rc ;@;o;;o;	;
@
;iU;"mesa_vce_del;@;[ ;0;[{;{	;o;;o;	;
@
;i'U;"const mesa_inst_t    ;@;o;;o;	;
@
;i<U;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iWU;"const mesa_vce_id_t  ;@;o;;o;	;
@
;ilU;"vce_id;@;[ ;0;0{
;o;;o;	;
@
;iÔU;"typedef;@;o;;o;	;
@
;iÜU;"uint8_t ;@;o;;o;	;
@
;iäU;"mesa_class_cnt_t;@;[ ;0{
;o;;o;	;
@
;iV;"typedef;@;o;;o;	;
@
;iV;"uint16_t ;@;o;;o;	;
@
;iV;"mesa_ingress_cnt_id_t;@;[ ;0{;{;{	;o;;o;	;
@
;iV;"mesa_rc ;@;o;;o;	;
@
;i¥V;"mesa_ingress_cnt_alloc;@;[ ;0;[{;{	;o;;o;	;
@
;i¼V;"const mesa_inst_t      ;@;o;;o;	;
@
;iÓV;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iøV;"const mesa_class_cnt_t ;@;o;;o;	;
@
;iW;"cnt;@;[ ;0{;{	;o;;o;	;
@
;i3W;"#mesa_ingress_cnt_id_t  *const ;@;o;;o;	;
@
;iQW;"id;@;[ ;0;0{;{;{	;o;;o;	;
@
;iW;"mesa_rc ;@;o;;o;	;
@
;iW;"mesa_ingress_cnt_free;@;[ ;0;[{;{	;o;;o;	;
@
;i±W;"!const mesa_inst_t           ;@;o;;o;	;
@
;iÍW;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iñW;"!const mesa_ingress_cnt_id_t ;@;o;;o;	;
@
;iX;"id;@;[ ;0;0{
;o;;o;	;
@
;i'X;"typedef;@;{;[{;{;{	;o;;o;	;
@
;iX;"mesa_counter_pair_t ;@;o;;o;	;
@
;i§X;"rx_green;@;[ ;0{;{;{	;o;;o;	;
@
;iÕX;"mesa_counter_pair_t ;@;o;;o;	;
@
;iéX;"rx_yellow;@;[ ;0{;{;{	;o;;o;	;
@
;iY;"mesa_counter_pair_t ;@;o;;o;	;
@
;i,Y;"rx_red;@;[ ;0{;{;{	;o;;o;	;
@
;iY;"mesa_counter_t      ;@;o;;o;	;
@
;i§Y;"rx_match;@;[ ;0{;{;{	;o;;o;	;
@
;içY;"mesa_counter_t      ;@;o;;o;	;
@
;iûY;"rx_gate_pass;@;[ ;0{;{;{	;o;;o;	;
@
;i6Z;"mesa_counter_t      ;@;o;;o;	;
@
;iJZ;"rx_gate_discard;@;[ ;0{;{;{	;o;;o;	;
@
;iZ;"mesa_counter_t      ;@;o;;o;	;
@
;i¢Z;"rx_sdu_pass;@;[ ;0{;{;{	;o;;o;	;
@
;iíZ;"mesa_counter_t      ;@;o;;o;	;
@
;i[;"rx_sdu_discard;@;[ ;0{;{;{	;o;;o;	;
@
;i[;"mesa_counter_pair_t ;@;o;;o;	;
@
;i[;"rx_discard;@;[ ;0{;{;{	;o;;o;	;
@
;iÐ[;"mesa_counter_pair_t ;@;o;;o;	;
@
;iä[;"tx_discard;@;[ ;0;o;;o;	;
@
;i\;"mesa_ingress_counters_t;@;[ ;0{;{;{	;o;;o;	;
@
;i¥\;"mesa_rc ;@;o;;o;	;
@
;i­\;"mesa_ingress_cnt_get;@;[ ;0;[	{;{	;o;;o;	;
@
;iÂ\;"!const mesa_inst_t           ;@;o;;o;	;
@
;iÞ\;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i];"!const mesa_ingress_cnt_id_t ;@;o;;o;	;
@
;i];"id;@;[ ;0{;{	;o;;o;	;
@
;i>];"!const mesa_cosid_t          ;@;o;;o;	;
@
;iZ];"
cosid;@;[ ;0{;{	;o;;o;	;
@
;i~];""mesa_ingress_counters_t     *;@;o;;o;	;
@
;i];"counters;@;[ ;0;0{;{;{	;o;;o;	;
@
;iû];"mesa_rc ;@;o;;o;	;
@
;i^;"mesa_ingress_cnt_clear;@;[ ;0;[{;{	;o;;o;	;
@
;i^;"!const mesa_inst_t           ;@;o;;o;	;
@
;i6^;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i[^;"!const mesa_ingress_cnt_id_t ;@;o;;o;	;
@
;iw^;"id;@;[ ;0{;{	;o;;o;	;
@
;i^;"!const mesa_cosid_t          ;@;o;;o;	;
@
;i¶^;"
cosid;@;[ ;0;0{
;o;;o;	;
@
;i_;"typedef;@;o;;o;	;
@
;i"_;"uint16_t ;@;o;;o;	;
@
;i+_;"mesa_dlb_policer_id_t;@;[ ;0{;{;{	;o;;o;	;
@
;i¢_;"mesa_rc ;@;o;;o;	;
@
;iª_;"mesa_dlb_policer_alloc;@;[ ;0;[{;{	;o;;o;	;
@
;iÁ_;"const mesa_inst_t      ;@;o;;o;	;
@
;iØ_;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iý_;"const mesa_class_cnt_t ;@;o;;o;	;
@
;i`;"cnt;@;[ ;0{;{	;o;;o;	;
@
;i8`;"#mesa_dlb_policer_id_t  *const ;@;o;;o;	;
@
;iV`;"id;@;[ ;0;0{;{;{	;o;;o;	;
@
;i`;"mesa_rc ;@;o;;o;	;
@
;i`;"mesa_dlb_policer_free;@;[ ;0;[{;{	;o;;o;	;
@
;i®`;"!const mesa_inst_t           ;@;o;;o;	;
@
;iÊ`;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iî`;"!const mesa_dlb_policer_id_t ;@;o;;o;	;
@
;i
a;"id;@;[ ;0;0{;{;{	;o;;o;	;
@
;ia;"mesa_rc ;@;o;;o;	;
@
;ia;"mesa_dlb_policer_conf_get;@;[ ;0;[	{;{	;o;;o;	;
@
;i¯a;"!const mesa_inst_t           ;@;o;;o;	;
@
;iËa;"	inst;@;[ ;0{;{	;o;;o;	;
@
;ióa;"!const mesa_dlb_policer_id_t ;@;o;;o;	;
@
;ib;"id;@;[ ;0{;{	;o;;o;	;
@
;i5b;"!const mesa_cosid_t          ;@;o;;o;	;
@
;iQb;"
cosid;@;[ ;0{;{	;o;;o;	;
@
;izb;"(mesa_dlb_policer_conf_t     *const ;@;o;;o;	;
@
;ib;"	conf;@;[ ;0;0{;{;{	;o;;o;	;
@
;iÌf;"mesa_rc ;@;o;;o;	;
@
;iÔf;"mesa_dlb_policer_conf_set;@;[ ;0;[	{;{	;o;;o;	;
@
;iîf;"#const mesa_inst_t             ;@;o;;o;	;
@
;ig;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i4g;"#const mesa_dlb_policer_id_t   ;@;o;;o;	;
@
;iRg;"id;@;[ ;0{;{	;o;;o;	;
@
;ixg;"#const mesa_cosid_t            ;@;o;;o;	;
@
;ig;"
cosid;@;[ ;0{;{	;o;;o;	;
@
;i¿g;"*const mesa_dlb_policer_conf_t *const ;@;o;;o;	;
@
;iäg;"	conf;@;[ ;0;0{
;o;;o;	;
@
;ih;"typedef;@;{;[{;{;{	;o;;o;	;
@
;ih;"mesa_bool_t ;@;o;;o;	;
@
;i#h;"mark_all_red;@;[ ;0;o;;o;	;
@
;imh;"mesa_dlb_policer_status_t;@;[ ;0{;{;{	;o;;o;	;
@
;ii;"mesa_rc ;@;o;;o;	;
@
;i
i;" mesa_dlb_policer_status_get;@;[ ;0;[	{;{	;o;;o;	;
@
;i&i;"!const mesa_inst_t           ;@;o;;o;	;
@
;iBi;"	inst;@;[ ;0{;{	;o;;o;	;
@
;ili;"!const mesa_dlb_policer_id_t ;@;o;;o;	;
@
;ii;"id;@;[ ;0{;{	;o;;o;	;
@
;i°i;"!const mesa_cosid_t          ;@;o;;o;	;
@
;iÌi;"
cosid;@;[ ;0{;{	;o;;o;	;
@
;i÷i;"(mesa_dlb_policer_status_t   *const ;@;o;;o;	;
@
;ij;"status;@;[ ;0;0{;{;{	;o;;o;	;
@
;i¦j;"mesa_rc ;@;o;;o;	;
@
;i®j;"mesa_iflow_alloc;@;[ ;0;[{;{	;o;;o;	;
@
;i¿j;"const mesa_inst_t ;@;o;;o;	;
@
;iÑj;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iðj;"mesa_iflow_id_t   *const ;@;o;;o;	;
@
;i	k;"id;@;[ ;0;0{;{;{	;o;;o;	;
@
;iDk;"mesa_rc ;@;o;;o;	;
@
;iLk;"mesa_iflow_free;@;[ ;0;[{;{	;o;;o;	;
@
;i\k;"const mesa_inst_t     ;@;o;;o;	;
@
;irk;"	inst;@;[ ;0{;{	;o;;o;	;
@
;ik;"const mesa_iflow_id_t ;@;o;;o;	;
@
;i¦k;"id;@;[ ;0;0{
;o;;o;	;
@
;iÊk;"typedef;@;{;[{;{;{	;o;;o;	;
@
;ißk;"mesa_bool_t            ;@;o;;o;	;
@
;iök;"cnt_enable;@;[ ;0{;{;{	;o;;o;	;
@
;i1l;"mesa_ingress_cnt_id_t  ;@;o;;o;	;
@
;iHl;"cnt_id;@;[ ;0{;{;{	;o;;o;	;
@
;iwl;"mesa_bool_t            ;@;o;;o;	;
@
;il;"dlb_enable;@;[ ;0{;{;{	;o;;o;	;
@
;i½l;"mesa_dlb_policer_id_t  ;@;o;;o;	;
@
;iÔl;"dlb_id;@;[ ;0{;{;{	;o;;o;	;
@
;iÿl;"mesa_voe_idx_t         ;@;o;;o;	;
@
;im;"voe_idx ;@;[ ;o;;o;	;
@
;im;"CAP(VOP);@{;{;{	;o;;o;	;
@
;iùm;"mesa_voi_idx_t         ;@;o;;o;	;
@
;in;"voi_idx ;@;[ ;o;;o;	;
@
;in;"CAP(VOP_V2);@{;{;{	;o;;o;	;
@
;iKn;"mesa_frer_iflow_conf_t ;@;o;;o;	;
@
;ibn;"
frer ;@;[ ;o;;o;	;
@
;ign;"CAP(L2_FRER);@{;{;{	;o;;o;	;
@
;in;"mesa_psfp_iflow_conf_t ;@;o;;o;	;
@
;iµn;"
psfp ;@;[ ;o;;o;	;
@
;iºn;"CAP(L2_PSFP);@{;{;{	;o;;o;	;
@
;iñn;"mesa_bool_t            ;@;o;;o;	;
@
;io;"cut_through_disable ;@;[ ;o;;o;	;
@
;io;"&CAP(QOS_EGRESS_QUEUE_CUT_THROUGH);@;o;;o;	;
@
;i\o;"mesa_iflow_conf_t;@;[ ;0{;{;{	;o;;o;	;
@
;iÞo;"mesa_rc ;@;o;;o;	;
@
;iæo;"mesa_iflow_conf_get;@;[ ;0;[{;{	;o;;o;	;
@
;iúo;"const mesa_inst_t     ;@;o;;o;	;
@
;ip;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i2p;"const mesa_iflow_id_t ;@;o;;o;	;
@
;iHp;"id;@;[ ;0{;{	;o;;o;	;
@
;ihp;""mesa_iflow_conf_t     *const ;@;o;;o;	;
@
;ip;"	conf;@;[ ;0;0{;{;{	;o;;o;	;
@
;iùp;"mesa_rc ;@;o;;o;	;
@
;iq;"mesa_iflow_conf_set;@;[ ;0;[{;{	;o;;o;	;
@
;iq;"const mesa_inst_t      ;@;o;;o;	;
@
;i,q;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iNq;"const mesa_iflow_id_t   ;@;o;;o;	;
@
;ifq;"id;@;[ ;0{;{	;o;;o;	;
@
;iq;"$const mesa_iflow_conf_t *const ;@;o;;o;	;
@
;i¥q;"	conf;@;[ ;0;0{
;o;;o;	;
@
;ir;"typedef;@;o;;o;	;
@
;ir;"uint32_t ;@;o;;o;	;
@
;ir;"mesa_tce_id_t;@;[ ;0{;o;;o;	;
@
;i&r;"K#define MESA_TCE_ID_LAST 0 // Special value used to add last in list

;@{
;o;;o;	;
@
;i~r;"typedef;@;o;;o;	;
@
;ir;"uint16_t ;@;o;;o;	;
@
;ir;"mesa_eflow_id_t;@;[ ;0{;o;;o;	;
@
;i¡r;";#define MESA_EFLOW_ID_NONE 0 // No flow ID allocated

;@{
;o;;o;	;
@
;iâr;"typedef;@;{;[	{;{;{	;o;;o;	;
@
;i÷r;"mesa_port_list_t ;@;o;;o;	;
@
;is;"port_list;@;[ ;0{;{;{	;o;;o;	;
@
;i&s;"mesa_vid_t       ;@;o;;o;	;
@
;i7s;"vid;@;[ ;0{;{;{	;o;;o;	;
@
;iss;"mesa_bool_t      ;@;o;;o;	;
@
;is;"flow_enable;@;[ ;0{;{;{	;o;;o;	;
@
;iÂs;"mesa_iflow_id_t  ;@;o;;o;	;
@
;iÓs;"flow_id;@;[ ;0;o;;o;	;
@
;iõs;"mesa_tce_key_t;@;[ ;0{
;o;;o;	;
@
;it;"typedef;@;{;o;;o;	;
@
;i$t;"	enum;@; [
{;!{;"o;;o;	;
@
;i/t;"MESA_TPID_SEL_PORT;@;0{;!{;"o;;o;	;
@
;i}t;"MESA_TPID_SEL_NONE;@;0{;!{;"o;;o;	;
@
;i©t;"MESA_TPID_SEL_C;@;0{;!{;"o;;o;	;
@
;iÔt;"MESA_TPID_SEL_S;@;0{;!{;"o;;o;	;
@
;iÿt;"MESA_TPID_SEL_S_CUSTOM ;@;0;o;;o;	;
@
;i/u;"mesa_tpid_sel_t;@;[ ;0{
;o;;o;	;
@
;iVu;"typedef;@;{;o;;o;	;
@
;i^u;"	enum;@; [	{;!{;"o;;o;	;
@
;iiu;"MESA_PCP_SEL_PORT;@;0{;!{;"o;;o;	;
@
;iºu;"MESA_PCP_SEL_FIXED;@;0{;!{;"o;;o;	;
@
;iêu;"MESA_PCP_SEL_CLASSIFIED;@;0{;!{;"o;;o;	;
@
;iv;"MESA_PCP_SEL_MAPPED      ;@;0;o;;o;	;
@
;iNv;"mesa_pcp_sel_t;@;[ ;0{
;o;;o;	;
@
;itv;"typedef;@;{;o;;o;	;
@
;i|v;"	enum;@; [	{;!{;"o;;o;	;
@
;iv;"MESA_DEI_SEL_PORT;@;0{;!{;"o;;o;	;
@
;iØv;"MESA_DEI_SEL_FIXED;@;0{;!{;"o;;o;	;
@
;iw;"MESA_DEI_SEL_CLASSIFIED;@;0{;!{;"o;;o;	;
@
;i=w;"MESA_DEI_SEL_MAPPED      ;@;0;o;;o;	;
@
;ilw;"mesa_dei_sel_t;@;[ ;0{;o;;o;	;
@
;i}w;"@#define MESA_TCE_VID_CLASSIFIED 0    // Use classified VID
;@{;o;;o;	;
@
;i¸w;"J#define MESA_TCE_VID_PRIORITY   4096 // Use priority-tag (VID zero)

;@{
;o;;o;	;
@
;ix;"typedef;@;{;[{;{;{	;o;;o;	;
@
;i)x;"mesa_tpid_sel_t          ;@;o;;o;	;
@
;iBx;"	tpid;@;[ ;0{;{;{	;o;;o;	;
@
;iax;"mesa_vid_t               ;@;o;;o;	;
@
;izx;"vid;@;[ ;0{;{;{	;o;;o;	;
@
;i¹x;"mesa_pcp_sel_t           ;@;o;;o;	;
@
;iÒx;"pcp_sel;@;[ ;0{;{;{	;o;;o;	;
@
;iðx;"mesa_pcp_t               ;@;o;;o;	;
@
;i	y;"pcp;@;[ ;0{;{;{	;o;;o;	;
@
;i#y;"mesa_dei_sel_t           ;@;o;;o;	;
@
;i<y;"dei_sel;@;[ ;0{;{;{	;o;;o;	;
@
;iZy;"mesa_dei_t               ;@;o;;o;	;
@
;isy;"dei;@;[ ;0{;{;{	;o;;o;	;
@
;iy;"mesa_qos_egress_map_id_t ;@;o;;o;	;
@
;i¦y;"map_id;@;[ ;0;o;;o;	;
@
;iÃy;"mesa_tce_tag_t;@;[ ;0{
;o;;o;	;
@
;içy;"typedef;@;{;o;;o;	;
@
;iïy;"	enum;@; [{;!{;"o;;o;	;
@
;iúy;"MESA_RTAG_SEL_NONE;@;0{;!{;"o;;o;	;
@
;i&z;"MESA_RTAG_SEL_OUTER;@;0{;!{;"o;;o;	;
@
;iUz;"MESA_RTAG_SEL_INNER;@;0;o;;o;	;
@
;iz;"mesa_rtag_sel_t;@;[ ;0{
;o;;o;	;
@
;i­z;"typedef;@;{;[{;{;{	;o;;o;	;
@
;iÂz;"mesa_rtag_sel_t ;@;o;;o;	;
@
;iÒz;"sel;@;[ ;0{;{;{	;o;;o;	;
@
;ióz;"mesa_bool_t     ;@;o;;o;	;
@
;i{;"pop;@;[ ;0;o;;o;	;
@
;i{;"mesa_tce_rtag_t;@;[ ;0{
;o;;o;	;
@
;i;{;"typedef;@;{;[
{;{;{	;o;;o;	;
@
;iP{;"mesa_tce_tag_t  ;@;o;;o;	;
@
;i`{;"tag;@;[ ;0{;{;{	;o;;o;	;
@
;i|{;"mesa_tce_tag_t  ;@;o;;o;	;
@
;i{;"inner_tag;@;[ ;0{;{;{	;o;;o;	;
@
;i¨{;"uint8_t         ;@;o;;o;	;
@
;i¸{;"pop_cnt;@;[ ;0{;{;{	;o;;o;	;
@
;iØ{;"mesa_eflow_id_t ;@;o;;o;	;
@
;iè{;"flow_id;@;[ ;0{;{;{	;o;;o;	;
@
;i{|;"mesa_tce_rtag_t ;@;o;;o;	;
@
;i|;"	rtag;@;[ ;0;o;;o;	;
@
;iý|;"mesa_tce_action_t;@;[ ;0{
;o;;o;	;
@
;i&};"typedef;@;{;[{;{;{	;o;;o;	;
@
;i;};"mesa_tce_id_t     ;@;o;;o;	;
@
;iM};"id;@;[ ;0{;{;{	;o;;o;	;
@
;ic};"mesa_tce_key_t    ;@;o;;o;	;
@
;iu};"key;@;[ ;0{;{;{	;o;;o;	;
@
;i};"mesa_tce_action_t ;@;o;;o;	;
@
;i};"action;@;[ ;0;o;;o;	;
@
;i¶};"mesa_tce_t;@;[ ;0{;{;{	;o;;o;	;
@
;i~;"mesa_rc ;@;o;;o;	;
@
;i~;"mesa_tce_init;@;[ ;0;[{;{	;o;;o;	;
@
;i~;"const mesa_inst_t ;@;o;;o;	;
@
;i-~;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iI~;"mesa_tce_t        *const ;@;o;;o;	;
@
;ib~;"tce;@;[ ;0;0{;{;{	;o;;o;	;
@
;i1;"mesa_rc ;@;o;;o;	;
@
;i9;"mesa_tce_add;@;[ ;0;[{;{	;o;;o;	;
@
;iF;"const mesa_inst_t   ;@;o;;o;	;
@
;iZ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iu;"const mesa_tce_id_t ;@;o;;o;	;
@
;i;"tce_id;@;[ ;0{;{	;o;;o;	;
@
;i¦;" const mesa_tce_t    *const ;@;o;;o;	;
@
;iÁ;"tce;@;[ ;0;0{;{;{	;o;;o;	;
@
;iï;"mesa_rc ;@;o;;o;	;
@
;i÷;"mesa_tce_del;@;[ ;0;[{;{	;o;;o;	;
@
;i;"const mesa_inst_t   ;@;o;;o;	;
@
;i;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i3;"const mesa_tce_id_t ;@;o;;o;	;
@
;iG;"tce_id;@;[ ;0;0{
;o;;o;	;
@
;i¯;"typedef;@;o;;o;	;
@
;i·;"uint16_t ;@;o;;o;	;
@
;iÀ;"mesa_egress_cnt_id_t;@;[ ;0{;{;{	;o;;o;	;
@
;i<;"mesa_rc ;@;o;;o;	;
@
;iD;"mesa_egress_cnt_alloc;@;[ ;0;[{;{	;o;;o;	;
@
;iZ;"const mesa_inst_t      ;@;o;;o;	;
@
;iq;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i;"const mesa_class_cnt_t ;@;o;;o;	;
@
;i¬;"cnt;@;[ ;0{;{	;o;;o;	;
@
;iÏ;"#mesa_egress_cnt_id_t   *const ;@;o;;o;	;
@
;ií;"id;@;[ ;0;0{;{;{	;o;;o;	;
@
;i-;"mesa_rc ;@;o;;o;	;
@
;i5;"mesa_egress_cnt_free;@;[ ;0;[{;{	;o;;o;	;
@
;iJ;" const mesa_inst_t          ;@;o;;o;	;
@
;ie;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i;" const mesa_egress_cnt_id_t ;@;o;;o;	;
@
;i£;"id;@;[ ;0;0{
;o;;o;	;
@
;i¼;"typedef;@;{;[{;{;{	;o;;o;	;
@
;iÑ;"mesa_counter_pair_t ;@;o;;o;	;
@
;iå;"tx_green;@;[ ;0{;{;{	;o;;o;	;
@
;i;"mesa_counter_pair_t ;@;o;;o;	;
@
;i";"tx_yellow;@;[ ;0;o;;o;	;
@
;iJ;"mesa_egress_counters_t;@;[ ;0{;{;{	;o;;o;	;
@
;iØ;"mesa_rc ;@;o;;o;	;
@
;ià;"mesa_egress_cnt_get;@;[ ;0;[	{;{	;o;;o;	;
@
;iô;" const mesa_inst_t          ;@;o;;o;	;
@
;i;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i1;" const mesa_egress_cnt_id_t ;@;o;;o;	;
@
;iL;"id;@;[ ;0{;{	;o;;o;	;
@
;il;" const mesa_cosid_t         ;@;o;;o;	;
@
;i;"
cosid;@;[ ;0{;{	;o;;o;	;
@
;iª;"!mesa_egress_counters_t     *;@;o;;o;	;
@
;iÆ;"counters;@;[ ;0;0{;{;{	;o;;o;	;
@
;i$;"mesa_rc ;@;o;;o;	;
@
;i,;"mesa_egress_cnt_clear;@;[ ;0;[{;{	;o;;o;	;
@
;iB;" const mesa_inst_t          ;@;o;;o;	;
@
;i];"	inst;@;[ ;0{;{	;o;;o;	;
@
;i;" const mesa_egress_cnt_id_t ;@;o;;o;	;
@
;i;"id;@;[ ;0{;{	;o;;o;	;
@
;i¾;" const mesa_cosid_t         ;@;o;;o;	;
@
;iÙ;"
cosid;@;[ ;0;0{;{;{	;o;;o;	;
@
;ib;"mesa_rc ;@;o;;o;	;
@
;ij;"mesa_eflow_alloc;@;[ ;0;[{;{	;o;;o;	;
@
;i{;"const mesa_inst_t ;@;o;;o;	;
@
;i;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i¬;"mesa_eflow_id_t   *const ;@;o;;o;	;
@
;iÅ;"id;@;[ ;0;0{;{;{	;o;;o;	;
@
;iþ;"mesa_rc ;@;o;;o;	;
@
;i;"mesa_eflow_free;@;[ ;0;[{;{	;o;;o;	;
@
;i;"const mesa_inst_t     ;@;o;;o;	;
@
;i,;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iJ;"const mesa_eflow_id_t ;@;o;;o;	;
@
;i`;"id;@;[ ;0;0{
;o;;o;	;
@
;i;"typedef;@;{;[	{;{;{	;o;;o;	;
@
;i;"mesa_bool_t          ;@;o;;o;	;
@
;i­;"cnt_enable;@;[ ;0{;{;{	;o;;o;	;
@
;iè;"mesa_egress_cnt_id_t ;@;o;;o;	;
@
;iý;"cnt_id;@;[ ;0{;{;{	;o;;o;	;
@
;i,;"mesa_voe_idx_t       ;@;o;;o;	;
@
;iA;"voe_idx ;@;[ ;o;;o;	;
@
;iI;"CAP(VOP);@{;{;{	;o;;o;	;
@
;i#;"mesa_voi_idx_t       ;@;o;;o;	;
@
;i8;"voi_idx ;@;[ ;o;;o;	;
@
;i@;"CAP(VOP_V2);@;o;;o;	;
@
;iq;"mesa_eflow_conf_t;@;[ ;0{;{;{	;o;;o;	;
@
;ið;"mesa_rc ;@;o;;o;	;
@
;iø;"mesa_eflow_conf_get;@;[ ;0;[{;{	;o;;o;	;
@
;i;"const mesa_inst_t     ;@;o;;o;	;
@
;i";"	inst;@;[ ;0{;{	;o;;o;	;
@
;iD;"const mesa_eflow_id_t ;@;o;;o;	;
@
;iZ;"id;@;[ ;0{;{	;o;;o;	;
@
;iz;""mesa_eflow_conf_t     *const ;@;o;;o;	;
@
;i;"	conf;@;[ ;0;0{;{;{	;o;;o;	;
@
;i;"mesa_rc ;@;o;;o;	;
@
;i;"mesa_eflow_conf_set;@;[ ;0;[{;{	;o;;o;	;
@
;i$;"const mesa_inst_t       ;@;o;;o;	;
@
;i<;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i^;"const mesa_eflow_id_t   ;@;o;;o;	;
@
;iv;"id;@;[ ;0{;{	;o;;o;	;
@
;i;"$const mesa_eflow_conf_t *const ;@;o;;o;	;
@
;iµ;"	conf;@;[ ;0;0{
;o;;o;	;
@
;i6;"typedef;@;{;[{;{;{	;o;;o;	;
@
;iK;"uint16_t         ;@;o;;o;	;
@
;i\;"group_id;@;[ ;0{;{;{	;o;;o;	;
@
;iw;"mesa_port_list_t ;@;o;;o;	;
@
;i;"port_list;@;[ ;0;o;;o;	;
@
;i¢;"$mesa_vlan_trans_port2grp_conf_t;@;[ ;0{
;o;;o;	;
@
;iâ;"typedef;@;{;o;;o;	;
@
;iê;"	enum;@; [{;!{;"o;;o;	;
@
;iõ;"MESA_VLAN_TRANS_DIR_BOTH;@;0{;!{;"o;;o;	;
@
;i4;" MESA_VLAN_TRANS_DIR_INGRESS;@;0{;!{;"o;;o;	;
@
;im;"#MESA_VLAN_TRANS_DIR_EGRESS    ;@;0;o;;o;	;
@
;i£;"mesa_vlan_trans_dir_t;@;[ ;0{
;o;;o;	;
@
;ië;"typedef;@;{;[	{;{;{	;o;;o;	;
@
;i ;"uint16_t              ;@;o;;o;	;
@
;i;"group_id;@;[ ;0{;{;{	;o;;o;	;
@
;i1;"mesa_vid_t            ;@;o;;o;	;
@
;iG;"vid;@;[ ;0{;{;{	;o;;o;	;
@
;i;"mesa_vid_t            ;@;o;;o;	;
@
;i;"trans_vid;@;[ ;0{;{;{	;o;;o;	;
@
;iÙ;"mesa_vlan_trans_dir_t ;@;o;;o;	;
@
;iï;"dir;@;[ ;0;o;;o;	;
@
;i	;"$mesa_vlan_trans_grp2vlan_conf_t;@;[ ;0{;{;{	;o;;o;	;
@
;i~;"mesa_rc ;@;o;;o;	;
@
;i;"mesa_vlan_trans_group_add;@;[ ;0;[{;{	;o;;o;	;
@
;i ;"+const mesa_inst_t                     ;@;o;;o;	;
@
;iÆ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iî;"2const mesa_vlan_trans_grp2vlan_conf_t *const ;@;o;;o;	;
@
;i;"	conf;@;[ ;0;0{;{;{	;o;;o;	;
@
;is;"mesa_rc ;@;o;;o;	;
@
;i{;"mesa_vlan_trans_group_del;@;[ ;0;[{;{	;o;;o;	;
@
;i;"+const mesa_inst_t                     ;@;o;;o;	;
@
;i»;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iã;"2const mesa_vlan_trans_grp2vlan_conf_t *const ;@;o;;o;	;
@
;i;"	conf;@;[ ;0;0{;{;{	;o;;o;	;
@
;i;"mesa_rc ;@;o;;o;	;
@
;i;"mesa_vlan_trans_group_get;@;[ ;0;[{;{	;o;;o;	;
@
;i±;"+const mesa_inst_t                     ;@;o;;o;	;
@
;i×;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iÿ;"2const mesa_vlan_trans_grp2vlan_conf_t *const ;@;o;;o;	;
@
;i,;"in;@;[ ;0{;{	;o;;o;	;
@
;iR;"2mesa_vlan_trans_grp2vlan_conf_t       *const ;@;o;;o;	;
@
;i;"	conf;@;[ ;0;0{;{;{	;o;;o;	;
@
;i;"mesa_rc ;@;o;;o;	;
@
;i;"#mesa_vlan_trans_group_get_next;@;[ ;0;[{;{	;o;;o;	;
@
;i*;"+const mesa_inst_t                     ;@;o;;o;	;
@
;iP;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i};"2const mesa_vlan_trans_grp2vlan_conf_t *const ;@;o;;o;	;
@
;iª;"in;@;[ ;0{;{	;o;;o;	;
@
;iÕ;",mesa_vlan_trans_grp2vlan_conf_t       *;@;o;;o;	;
@
;iü;"	conf;@;[ ;0;0{;{;{	;o;;o;	;
@
;i;"mesa_rc ;@;o;;o;	;
@
;i;"&mesa_vlan_trans_group_to_port_set;@;[ ;0;[{;{	;o;;o;	;
@
;i¹;"+const mesa_inst_t                     ;@;o;;o;	;
@
;iß;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i;"2const mesa_vlan_trans_port2grp_conf_t *const ;@;o;;o;	;
@
;i<;"	conf;@;[ ;0;0{;{;{	;o;;o;	;
@
;iÂ;"mesa_rc ;@;o;;o;	;
@
;iÊ;"&mesa_vlan_trans_group_to_port_get;@;[ ;0;[{;{	;o;;o;	;
@
;iì;"%const mesa_inst_t               ;@;o;;o;	;
@
;i;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i<;"%const uint16_t                  ;@;o;;o;	;
@
;i\;"group_id;@;[ ;0{;{	;o;;o;	;
@
;i;"&mesa_vlan_trans_port2grp_conf_t *;@;o;;o;	;
@
;i±;"	conf;@;[ ;0;0{;{;{	;o;;o;	;
@
;i:;"mesa_rc ;@;o;;o;	;
@
;iB;"+mesa_vlan_trans_group_to_port_get_next;@;[ ;0;[{;{	;o;;o;	;
@
;ii;"%const mesa_inst_t               ;@;o;;o;	;
@
;i;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i¾;"%const uint16_t                  ;@;o;;o;	;
@
;iÞ;"group_id;@;[ ;0{;{	;o;;o;	;
@
;i;"&mesa_vlan_trans_port2grp_conf_t *;@;o;;o;	;
@
;i8;"	conf;@;[ ;0;0{
;o;;o;	;
@
;i[;"typedef;@;{;[{;{;{	;o;;o;	;
@
;ip;"mesa_vcap_key_type_t ;@;o;;o;	;
@
;i;"key_type_is1_1;@;[ ;0{;{;{	;o;;o;	;
@
;i»;"mesa_bool_t          ;@;o;;o;	;
@
;iÐ;"dmac_dip_1;@;[ ;0;o;;o;	;
@
;i";"mesa_vcap_port_conf_t ;@;[ ;o;;o;	;
@
;i8;"CAP(L2_VCAP_PORT_CONF);@{;{;{	;o;;o;	;
@
;iÃ;"mesa_rc ;@;o;;o;	;
@
;iË;"mesa_vcap_port_conf_get;@;[ ;0;[{;{	;o;;o;	;
@
;iã;"const mesa_inst_t     ;@;o;;o;	;
@
;iù;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i;"const mesa_port_no_t  ;@;o;;o;	;
@
;i5;"port_no;@;[ ;0{;{	;o;;o;	;
@
;i^;""mesa_vcap_port_conf_t *const ;@;o;;o;	;
@
;i{;"	conf;@;[ ;0;o;;o;	;
@
;i;"CAP(L2_VCAP_PORT_CONF);@{;{;{	;o;;o;	;
@
;i;"mesa_rc ;@;o;;o;	;
@
;i;"mesa_vcap_port_conf_set;@;[ ;0;[{;{	;o;;o;	;
@
;i0;"!const mesa_inst_t           ;@;o;;o;	;
@
;iL;"	inst;@;[ ;0{;{	;o;;o;	;
@
;ir;"!const mesa_port_no_t        ;@;o;;o;	;
@
;i;"port_no;@;[ ;0{;{	;o;;o;	;
@
;i·;"(const mesa_vcap_port_conf_t *const ;@;o;;o;	;
@
;iÚ;"	conf;@;[ ;0;o;;o;	;
@
;iä;"CAP(L2_VCAP_PORT_CONF);@{;{;{	;o;;o;	;
@
;iÊ;"mesa_rc ;@;o;;o;	;
@
;iÒ;"mesa_isolated_vlan_get;@;[ ;0;[{;{	;o;;o;	;
@
;ié;"const mesa_inst_t  ;@;o;;o;	;
@
;iü;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i!;"const mesa_vid_t   ;@;o;;o;	;
@
;i4;"vid;@;[ ;0{;{	;o;;o;	;
@
;iX;"mesa_bool_t        *const ;@;o;;o;	;
@
;ir;"isolated;@;[ ;0;0{;{;{	;o;;o;	;
@
;iI;"mesa_rc ;@;o;;o;	;
@
;iQ;"mesa_isolated_vlan_set;@;[ ;0;[{;{	;o;;o;	;
@
;ih;"const mesa_inst_t  ;@;o;;o;	;
@
;i{;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i ;"const mesa_vid_t   ;@;o;;o;	;
@
;i³;"vid;@;[ ;0{;{	;o;;o;	;
@
;i×;"const mesa_bool_t  ;@;o;;o;	;
@
;iê;"isolated;@;[ ;0;0{;{;{	;o;;o;	;
@
;iG;"mesa_rc ;@;o;;o;	;
@
;iO;"#mesa_isolated_port_members_get;@;[ ;0;[{;{	;o;;o;	;
@
;in;"const mesa_inst_t ;@;o;;o;	;
@
;i;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i­;"mesa_port_list_t  *;@;o;;o;	;
@
;iÀ;"port_list;@;[ ;0;0{;{;{	;o;;o;	;
@
;iP ;"mesa_rc ;@;o;;o;	;
@
;iX ;"#mesa_isolated_port_members_set;@;[ ;0;[{;{	;o;;o;	;
@
;iw ;"const mesa_inst_t      ;@;o;;o;	;
@
;i ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i» ;"const mesa_port_list_t *;@;o;;o;	;
@
;iÓ ;"port_list;@;[ ;0;0{
;o;;o;	;
@
;i@¡;"typedef;@;o;;o;	;
@
;iH¡;"uint32_t ;@;o;;o;	;
@
;iQ¡;"mesa_pvlan_no_t;@;[ ;0{;{;{	;o;;o;	;
@
;iá¡;"mesa_rc ;@;o;;o;	;
@
;ié¡;" mesa_pvlan_port_members_get;@;[ ;0;[{;{	;o;;o;	;
@
;i¢;"const mesa_inst_t     ;@;o;;o;	;
@
;i¢;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iE¢;"const mesa_pvlan_no_t ;@;o;;o;	;
@
;i[¢;"pvlan_no;@;[ ;0{;{	;o;;o;	;
@
;i¢;"mesa_port_list_t      *;@;o;;o;	;
@
;i ¢;"port_list;@;[ ;0;0{;{;{	;o;;o;	;
@
;ij£;"mesa_rc ;@;o;;o;	;
@
;ir£;" mesa_pvlan_port_members_set;@;[ ;0;[{;{	;o;;o;	;
@
;i£;"const mesa_inst_t      ;@;o;;o;	;
@
;i¥£;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iÏ£;"const mesa_pvlan_no_t  ;@;o;;o;	;
@
;iæ£;"pvlan_no;@;[ ;0{;{	;o;;o;	;
@
;i¤;"const mesa_port_list_t *;@;o;;o;	;
@
;i,¤;"port_list;@;[ ;0;0{;{;{	;o;;o;	;
@
;i¾¤;"mesa_rc ;@;o;;o;	;
@
;iÆ¤;"!mesa_apvlan_port_members_get;@;[ ;0;[{;{	;o;;o;	;
@
;iã¤;"const mesa_inst_t    ;@;o;;o;	;
@
;iø¤;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i#¥;"const mesa_port_no_t ;@;o;;o;	;
@
;i8¥;"port_no;@;[ ;0{;{	;o;;o;	;
@
;if¥;"mesa_port_list_t     *;@;o;;o;	;
@
;i|¥;"port_list;@;[ ;0;0{;{;{	;o;;o;	;
@
;i`¦;"mesa_rc ;@;o;;o;	;
@
;ih¦;"!mesa_apvlan_port_members_set;@;[ ;0;[{;{	;o;;o;	;
@
;i¦;"const mesa_inst_t      ;@;o;;o;	;
@
;i¦;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iÇ¦;"const mesa_port_no_t   ;@;o;;o;	;
@
;iÞ¦;"port_no;@;[ ;0{;{	;o;;o;	;
@
;i§;"const mesa_port_list_t *;@;o;;o;	;
@
;i$§;"port_list;@;[ ;0;0{
;o;;o;	;
@
;iS§;"typedef;@;o;;o;	;
@
;i[§;"mesa_port_no_t ;@;o;;o;	;
@
;ij§;"mesa_dgroup_no_t;@;[ ;0{
;o;;o;	;
@
;i¥§;"typedef;@;{;[{;{;{	;o;;o;	;
@
;iº§;"mesa_dgroup_no_t ;@;o;;o;	;
@
;iË§;"dgroup_no;@;[ ;0;o;;o;	;
@
;iò§;"mesa_dgroup_port_conf_t;@;[ ;0{;{;{	;o;;o;	;
@
;i¨;"mesa_rc ;@;o;;o;	;
@
;i¨;"mesa_dgroup_port_conf_get;@;[ ;0;[{;{	;o;;o;	;
@
;i´¨;"const mesa_inst_t       ;@;o;;o;	;
@
;iÌ¨;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iô¨;"const mesa_port_no_t    ;@;o;;o;	;
@
;i©;"port_no;@;[ ;0{;{	;o;;o;	;
@
;i7©;"$mesa_dgroup_port_conf_t *const ;@;o;;o;	;
@
;iV©;"	conf;@;[ ;0;0{;{;{	;o;;o;	;
@
;iBª;"mesa_rc ;@;o;;o;	;
@
;iJª;"mesa_dgroup_port_conf_set;@;[ ;0;[{;{	;o;;o;	;
@
;idª;"#const mesa_inst_t             ;@;o;;o;	;
@
;iª;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iªª;"#const mesa_port_no_t          ;@;o;;o;	;
@
;iÈª;"port_no;@;[ ;0{;{	;o;;o;	;
@
;ióª;"*const mesa_dgroup_port_conf_t *const ;@;o;;o;	;
@
;i«;"	conf;@;[ ;0;0{
;o;;o;	;
@
;i­;"typedef;@;{;o;;o;	;
@
;i¡­;"	enum;@; [	{;!{	;"o;;o;	;
@
;i¬­;"MESA_SFLOW_TYPE_NONE ;@:operatoro;;o;	;
@
;iÁ­;"=;@:	expro;;o;	;
@
;iÃ­;"0;@;0{;!{;"o;;o;	;
@
;iñ­;"MESA_SFLOW_TYPE_RX;@;0{;!{;"o;;o;	;
@
;i>®;"MESA_SFLOW_TYPE_TX;@;0{;!{;"o;;o;	;
@
;i®;"MESA_SFLOW_TYPE_ALL       ;@;0;o;;o;	;
@
;iå®;"mesa_sflow_type_t;@;[ ;0{
;o;;o;	;
@
;iù®;"typedef;@;{;[{;{;{	;o;;o;	;
@
;i¯;"mesa_sflow_type_t ;@;o;;o;	;
@
;i ¯;"	type;@;[ ;0{;{;{	;o;;o;	;
@
;ih¯;"uint32_t          ;@;o;;o;	;
@
;iz¯;"sampling_rate;@;[ ;0;o;;o;	;
@
;iÜ¯;"mesa_sflow_port_conf_t;@;[ ;0{;{;{	;o;;o;	;
@
;iw°;"mesa_rc ;@;o;;o;	;
@
;i°;"mesa_sflow_port_conf_get;@;[ ;0;[{;{	;o;;o;	;
@
;i°;""const mesa_inst_t            ;@;o;;o;	;
@
;iµ°;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iÜ°;""const mesa_port_no_t         ;@;o;;o;	;
@
;iù°;"port_no;@;[ ;0{;{	;o;;o;	;
@
;i)±;"#mesa_sflow_port_conf_t *const ;@;o;;o;	;
@
;iG±;"	conf;@;[ ;0;0{;{;{	;o;;o;	;
@
;iÏ±;"mesa_rc ;@;o;;o;	;
@
;i×±;"mesa_sflow_port_conf_set;@;[ ;0;[{;{	;o;;o;	;
@
;ið±;""const mesa_inst_t            ;@;o;;o;	;
@
;i²;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i4²;""const mesa_port_no_t         ;@;o;;o;	;
@
;iQ²;"port_no;@;[ ;0{;{	;o;;o;	;
@
;i{²;")const mesa_sflow_port_conf_t *const ;@;o;;o;	;
@
;i²;"	conf;@;[ ;0;0{;{;{	;o;;o;	;
@
;iGµ;"mesa_rc ;@;o;;o;	;
@
;iOµ;"%mesa_sflow_sampling_rate_convert;@;[ ;0;[	{;{	;o;;o;	;
@
;ipµ;"const mesa_inst_t ;@;o;;o;	;
@
;iµ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i±µ;"const mesa_bool_t ;@;o;;o;	;
@
;iÃµ;"power2;@;[ ;0{;{	;o;;o;	;
@
;iôµ;"const uint32_t    ;@;o;;o;	;
@
;i¶;"rate_in;@;[ ;0{;{	;o;;o;	;
@
;i>¶;"uint32_t    *const ;@;o;;o;	;
@
;iQ¶;"rate_out;@;[ ;0;0{;{;{	;o;;o;	;
@
;i·;"mesa_rc ;@;o;;o;	;
@
;i#·;"mesa_aggr_port_members_get;@;[ ;0;[{;{	;o;;o;	;
@
;i>·;"const mesa_inst_t    ;@;o;;o;	;
@
;iS·;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i|·;"const mesa_aggr_no_t ;@;o;;o;	;
@
;i·;"aggr_no;@;[ ;0{;{	;o;;o;	;
@
;i½·;"mesa_port_list_t     *;@;o;;o;	;
@
;iÓ·;"port_list;@;[ ;0;0{;{;{	;o;;o;	;
@
;i¸;"mesa_rc ;@;o;;o;	;
@
;i¸;"mesa_aggr_port_members_set;@;[ ;0;[{;{	;o;;o;	;
@
;i®¸;"const mesa_inst_t      ;@;o;;o;	;
@
;iÅ¸;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iî¸;"const mesa_aggr_no_t   ;@;o;;o;	;
@
;i¹;"aggr_no;@;[ ;0{;{	;o;;o;	;
@
;i1¹;"const mesa_port_list_t *;@;o;;o;	;
@
;iI¹;"port_list;@;[ ;0;0{
;o;;o;	;
@
;i¹;"typedef;@;{;[	{;{;{	;o;;o;	;
@
;i¹;"mesa_bool_t ;@;o;;o;	;
@
;i ¹;"smac_enable;@;[ ;0{;{;{	;o;;o;	;
@
;iÎ¹;"mesa_bool_t ;@;o;;o;	;
@
;iÚ¹;"dmac_enable;@;[ ;0{;{;{	;o;;o;	;
@
;iº;"mesa_bool_t ;@;o;;o;	;
@
;iº;"sip_dip_enable;@;[ ;0{;{;{	;o;;o;	;
@
;iVº;"mesa_bool_t ;@;o;;o;	;
@
;ibº;"sport_dport_enable;@;[ ;0;o;;o;	;
@
;iº;"mesa_aggr_mode_t;@;[ ;0{;{;{	;o;;o;	;
@
;i»;"mesa_rc ;@;o;;o;	;
@
;i»;"mesa_aggr_mode_get;@;[ ;0;[{;{	;o;;o;	;
@
;i'»;"const mesa_inst_t  ;@;o;;o;	;
@
;i:»;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i[»;"mesa_aggr_mode_t   *const ;@;o;;o;	;
@
;iu»;"	mode;@;[ ;0;0{;{;{	;o;;o;	;
@
;i¼;"mesa_rc ;@;o;;o;	;
@
;i
¼;"mesa_aggr_mode_set;@;[ ;0;[{;{	;o;;o;	;
@
;i¼;"const mesa_inst_t       ;@;o;;o;	;
@
;i5¼;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iV¼;"$const mesa_aggr_mode_t  *const ;@;o;;o;	;
@
;iu¼;"	mode;@;[ ;0;0{
;o;;o;	;
@
;iã¼;"typedef;@;{;o;;o;	;
@
;ië¼;"	enum;@; [	{;!{;"o;;o;	;
@
;iö¼;"MESA_MIRROR_TAG_NONE;@;0{;!{;"o;;o;	;
@
;i-½;"MESA_MIRROR_TAG_C;@;0{;!{;"o;;o;	;
@
;i\½;"MESA_MIRROR_TAG_S;@;0{;!{;"o;;o;	;
@
;i½;"MESA_MIRROR_TAG_S_CUSTOM ;@;0;o;;o;	;
@
;i¿½;"mesa_mirror_tag_t ;@;[ ;o;;o;	;
@
;iÑ½;"CAP(L2_MIRROR_TAG);@{
;o;;o;	;
@
;iþ½;"typedef;@;{;[{;{;{	;o;;o;	;
@
;i¾;"mesa_port_no_t    ;@;o;;o;	;
@
;i%¾;"port_no;@;[ ;0{;{;{	;o;;o;	;
@
;ie¾;"mesa_bool_t       ;@;o;;o;	;
@
;iw¾;"fwd_enable;@;[ ;0{;{;{	;o;;o;	;
@
;iÆ¾;"mesa_mirror_tag_t ;@;o;;o;	;
@
;iØ¾;"	tag ;@;[ ;o;;o;	;
@
;iÜ¾;"CAP(L2_MIRROR_TAG);@{;{;{	;o;;o;	;
@
;i¿;"mesa_vid_t        ;@;o;;o;	;
@
;i¿;"	vid ;@;[ ;o;;o;	;
@
;i¿;"CAP(L2_MIRROR_TAG);@{;{;{	;o;;o;	;
@
;iG¿;"mesa_tagprio_t    ;@;o;;o;	;
@
;iY¿;"	pcp ;@;[ ;o;;o;	;
@
;i]¿;"CAP(L2_MIRROR_TAG);@{;{;{	;o;;o;	;
@
;i¿;"mesa_dei_t        ;@;o;;o;	;
@
;i¿;"	dei ;@;[ ;o;;o;	;
@
;i¿;"CAP(L2_MIRROR_TAG);@;o;;o;	;
@
;iÅ¿;"mesa_mirror_conf_t;@;[ ;0{;{;{	;o;;o;	;
@
;i À;"mesa_rc ;@;o;;o;	;
@
;i(À;"mesa_mirror_conf_get;@;[ ;0;[{;{	;o;;o;	;
@
;i=À;"const mesa_inst_t  ;@;o;;o;	;
@
;iPÀ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;isÀ;"mesa_mirror_conf_t *const ;@;o;;o;	;
@
;iÀ;"	conf;@;[ ;0;0{;{;{	;o;;o;	;
@
;iÁ;"mesa_rc ;@;o;;o;	;
@
;iÁ;"mesa_mirror_conf_set;@;[ ;0;[{;{	;o;;o;	;
@
;i(Á;"const mesa_inst_t        ;@;o;;o;	;
@
;iAÁ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;idÁ;"%const mesa_mirror_conf_t *const ;@;o;;o;	;
@
;iÁ;"	conf;@;[ ;0;0{;{;{	;o;;o;	;
@
;iËÁ;"mesa_rc ;@;o;;o;	;
@
;iÓÁ;"!mesa_mirror_monitor_port_get;@;[ ;0;[{;{	;o;;o;	;
@
;iðÁ;"const mesa_inst_t  ;@;o;;o;	;
@
;iÂ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i.Â;"mesa_port_no_t     *const ;@;o;;o;	;
@
;iHÂ;"port_no;@;[ ;0;0{;{;{	;o;;o;	;
@
;i¦Â;"mesa_rc ;@;o;;o;	;
@
;i®Â;"!mesa_mirror_monitor_port_set;@;[ ;0;[{;{	;o;;o;	;
@
;iËÂ;"const mesa_inst_t     ;@;o;;o;	;
@
;iáÂ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iÃ;"const mesa_port_no_t  ;@;o;;o;	;
@
;i"Ã;"port_no;@;[ ;0;0{;{;{	;o;;o;	;
@
;ivÃ;"mesa_rc ;@;o;;o;	;
@
;i~Ã;""mesa_mirror_ingress_ports_get;@;[ ;0;[{;{	;o;;o;	;
@
;iÃ;"const mesa_inst_t ;@;o;;o;	;
@
;i®Ã;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iÚÃ;"mesa_port_list_t  *;@;o;;o;	;
@
;iíÃ;"port_list;@;[ ;0;0{;{;{	;o;;o;	;
@
;iAÄ;"mesa_rc ;@;o;;o;	;
@
;iIÄ;""mesa_mirror_ingress_ports_set;@;[ ;0;[{;{	;o;;o;	;
@
;igÄ;"const mesa_inst_t      ;@;o;;o;	;
@
;i~Ä;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iªÄ;"const mesa_port_list_t *;@;o;;o;	;
@
;iÂÄ;"port_list;@;[ ;0;0{;{;{	;o;;o;	;
@
;iÅ;"mesa_rc ;@;o;;o;	;
@
;iÅ;"!mesa_mirror_egress_ports_get;@;[ ;0;[{;{	;o;;o;	;
@
;i;Å;"const mesa_inst_t ;@;o;;o;	;
@
;iMÅ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;ixÅ;"mesa_port_list_t  *;@;o;;o;	;
@
;iÅ;"port_list;@;[ ;0;0{;{;{	;o;;o;	;
@
;iÞÅ;"mesa_rc ;@;o;;o;	;
@
;iæÅ;"!mesa_mirror_egress_ports_set;@;[ ;0;[{;{	;o;;o;	;
@
;iÆ;"const mesa_inst_t      ;@;o;;o;	;
@
;iÆ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iEÆ;"const mesa_port_list_t *;@;o;;o;	;
@
;i]Æ;"port_list;@;[ ;0;0{;{;{	;o;;o;	;
@
;i¦Æ;"mesa_rc ;@;o;;o;	;
@
;i®Æ;" mesa_mirror_cpu_ingress_get;@;[ ;0;[{;{	;o;;o;	;
@
;iÊÆ;"const mesa_inst_t  ;@;o;;o;	;
@
;iÝÆ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iÇ;"mesa_bool_t        *;@;o;;o;	;
@
;iÇ;"member;@;[ ;0;0{;{;{	;o;;o;	;
@
;itÇ;"mesa_rc ;@;o;;o;	;
@
;i|Ç;" mesa_mirror_cpu_ingress_set;@;[ ;0;[{;{	;o;;o;	;
@
;iÇ;"const mesa_inst_t  ;@;o;;o;	;
@
;i«Ç;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iÕÇ;"const mesa_bool_t  ;@;o;;o;	;
@
;ièÇ;"member;@;[ ;0;0{;{;{	;o;;o;	;
@
;i,È;"mesa_rc ;@;o;;o;	;
@
;i4È;"mesa_mirror_cpu_egress_get;@;[ ;0;[{;{	;o;;o;	;
@
;iOÈ;"const mesa_inst_t  ;@;o;;o;	;
@
;ibÈ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iÈ;"mesa_bool_t        *;@;o;;o;	;
@
;iÈ;"member;@;[ ;0;0{;{;{	;o;;o;	;
@
;iöÈ;"mesa_rc ;@;o;;o;	;
@
;iþÈ;"mesa_mirror_cpu_egress_set;@;[ ;0;[{;{	;o;;o;	;
@
;iÉ;"const mesa_inst_t  ;@;o;;o;	;
@
;i,É;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iUÉ;"const mesa_bool_t  ;@;o;;o;	;
@
;ihÉ;"member;@;[ ;0;0{;{;{	;o;;o;	;
@
;iüÉ;"mesa_rc ;@;o;;o;	;
@
;iÊ;"mesa_uc_flood_members_get;@;[ ;0;[{;{	;o;;o;	;
@
;iÊ;"const mesa_inst_t ;@;o;;o;	;
@
;i0Ê;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iXÊ;"mesa_port_list_t  *;@;o;;o;	;
@
;ikÊ;"port_list;@;[ ;0;0{;{;{	;o;;o;	;
@
;iëÊ;"mesa_rc ;@;o;;o;	;
@
;ióÊ;"mesa_uc_flood_members_set;@;[ ;0;[{;{	;o;;o;	;
@
;iË;"const mesa_inst_t      ;@;o;;o;	;
@
;i$Ë;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iLË;"const mesa_port_list_t *;@;o;;o;	;
@
;idË;"port_list;@;[ ;0;0{;{;{	;o;;o;	;
@
;i´Ë;"mesa_rc ;@;o;;o;	;
@
;i¼Ë;"mesa_mc_flood_members_get;@;[ ;0;[{;{	;o;;o;	;
@
;iÖË;"const mesa_inst_t ;@;o;;o;	;
@
;ièË;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iÌ;"mesa_port_list_t  *;@;o;;o;	;
@
;i#Ì;"port_list;@;[ ;0;0{;{;{	;o;;o;	;
@
;iÍ;"mesa_rc ;@;o;;o;	;
@
;iÍ;"mesa_mc_flood_members_set;@;[ ;0;[{;{	;o;;o;	;
@
;i'Í;"const mesa_inst_t      ;@;o;;o;	;
@
;i>Í;"	inst;@;[ ;0{;{	;o;;o;	;
@
;ifÍ;"const mesa_port_list_t *;@;o;;o;	;
@
;i~Í;"port_list;@;[ ;0;0{;{;{	;o;;o;	;
@
;iÎ;"mesa_rc ;@;o;;o;	;
@
;iÎ;"#mesa_ipv4_mc_flood_members_get;@;[ ;0;[{;{	;o;;o;	;
@
;i=Î;"const mesa_inst_t ;@;o;;o;	;
@
;iOÎ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i|Î;"mesa_port_list_t  *;@;o;;o;	;
@
;iÎ;"port_list;@;[ ;0;0{;{;{	;o;;o;	;
@
;iÞÏ;"mesa_rc ;@;o;;o;	;
@
;iæÏ;"#mesa_ipv4_mc_flood_members_set;@;[ ;0;[{;{	;o;;o;	;
@
;iÐ;"const mesa_inst_t      ;@;o;;o;	;
@
;iÐ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iIÐ;"const mesa_port_list_t *;@;o;;o;	;
@
;iaÐ;"port_list;@;[ ;0;0{;{;{	;o;;o;	;
@
;i)Ñ;"mesa_rc ;@;o;;o;	;
@
;i1Ñ;"mesa_ipv4_mc_add;@;[ ;0;[
{;{	;o;;o;	;
@
;iBÑ;"const mesa_inst_t      ;@;o;;o;	;
@
;iYÑ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;ixÑ;"const mesa_vid_t       ;@;o;;o;	;
@
;iÑ;"vid;@;[ ;0{;{	;o;;o;	;
@
;i­Ñ;"const mesa_ip_t        ;@;o;;o;	;
@
;iÄÑ;"sip;@;[ ;0{;{	;o;;o;	;
@
;iâÑ;"const mesa_ip_t        ;@;o;;o;	;
@
;iùÑ;"dip;@;[ ;0{;{	;o;;o;	;
@
;iÒ;"const mesa_port_list_t *;@;o;;o;	;
@
;i/Ò;"port_list;@;[ ;0;o;;o;	;
@
;i>Ò;"CAP(L2_IPV4_MC_SIP);@{;{;{	;o;;o;	;
@
;iØÒ;"mesa_rc ;@;o;;o;	;
@
;iàÒ;"mesa_ipv4_mc_del;@;[ ;0;[	{;{	;o;;o;	;
@
;iñÒ;"const mesa_inst_t ;@;o;;o;	;
@
;iÓ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i"Ó;"const mesa_vid_t  ;@;o;;o;	;
@
;i4Ó;"vid;@;[ ;0{;{	;o;;o;	;
@
;iRÓ;"const mesa_ip_t   ;@;o;;o;	;
@
;idÓ;"sip;@;[ ;0{;{	;o;;o;	;
@
;iÓ;"const mesa_ip_t   ;@;o;;o;	;
@
;iÓ;"dip;@;[ ;0;o;;o;	;
@
;iÓ;"CAP(L2_IPV4_MC_SIP);@{;{;{	;o;;o;	;
@
;i?Ô;"mesa_rc ;@;o;;o;	;
@
;iGÔ;"#mesa_ipv6_mc_flood_members_get;@;[ ;0;[{;{	;o;;o;	;
@
;ifÔ;"const mesa_inst_t ;@;o;;o;	;
@
;ixÔ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i¥Ô;"mesa_port_list_t  *;@;o;;o;	;
@
;i¸Ô;"port_list;@;[ ;0;0{;{;{	;o;;o;	;
@
;i'Ö;"mesa_rc ;@;o;;o;	;
@
;i/Ö;"#mesa_ipv6_mc_flood_members_set;@;[ ;0;[{;{	;o;;o;	;
@
;iNÖ;"const mesa_inst_t      ;@;o;;o;	;
@
;ieÖ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iÖ;"const mesa_port_list_t *;@;o;;o;	;
@
;iªÖ;"port_list;@;[ ;0;0{;{;{	;o;;o;	;
@
;i×;"mesa_rc ;@;o;;o;	;
@
;i×;" mesa_ipv6_mc_ctrl_flood_get;@;[ ;0;[{;{	;o;;o;	;
@
;i6×;"const mesa_inst_t  ;@;o;;o;	;
@
;iI×;"	inst;@;[ ;0{;{	;o;;o;	;
@
;is×;"mesa_bool_t        *const ;@;o;;o;	;
@
;i×;"
scope;@;[ ;0;0{;{;{	;o;;o;	;
@
;iøØ;"mesa_rc ;@;o;;o;	;
@
;i Ù;" mesa_ipv6_mc_ctrl_flood_set;@;[ ;0;[{;{	;o;;o;	;
@
;iÙ;"const mesa_inst_t  ;@;o;;o;	;
@
;i/Ù;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iYÙ;"const mesa_bool_t  ;@;o;;o;	;
@
;ilÙ;"
scope;@;[ ;0;0{;{;{	;o;;o;	;
@
;i0Ú;"mesa_rc ;@;o;;o;	;
@
;i8Ú;"mesa_ipv6_mc_add;@;[ ;0;[
{;{	;o;;o;	;
@
;iIÚ;"const mesa_inst_t      ;@;o;;o;	;
@
;i`Ú;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iÚ;"const mesa_vid_t       ;@;o;;o;	;
@
;iÚ;"vid;@;[ ;0{;{	;o;;o;	;
@
;i´Ú;"const mesa_ipv6_t      ;@;o;;o;	;
@
;iËÚ;"sip;@;[ ;0{;{	;o;;o;	;
@
;iéÚ;"const mesa_ipv6_t      ;@;o;;o;	;
@
;i Û;"dip;@;[ ;0{;{	;o;;o;	;
@
;iÛ;"const mesa_port_list_t *;@;o;;o;	;
@
;i6Û;"port_list;@;[ ;0;o;;o;	;
@
;iEÛ;"CAP(L2_IPV6_MC_SIP);@{;{;{	;o;;o;	;
@
;iÖÛ;"mesa_rc ;@;o;;o;	;
@
;iÞÛ;"mesa_ipv6_mc_del;@;[ ;0;[	{;{	;o;;o;	;
@
;iïÛ;"const mesa_inst_t ;@;o;;o;	;
@
;iÜ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i Ü;"const mesa_vid_t  ;@;o;;o;	;
@
;i2Ü;"vid;@;[ ;0{;{	;o;;o;	;
@
;iPÜ;"const mesa_ipv6_t ;@;o;;o;	;
@
;ibÜ;"sip;@;[ ;0{;{	;o;;o;	;
@
;iÜ;"const mesa_ipv6_t ;@;o;;o;	;
@
;iÜ;"dip;@;[ ;0;o;;o;	;
@
;iÜ;"CAP(L2_IPV6_MC_SIP);@{
;o;;o;	;
@
;iÝ;"typedef;@;{;o;;o;	;
@
;iÝ;"	enum;@; [{;!{;"o;;o;	;
@
;i'Ý;"MESA_EPS_PORT_1_PLUS_1;@;0{;!{;"o;;o;	;
@
;iUÝ;"MESA_EPS_PORT_1_FOR_1   ;@;0;o;;o;	;
@
;iÝ;"mesa_eps_port_type_t;@;[ ;0{
;o;;o;	;
@
;i¹Ý;"typedef;@;{;[{;{;{	;o;;o;	;
@
;iÎÝ;"mesa_eps_port_type_t ;@;o;;o;	;
@
;iãÝ;"	type;@;[ ;0{;{;{	;o;;o;	;
@
;iÞ;"mesa_port_no_t       ;@;o;;o;	;
@
;iÞ;"port_no;@;[ ;0;o;;o;	;
@
;iKÞ;"mesa_eps_port_conf_t;@;[ ;0{;{;{	;o;;o;	;
@
;iËÞ;"mesa_rc ;@;o;;o;	;
@
;iÓÞ;"mesa_eps_port_conf_get;@;[ ;0;[{;{	;o;;o;	;
@
;iêÞ;"const mesa_inst_t     ;@;o;;o;	;
@
;i ß;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i%ß;"const mesa_port_no_t  ;@;o;;o;	;
@
;i;ß;"port_no;@;[ ;0{;{	;o;;o;	;
@
;icß;""mesa_eps_port_conf_t  *const ;@;o;;o;	;
@
;iß;"	conf;@;[ ;0;0{;{;{	;o;;o;	;
@
;i)à;"mesa_rc ;@;o;;o;	;
@
;i1à;"mesa_eps_port_conf_set;@;[ ;0;[{;{	;o;;o;	;
@
;iHà;"!const mesa_inst_t           ;@;o;;o;	;
@
;idà;"	inst;@;[ ;0{;{	;o;;o;	;
@
;ià;"!const mesa_port_no_t        ;@;o;;o;	;
@
;i¥à;"port_no;@;[ ;0{;{	;o;;o;	;
@
;iÍà;"(const mesa_eps_port_conf_t  *const ;@;o;;o;	;
@
;iðà;"	conf;@;[ ;0;0{
;o;;o;	;
@
;i	á;"typedef;@;{;o;;o;	;
@
;iá;"	enum;@; [{;!{;"o;;o;	;
@
;iá;"MESA_EPS_SELECTOR_WORKING;@;0{;!{;"o;;o;	;
@
;iUá;"#MESA_EPS_SELECTOR_PROTECTION  ;@;0;o;;o;	;
@
;iá;"mesa_eps_selector_t;@;[ ;0{;{;{	;o;;o;	;
@
;iýá;"mesa_rc ;@;o;;o;	;
@
;iâ;"mesa_eps_port_selector_get;@;[ ;0;[{;{	;o;;o;	;
@
;i â;"const mesa_inst_t     ;@;o;;o;	;
@
;i6â;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i_â;"const mesa_port_no_t  ;@;o;;o;	;
@
;iuâ;"port_no;@;[ ;0{;{	;o;;o;	;
@
;i¡â;""mesa_eps_selector_t   *const ;@;o;;o;	;
@
;i¾â;"selector;@;[ ;0;0{;{;{	;o;;o;	;
@
;i ã;"mesa_rc ;@;o;;o;	;
@
;i(ã;"mesa_eps_port_selector_set;@;[ ;0;[{;{	;o;;o;	;
@
;iCã;" const mesa_inst_t          ;@;o;;o;	;
@
;i^ã;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iã;" const mesa_port_no_t       ;@;o;;o;	;
@
;i¢ã;"port_no;@;[ ;0{;{	;o;;o;	;
@
;iÎã;" const mesa_eps_selector_t  ;@;o;;o;	;
@
;iéã;"selector;@;[ ;0;0{
;o;;o;	;
@
;iVä;"typedef;@;o;;o;	;
@
;i^ä;"uint32_t ;@;o;;o;	;
@
;igä;"mesa_erpi_t;@;[ ;0{;o;;o;	;
@
;iuä;"[#define MESA_ERPIS           (64)                         // Number of ERPS instances
;@{;o;;o;	;
@
;iËä;"T#define MESA_ERPI_START      (0)                          // ERPI start number
;@{;o;;o;	;
@
;iå;"R#define MESA_ERPI_END        (MESA_ERPI_START+MESA_ERPIS) // ERPI end number
;@{;o;;o;	;
@
;igå;"S#define MESA_ERPI_ARRAY_SIZE MESA_ERPI_END                // ERPI array size

;@{;{;{	;o;;o;	;
@
;i1æ;"mesa_rc ;@;o;;o;	;
@
;i9æ;"mesa_erps_vlan_member_get;@;[ ;0;[	{;{	;o;;o;	;
@
;iSæ;"const mesa_inst_t ;@;o;;o;	;
@
;ieæ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iæ;"const mesa_erpi_t ;@;o;;o;	;
@
;iæ;"	erpi;@;[ ;0{;{	;o;;o;	;
@
;iÇæ;"const mesa_vid_t  ;@;o;;o;	;
@
;iÙæ;"vid;@;[ ;0{;{	;o;;o;	;
@
;i ç;"mesa_bool_t       *const ;@;o;;o;	;
@
;iç;"member;@;[ ;0;0{;{;{	;o;;o;	;
@
;iè;"mesa_rc ;@;o;;o;	;
@
;iè;"mesa_erps_vlan_member_set;@;[ ;0;[	{;{	;o;;o;	;
@
;i&è;"const mesa_inst_t ;@;o;;o;	;
@
;i8è;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i`è;"const mesa_erpi_t ;@;o;;o;	;
@
;irè;"	erpi;@;[ ;0{;{	;o;;o;	;
@
;iè;"const mesa_vid_t  ;@;o;;o;	;
@
;i¬è;"vid;@;[ ;0{;{	;o;;o;	;
@
;iÓè;"const mesa_bool_t ;@;o;;o;	;
@
;iåè;"member;@;[ ;0;0{
;o;;o;	;
@
;iýè;"typedef;@;{;o;;o;	;
@
;ié;"	enum;@; [{;!{;"o;;o;	;
@
;ié;"MESA_ERPS_STATE_FORWARDING;@;0{;!{;"o;;o;	;
@
;i>é;"MESA_ERPS_STATE_DISCARDING;@;0;o;;o;	;
@
;ijé;"mesa_erps_state_t;@;[ ;0{;{;{	;o;;o;	;
@
;iê;"mesa_rc ;@;o;;o;	;
@
;iê;"mesa_erps_port_state_get;@;[ ;0;[	{;{	;o;;o;	;
@
;i(ê;"const mesa_inst_t    ;@;o;;o;	;
@
;i=ê;"	inst;@;[ ;0{;{	;o;;o;	;
@
;idê;"const mesa_erpi_t    ;@;o;;o;	;
@
;iyê;"	erpi;@;[ ;0{;{	;o;;o;	;
@
;i ê;"const mesa_port_no_t ;@;o;;o;	;
@
;iµê;"port_no;@;[ ;0{;{	;o;;o;	;
@
;ißê;"!mesa_erps_state_t    *const ;@;o;;o;	;
@
;iûê;"
state;@;[ ;0;0{;{;{	;o;;o;	;
@
;ië;"mesa_rc ;@;o;;o;	;
@
;ië;"mesa_erps_port_state_set;@;[ ;0;[	{;{	;o;;o;	;
@
;i®ë;"const mesa_inst_t       ;@;o;;o;	;
@
;iÆë;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iíë;"const mesa_erpi_t       ;@;o;;o;	;
@
;iì;"	erpi;@;[ ;0{;{	;o;;o;	;
@
;i,ì;"const mesa_port_no_t    ;@;o;;o;	;
@
;iDì;"port_no;@;[ ;0{;{	;o;;o;	;
@
;inì;"const mesa_erps_state_t ;@;o;;o;	;
@
;iì;"
state;@;[ ;0;0{
;o;;o;	;
@
;iñì;"typedef;@;{;[{;{;{	;o;;o;	;
@
;ií;"mesa_bool_t ;@;o;;o;	;
@
;ií;"pcp;@;[{;'o;;o;	;
@
;ií;"MESA_PCP_CNT;@;0;o;;o;	;
@
;i5í;"mesa_rcl_vid_conf_t;@;[ ;0{;{;{	;o;;o;	;
@
;iìí;"mesa_rc ;@;o;;o;	;
@
;iôí;"mesa_rcl_vid_add;@;[ ;0;[{;{	;o;;o;	;
@
;iî;"const mesa_inst_t         ;@;o;;o;	;
@
;iî;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i>î;"const mesa_vid_t          ;@;o;;o;	;
@
;iXî;"vid;@;[ ;0{;{	;o;;o;	;
@
;ivî;"&const mesa_rcl_vid_conf_t *const ;@;o;;o;	;
@
;iî;"	conf;@;[ ;0;0{;{;{	;o;;o;	;
@
;iï;"mesa_rc ;@;o;;o;	;
@
;i ï;"mesa_rcl_vid_del;@;[ ;0;[{;{	;o;;o;	;
@
;i1ï;"const mesa_inst_t ;@;o;;o;	;
@
;iCï;"	inst;@;[ ;0{;{	;o;;o;	;
@
;ibï;"const mesa_vid_t  ;@;o;;o;	;
@
;itï;"vid;@;[ ;0;0{
;o;;o;	;
@
;iï;"typedef;@;{;o;;o;	;
@
;iï;"	enum;@; [{;!{;"o;;o;	;
@
;i£ï;"MESA_RCL_ETYPE_ANY;@;0{;!{;"o;;o;	;
@
;iÕï;"MESA_RCL_ETYPE_PROFINET;@;0{;!{;"o;;o;	;
@
;i
ð;"MESA_RCL_ETYPE_OPC_UA;@;0;o;;o;	;
@
;i=ð;"mesa_rcl_etype_t;@;[ ;0{
;o;;o;	;
@
;i[ð;"typedef;@;{;[{;{;{	;o;;o;	;
@
;ipð;"mesa_port_no_t   ;@;o;;o;	;
@
;ið;"port_no;@;[ ;0{;{;{	;o;;o;	;
@
;i¦ð;"mesa_vid_t       ;@;o;;o;	;
@
;i·ð;"vid;@;[ ;0{;{;{	;o;;o;	;
@
;iøð;"mesa_vcap_bit_t  ;@;o;;o;	;
@
;i	ñ;"tagged;@;[ ;0{;{;{	;o;;o;	;
@
;i+ñ;"mesa_bool_t      ;@;o;;o;	;
@
;i<ñ;"	smac;@;[ ;0{;{;{	;o;;o;	;
@
;ioñ;"mesa_vcap_u48_t  ;@;o;;o;	;
@
;iñ;"mac;@;[ ;0{;{;{	;o;;o;	;
@
;i¨ñ;"mesa_rcl_etype_t ;@;o;;o;	;
@
;i¹ñ;"
etype;@;[ ;0{;{;{	;o;;o;	;
@
;ißñ;"mesa_vcap_u16_t  ;@;o;;o;	;
@
;iðñ;"frame_id;@;[ ;0{;{;{	;o;;o;	;
@
;iò;"mesa_vcap_u16_t  ;@;o;;o;	;
@
;i+ò;"publisher_id;@;[ ;0{;{;{	;o;;o;	;
@
;iWò;"mesa_vcap_u16_t  ;@;o;;o;	;
@
;ihò;"writer_group_id;@;[ ;0;o;;o;	;
@
;iò;"mesa_rce_key_t;@;[ ;0{
;o;;o;	;
@
;i³ò;"typedef;@;{;[{;{;{	;o;;o;	;
@
;iÈò;"uint16_t         ;@;o;;o;	;
@
;iÙò;"rtp_id;@;[ ;0{;{;{	;o;;o;	;
@
;iýò;"mesa_bool_t      ;@;o;;o;	;
@
;ió;"rtp_sub_id;@;[ ;0{;{;{	;o;;o;	;
@
;i6ó;"mesa_bool_t      ;@;o;;o;	;
@
;iGó;"rtp_inbound;@;[ ;0{;{;{	;o;;o;	;
@
;isó;"mesa_bool_t      ;@;o;;o;	;
@
;ió;"port_enable;@;[ ;0{;{;{	;o;;o;	;
@
;iÄó;"mesa_port_list_t ;@;o;;o;	;
@
;iÕó;"port_list;@;[ ;0{;{;{	;o;;o;	;
@
;iô;"mesa_bool_t      ;@;o;;o;	;
@
;iô;"llct_enable;@;[ ;0{;{;{	;o;;o;	;
@
;iPô;"mesa_port_no_t   ;@;o;;o;	;
@
;iaô;"llct_port_no;@;[ ;0;o;;o;	;
@
;iô;"mesa_rce_action_t;@;[ ;0{
;o;;o;	;
@
;i£ô;"typedef;@;o;;o;	;
@
;i«ô;"uint32_t ;@;o;;o;	;
@
;i´ô;"mesa_rce_id_t;@;[ ;0{;o;;o;	;
@
;iÄô;"K#define MESA_RCE_ID_LAST 0 // Special value used to add last in list

;@{
;o;;o;	;
@
;i%õ;"typedef;@;{;[{;{;{	;o;;o;	;
@
;i:õ;"mesa_rce_id_t     ;@;o;;o;	;
@
;iLõ;"id;@;[ ;0{;{;{	;o;;o;	;
@
;ibõ;"mesa_rce_key_t    ;@;o;;o;	;
@
;itõ;"key;@;[ ;0{;{;{	;o;;o;	;
@
;iõ;"mesa_rce_action_t ;@;o;;o;	;
@
;iõ;"action;@;[ ;0;o;;o;	;
@
;iµõ;"mesa_rce_t;@;[ ;0{;{;{	;o;;o;	;
@
;içõ;"mesa_rc ;@;o;;o;	;
@
;iïõ;"mesa_rce_init;@;[ ;0;[{;{	;o;;o;	;
@
;iýõ;"const mesa_inst_t ;@;o;;o;	;
@
;iö;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i+ö;"mesa_rce_t        *const ;@;o;;o;	;
@
;iDö;"rce;@;[ ;0;0{;{;{	;o;;o;	;
@
;i÷;"mesa_rc ;@;o;;o;	;
@
;i÷;"mesa_rce_add;@;[ ;0;[{;{	;o;;o;	;
@
;i ÷;"const mesa_inst_t   ;@;o;;o;	;
@
;i4÷;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iO÷;"const mesa_rce_id_t ;@;o;;o;	;
@
;ic÷;"rce_id;@;[ ;0{;{	;o;;o;	;
@
;i÷;" const mesa_rce_t    *const ;@;o;;o;	;
@
;i÷;"rce;@;[ ;0;0{;{;{	;o;;o;	;
@
;iÉ÷;"mesa_rc ;@;o;;o;	;
@
;iÑ÷;"mesa_rce_del;@;[ ;0;[{;{	;o;;o;	;
@
;iÞ÷;"const mesa_inst_t   ;@;o;;o;	;
@
;iò÷;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iø;"const mesa_rce_id_t ;@;o;;o;	;
@
;i!ø;"rce_id;@;[ ;0;0{
;o;;o;	;
@
;i¥ø;"typedef;@;o;;o;	;
@
;i­ø;"	int ;@;o;;o;	;
@
;i±ø;"mesa_vstax_upsid_t;@;[ ;0{
;o;;o;	;
@
;iãø;"typedef;@;o;;o;	;
@
;iëø;"uint32_t ;@;o;;o;	;
@
;iôø;"mesa_vstax_upspn_t;@;[ ;0{;o;;o;	;
@
;i	ù;"-#include <microchip/ethernet/hdr_end.h>
;@{;o;;o;	;
@
;i1ù;"2#endif // _MICROCHIP_ETHERNET_SWITCH_API_L2_
;@