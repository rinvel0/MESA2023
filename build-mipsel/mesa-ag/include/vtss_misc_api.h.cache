{:	root[{:ppo:Parslet::Slice:@positiono:Parslet::Position:@string"0±// Copyright (c) 2004-2020 Microchip Technology Inc. and its subsidiaries.
// SPDX-License-Identifier: MIT


/**
 * \file
 * \brief Miscellaneous API
 * \details This header file describes miscellaneous API functions
 */

#ifndef _VTSS_MISC_API_H_
#define _VTSS_MISC_API_H_

#include <vtss/api/types.h>
#include "vtss_init_api.h"
#ifdef __cplusplus
extern "C" {
#endif

/** \brief Trace group layer */
typedef enum
{
    VTSS_TRACE_LAYER_AIL,   /**< Application Interface Layer */
    VTSS_TRACE_LAYER_CIL,   /**< Chip Interface Layer */

    VTSS_TRACE_LAYER_COUNT  /**< Number of layers */
} vtss_trace_layer_t;

/** \brief Trace groups */
typedef enum
{
    VTSS_TRACE_GROUP_DEFAULT,       /**< Default trace group */
    VTSS_TRACE_GROUP_PORT,          /**< Port control */
    VTSS_TRACE_GROUP_PHY,           /**< PHY control */
    VTSS_TRACE_GROUP_PACKET,        /**< Packet control */
    VTSS_TRACE_GROUP_AFI,           /**< AFI */
    VTSS_TRACE_GROUP_QOS,           /**< Quality of Service */
    VTSS_TRACE_GROUP_L2,            /**< Layer 2 */
    VTSS_TRACE_GROUP_L3,            /**< Layer 3 */
    VTSS_TRACE_GROUP_SECURITY,      /**< Security */
    VTSS_TRACE_GROUP_EVC,           /**< Ethernet Virtual Connections */
    VTSS_TRACE_GROUP_FDMA_NORMAL,   /**< (Obsoleted group) */
    VTSS_TRACE_GROUP_FDMA_IRQ,      /**< (Obsoleted group) */
    VTSS_TRACE_GROUP_REG_CHECK,     /**< (Obsoleted group) */
    VTSS_TRACE_GROUP_MPLS,          /**< MPLS */
    VTSS_TRACE_GROUP_HW_PROT,       /**< Hardware Protection */
    VTSS_TRACE_GROUP_HQOS,          /**< Hierarchical Quality of Service */
    VTSS_TRACE_GROUP_MACSEC,        /**< MACSEC control */
    VTSS_TRACE_GROUP_VCAP,          /**< VCAP */
    VTSS_TRACE_GROUP_OAM,           /**< OAM */
    VTSS_TRACE_GROUP_MRP,           /**< MRP */
    VTSS_TRACE_GROUP_TS,            /**< Timestamping */
    VTSS_TRACE_GROUP_CLOCK,         /**< Synce Clock */
    VTSS_TRACE_GROUP_EMUL,          /**< Emulation */

    VTSS_TRACE_GROUP_COUNT          /**< Number of trace groups */
} vtss_trace_group_t;

/** \brief Trace levels */
typedef enum
{
    VTSS_TRACE_LEVEL_NONE,  /**< No trace */
    VTSS_TRACE_LEVEL_ERROR, /**< Error trace */
    VTSS_TRACE_LEVEL_INFO,  /**< Information trace */
    VTSS_TRACE_LEVEL_DEBUG, /**< Debug trace */
    VTSS_TRACE_LEVEL_NOISE, /**< More debug information */

    VTSS_TRACE_LEVEL_COUNT  /**< Number of trace levels */
} vtss_trace_level_t;

/** \brief Trace group configuration */
typedef struct
{
    vtss_trace_level_t level[VTSS_TRACE_LAYER_COUNT]; /**< Trace level per layer */
} vtss_trace_conf_t;

/**
 * \brief Get trace configuration
 *
 * \param group [IN]  Trace group
 * \param conf [OUT]  Trace group configuration.
 *
 * \return Return code.
 **/
vtss_rc vtss_trace_conf_get(const vtss_trace_group_t  group,
                            vtss_trace_conf_t         *const conf);


/**
 * \brief Set trace configuration
 *
 * \param group [IN]  Trace group
 * \param conf [IN]   Trace group configuration.
 *
 * \return Return code.
 **/
vtss_rc vtss_trace_conf_set(const vtss_trace_group_t  group,
                            const vtss_trace_conf_t   *const conf);

/** \brief Attribute */
#if defined(__GNUC__) && (__GNUC__ > 2)
#define VTSS_ATTR_PRINTF(X, Y) __attribute__ ((format(printf,X,Y)))
#else
#define VTSS_ATTR_PRINTF(X, Y)
#endif


/**
 * \brief Trace callout function
 *
 * \param layer [IN]     Trace layer
 * \param group [IN]     Trace group
 * \param level [IN]     Trace level
 * \param file [IN]      File name string
 * \param line [IN]      Line number in file
 * \param function [IN]  Function name string
 * \param format [IN]    Print format string
 *
 * \return Nothing.
 **/
void vtss_callout_trace_printf(const vtss_trace_layer_t  layer,
                               const vtss_trace_group_t  group,
                               const vtss_trace_level_t  level,
                               const char                *file,
                               const int                 line,
                               const char                *function,
                               const char                *format,
                               ...) VTSS_ATTR_PRINTF(7, 8);

/**
 * \brief Trace hex-dump callout function
 *
 * \param layer [IN]     Trace layer
 * \param group [IN]     Trace group
 * \param level [IN]     Trace level
 * \param file [IN]      The file from where the trace were called.
 * \param line [IN]      The line from where the trace were called.
 * \param function [IN]  The function from where the trace were called.
 * \param byte_p [IN]    Pointer to start of area to print
 * \param byte_cnt [IN]  Number of bytes to print
 *
 * \return Nothing.
 **/
void vtss_callout_trace_hex_dump(const vtss_trace_layer_t  layer,
                                 const vtss_trace_group_t  group,
                                 const vtss_trace_level_t  level,
                                 const char                *file,
                                 const int                 line,
                                 const char                *function,
                                 const u8                  *byte_p,
                                 const int                 byte_cnt);

#if VTSS_OPT_DEBUG_PRINT

/** \brief Debug layer */
/* Debug layer */
typedef enum {
    VTSS_DEBUG_LAYER_ALL, /**< All layers */
    VTSS_DEBUG_LAYER_AIL, /**< Application Interface Layer */
    VTSS_DEBUG_LAYER_CIL  /**< Chip Interface Layer */
} vtss_debug_layer_t;

/** \brief Debug function group */
typedef enum {
    VTSS_DEBUG_GROUP_ALL,       /**< All groups */
    VTSS_DEBUG_GROUP_INIT,      /**< Initialization */
    VTSS_DEBUG_GROUP_MISC,      /**< Miscellaneous */
    VTSS_DEBUG_GROUP_PORT,      /**< Port configuration */
    VTSS_DEBUG_GROUP_PORT_CNT,  /**< Port counters */
    VTSS_DEBUG_GROUP_PHY,       /**< PHY */
    VTSS_DEBUG_GROUP_VLAN,      /**< VLAN */
    VTSS_DEBUG_GROUP_PVLAN,     /**< PVLAN */
    VTSS_DEBUG_GROUP_MAC_TABLE, /**< MAC address table */
    VTSS_DEBUG_GROUP_ACL,       /**< ACL */
    VTSS_DEBUG_GROUP_QOS,       /**< QoS */
    VTSS_DEBUG_GROUP_AGGR,      /**< Link aggregation */
    VTSS_DEBUG_GROUP_GLAG,      /**< Global link aggregation */
    VTSS_DEBUG_GROUP_STP,       /**< Spanning Tree */
    VTSS_DEBUG_GROUP_MIRROR,    /**< Mirroring */
    VTSS_DEBUG_GROUP_EVC,       /**< EVC */
    VTSS_DEBUG_GROUP_ERPS,      /**< ERPS */
    VTSS_DEBUG_GROUP_EPS,       /**< EPS */
    VTSS_DEBUG_GROUP_SR,        /**< Seamless Redundancy */
    VTSS_DEBUG_GROUP_PACKET,    /**< Packet control */
    VTSS_DEBUG_GROUP_FDMA,      /**< Obsoleted */
    VTSS_DEBUG_GROUP_TS,        /**< TS: TimeStamping */
    VTSS_DEBUG_GROUP_PHY_TS,    /**< PHY_TS: PHY TimeStamping */
    VTSS_DEBUG_GROUP_WM,        /**< WaterMarks */
    VTSS_DEBUG_GROUP_LRN,       /**< DEPRECATED. Use VTSS_DEBUG_GROUP_MAC_TABLE instead */
    VTSS_DEBUG_GROUP_IPMC,      /**< IP Multicast */
    VTSS_DEBUG_GROUP_STACK,     /**< Stacking */
    VTSS_DEBUG_GROUP_CMEF,      /**< Congestion Management */
    VTSS_DEBUG_GROUP_HOST,      /**< CE-MAX Host configuration */
    VTSS_DEBUG_GROUP_MPLS,      /**< MPLS */
    VTSS_DEBUG_GROUP_HW_PROT,   /**< HW Protection */
    VTSS_DEBUG_GROUP_HQOS,      /**< Hierarchical Quality of Service */
    VTSS_DEBUG_GROUP_VXLAT,     /**< VLAN Translation */
    VTSS_DEBUG_GROUP_OAM,       /**< OAM, incl. VOEs/VOP */
    VTSS_DEBUG_GROUP_MRP,       /**< Media Redundancy Protocol (MRP) */
    VTSS_DEBUG_GROUP_SER_GPIO,  /**< Serial GPIO configuration */
    VTSS_DEBUG_GROUP_L3,        /**< L3 services */
    VTSS_DEBUG_GROUP_AFI,       /**< Automatic Frame Injector */
    VTSS_DEBUG_GROUP_MACSEC,    /**< 802.1AE MacSec */
    VTSS_DEBUG_GROUP_SERDES,    /**< Serdes Macroes */
    VTSS_DEBUG_GROUP_KR,        /**< 5G/10G/25Base-KR */
    VTSS_DEBUG_GROUP_MUX,       /**< Mux mode */

    /* New groups are added above this line */
    VTSS_DEBUG_GROUP_COUNT      /**< Number of groups */
} vtss_debug_group_t;


/** \brief Special chip number value for showing information from all chips */
#define VTSS_CHIP_NO_ALL 0xffffffff

/** \brief Debug information structure */
typedef struct {
    vtss_debug_layer_t           layer;                           /**< Layer */
    vtss_debug_group_t           group;                           /**< Function group */
    vtss_chip_no_t               chip_no;                         /**< Chip number, multi-chip targets */
    BOOL                         port_list[VTSS_PORT_ARRAY_SIZE]; /**< Port list */
    BOOL                         full;                            /**< Full information dump */
    BOOL                         clear;                           /**< Clear counters */
    BOOL                         vml_format;                      /**< VML format register dump */
    BOOL                         has_action;                      /**< Action parameter is present */
    u32                          action;                          /**< Debug group depending action value */
    u32                          prm[10];                         /**< Parameters from user */
} vtss_debug_info_t;

/** \brief Debug printf function
 *
 * The signature is similar to that of printf(). However, the return value is
 * not used anywhere within the API.
 */
typedef int (*vtss_debug_printf_t)(const char *fmt, ...) VTSS_ATTR_PRINTF(1, 2);

/**
 * \brief Get default debug information structure
 *
 * \param info [OUT]  Debug information
 *
 * \return Return code.
 **/
vtss_rc vtss_debug_info_get(vtss_debug_info_t *const info);

/**
 * \brief Print default information
 *
 * \param inst [IN]   Target instance reference.
 * \param prntf [IN]  Debug printf function.
 * \param info [IN]   Debug information
 *
 * \return Return code.
 **/
vtss_rc vtss_debug_info_print(const vtss_inst_t         inst,
                              const vtss_debug_printf_t prntf,
                              const vtss_debug_info_t   *const info);
#endif // VTSS_OPT_DEBUG_PRINT

/* - API protection functions -------------------------------------- */

/** \brief API lock structure */
typedef struct {
    vtss_inst_t inst;     /**< Target instance reference */
    const char *function; /**< Function name */
    const char *file;     /**< File name */
    int        line;      /**< Line number */
} vtss_api_lock_t;

/**
 * \brief Lock API access
 *
 * \param lock [IN]  Lock information
*/
void vtss_callout_lock(const vtss_api_lock_t *const lock);

/**
 * \brief Unlock API access
 *
 * \param lock [IN]  Lock information
*/
void vtss_callout_unlock(const vtss_api_lock_t *const lock);

/** \brief API debug lock structure */
typedef struct {
    vtss_chip_no_t chip_no; /**< Chip number (if multi-chip instance). */
} vtss_debug_lock_t;

/**
 * \brief Debug lock API access
 *
 * \param inst [IN]  Target instance reference.
 * \param lock [IN]  Lock information
 *
 * \return Return code.
*/
vtss_rc vtss_debug_lock(const vtss_inst_t       inst,
                        const vtss_debug_lock_t *const lock);

/**
 * \brief Debug unlock API access
 *
 * \param inst [IN]  Target instance reference.
 * \param lock [IN]  Lock information
 *
 * \return Return code.
*/
vtss_rc vtss_debug_unlock(const vtss_inst_t inst,
                          vtss_debug_lock_t *const lock);

#if defined(VTSS_FEATURE_MISC)
/* - Direct register access (for debugging only) ------------------- */

/**
 * \brief Read value from target register.
 *
 * \param inst [IN]     Target instance reference.
 * \param chip_no [IN]  Chip number (if multi-chip instance).
 * \param addr [IN]     Address to read. Format depends on target.
 * \param value [OUT]   Register value.
 *
 * \return Return code.
 **/
vtss_rc vtss_reg_read(const vtss_inst_t    inst,
                      const vtss_chip_no_t chip_no,
                      const u32            addr,
                      u32                  *const value);


/**
 * \brief Write value to target register.
 *
 * \param inst [IN]     Target instance reference.
 * \param chip_no [IN]  Chip number (if multi-chip instance).
 * \param addr [IN]     Address to read. Format depends on target.
 * \param value [IN]    Register value.
 *
 * \return Return code.
 **/
vtss_rc vtss_reg_write(const vtss_inst_t    inst,
                       const vtss_chip_no_t chip_no,
                       const u32            addr,
                       const u32            value);


/**
 * \brief Read, modify and write value to target register.
 *
 * \param inst [IN]     Target instance reference.
 * \param chip_no [IN]  Chip number (if multi-chip instance).
 * \param addr [IN]     Address to read. Format depends on target.
 * \param value [IN]    Register value.
 * \param mask [IN]     Register mask, only bits enabled are changed.
 *
 * \return Return code.
 **/
vtss_rc vtss_reg_write_masked(const vtss_inst_t    inst,
                              const vtss_chip_no_t chip_no,
                              const u32            addr,
                              const u32            value,
                              const u32            mask);

/* - Secondary chip if ------------------- */

/**
 * \brief Clear EXT0-1 interrupt sticky bits on secondary chip.
 *
 * \param inst [IN]    Target instance reference.
 * \param ext [IN]     EXT number (0-1).
 *
 * \return Return code.
 **/
vtss_rc vtss_intr_sticky_clear(const vtss_inst_t    inst,
                               u32                  ext);

/* - Chip ID and revision ------------------------------------------ */

/** \brief Chip ID */
typedef struct
{
    u16  part_number;   /**< BCD encoded part number */
    u16  revision;      /**< Chip revision */
} vtss_chip_id_t;

/**
 * \brief Get chip ID and revision.
 *
 * \param inst [IN]     Target instance reference.
 * \param chip_id [IN]  Pointer to chip ID structure.
 *
 * \return Return code.
 **/
vtss_rc vtss_chip_id_get(const vtss_inst_t  inst,
                         vtss_chip_id_t     *const chip_id);


/* - Polling functions ---------------------------------------- */

/**
 * \brief Polling function called every second.
 *
 * \param inst [IN]  Target instance reference.
 *
 * \return Return code.
 **/
vtss_rc vtss_poll_1sec(const vtss_inst_t  inst);

/**
 * \brief Define event (interrupt) types relatesd to PTP in the switch chips
 *
 **/
typedef enum {
    VTSS_PTP_SYNC_EV =      (1 << 0), /*< PTP Synchronization pulse update */
    VTSS_PTP_EXT_SYNC_EV =  (1 << 1), /*< PTP External Synchronization input  (Sync 0 on Serval)*/
    VTSS_PTP_CLK_ADJ_EV =   (1 << 2), /*< PTP Clock adjustment updated */
    VTSS_PTP_TX_TSTAMP_EV = (1 << 3), /*< Tx timestamp udated (Jaguar and Serval only)*/
    VTSS_PTP_EXT_1_SYNC_EV =(1 << 4), /*< PTP External Synchronization 1 input (Serval only)*/
    VTSS_PTP_PIN_0_SYNC_EV =(1 << 5), /*< PTP External pin 0 synchronization (Jaguar2 only)*/
    VTSS_PTP_PIN_1_SYNC_EV =(1 << 6), /*< PTP External pin 1 synchronization (Jaguar2 only)*/
    VTSS_PTP_PIN_2_SYNC_EV =(1 << 7), /*< PTP External pin 2 synchronization (Jaguar2 only)*/
    VTSS_PTP_PIN_3_SYNC_EV =(1 << 8), /*< PTP External pin 3 synchronization (Jaguar2 only)*/
} vtss_ptp_event_type_t;

/**
 * \brief PTP polling function called at by interrupt or periodicly
 *
 * \param inst       [IN]  Target instance reference.
 * \param ev_mask    [OUT] Event type mask of active events
 *
 * \note The \e ev_mask parameter can be either a single event_type or
 * multiple event types (or \e VTSS_EVTYPE_ALL). If invoked by a
 * processor interrupt signal, the type of event to check for may be
 * narrowed in to specific events.
 *
 * \return Return code.
 **/
vtss_rc vtss_ptp_event_poll(const vtss_inst_t      inst,
                            vtss_ptp_event_type_t  *const ev_mask);

/**
 * \brief Enable PTP event generation for a specific event type
 *
 * \param inst     [IN] Target instance reference.
 * \param enable   [IN] Enable or disable events
 * \param ev_mask  [IN] Event type(s) to control (mask)
 *
 * \return Return code.
 **/
vtss_rc vtss_ptp_event_enable(const vtss_inst_t            inst,
                              const vtss_ptp_event_type_t  ev_mask,
                              const BOOL                   enable);

/**
 * \brief Define the dev_all event (interrupt) types
 *
 **/
typedef enum {
    VTSS_DEV_ALL_TX_TSTAMP_EV = (1 << 0), /*< Tx timestamp udated */
    VTSS_DEV_ALL_LINK_EV =      (1 << 1), /*< Link state changed */
} vtss_dev_all_event_type_t;

/**
 * \brief Define the dev_all polling types
 *
 **/
typedef enum {
    VTSS_DEV_ALL_POLL_ALL,          /*< Polling all chip */
    VTSS_DEV_ALL_POLL_PRIMARY,      /*< Polling primary chip */
    VTSS_DEV_ALL_POLL_SECONDARY,    /*< Polling secondary chip */
} vtss_dev_all_event_poll_t;

/**
 * \brief DEV_ALL polling function called at by interrupt or periodically
 *
 * \param inst      [IN] Target instance reference.
 * \param poll_type [IN] Polling type
 * \param ev_mask   [OUT] Event type mask array of active events for all ports - must be of size VTSS_PORT_ARRAY_SIZE
 *
 * \note The \e ev_mask parameter can be either a single event_type or
 * multiple event types (or \e VTSS_EVTYPE_ALL). If invoked by a
 * processor interrupt signal, the type of event to check for may be
 * narrowed in to specific events.
 *
 * \return Return code.
 **/
vtss_rc vtss_dev_all_event_poll(const vtss_inst_t                 inst,
                                const vtss_dev_all_event_poll_t   poll_type,
                                vtss_dev_all_event_type_t         *const ev_mask);

/**
 * \brief Enable DEV_ALL event generation for a specific event type
 *
 * \param inst     [IN] Target instance reference.
 * \param port_no  [IN] Port number.
 * \param enable   [IN] Enable or disable events.
 * \param ev_mask  [IN] Event type(s) to control (mask).
 *
 * \return Return code.
 **/
vtss_rc vtss_dev_all_event_enable(const vtss_inst_t                inst,
                                  const vtss_port_no_t             port_no,
                                  const vtss_dev_all_event_type_t  ev_mask,
                                  const BOOL                       enable);

#endif /* VTSS_FEATURE_MISC */

/* - GPIOs --------------------------------------------------------- */

#if defined(VTSS_ARCH_LUTON26) || defined(VTSS_ARCH_OCELOT)
/** \brief Number of GPIOs */
#undef VTSS_GPIOS
#define VTSS_GPIOS         32
#endif /* VTSS_ARCH_LUTON26/SERVAL */

#if defined(VTSS_ARCH_JAGUAR_2)
/** \brief Number of GPIOs */
#undef VTSS_GPIOS
#define VTSS_GPIOS         64
#endif /* VTSS_ARCH_JAGUAR_2 */

#if defined(VTSS_ARCH_SPARX5)
/** \brief Number of GPIOs */
#undef VTSS_GPIOS
#define VTSS_GPIOS         64
#endif /* VTSS_ARCH_SPARX5 */

#if defined(VTSS_ARCH_LAN966X)
/** \brief Number of GPIOs */
#undef VTSS_GPIOS
#define VTSS_GPIOS         78
#endif /* VTSS_ARCH_LAN966X */

/** \brief GPIO number */
typedef u32 vtss_gpio_no_t;

#if defined(VTSS_GPIOS)
/** \brief GPIO start number */
#define VTSS_GPIO_NO_START 0

/** \brief GPIO end number */
#define VTSS_GPIO_NO_END   (VTSS_GPIO_NO_START+VTSS_GPIOS)

/**
 * \brief GPIO configured mode
 **/
typedef enum
{
    VTSS_GPIO_OUT,    /**< Output enabled */
    VTSS_GPIO_IN,     /**< Input enabled */
    VTSS_GPIO_IN_INT, /**< Input enabled, IRQ gated */
    VTSS_GPIO_ALT_0,  /**< Alternate function 0 */
    VTSS_GPIO_ALT_1,  /**< Alternate function 1 */
    VTSS_GPIO_ALT_2,  /**< Alternate function 2 */
    VTSS_GPIO_ALT_3,  /**< Alternate function 3 */
    VTSS_GPIO_ALT_4,  /**< Alternate function 4 */
    VTSS_GPIO_ALT_5,  /**< Alternate function 5 */
} vtss_gpio_mode_t;

/**
 * \brief Set GPIO mode.
 *
 * \param inst [IN]     Target instance reference.
 * \param chip_no [IN]  Chip number (if multi-chip instance).
 * \param gpio_no [IN]  GPIO pin number.
 * \param mode [IN]     GPIO mode.
 *
 * \return Return code.
 **/
vtss_rc vtss_gpio_mode_set(const vtss_inst_t      inst,
                           const vtss_chip_no_t   chip_no,
                           const vtss_gpio_no_t   gpio_no,
                           const vtss_gpio_mode_t mode);

/**
 * \brief Set GPIO direction to input or output.
 *
 * \param inst [IN]     Target instance reference.
 * \param chip_no [IN]  Chip number (if multi-chip instance).
 * \param gpio_no [IN]  GPIO pin number.
 * \param output [IN]   TRUE if output, FALSE if input.
 *
 * \return Return code.
 *
 * \em DEPRECATED. Use vtss_gpio_mode_set() instead.
 **/
vtss_rc vtss_gpio_direction_set(const vtss_inst_t     inst,
                                const vtss_chip_no_t  chip_no,
                                const vtss_gpio_no_t  gpio_no,
                                const BOOL            output);



/**
 * \brief Read from GPIO input pin.
 *
 * \param inst [IN]     Target instance reference.
 * \param chip_no [IN]  Chip number (if multi-chip instance).
 * \param gpio_no [IN]  GPIO pin number.
 * \param value [OUT]   TRUE if pin is high, FALSE if it is low.
 *
 * \return Return code.
 **/
vtss_rc vtss_gpio_read(const vtss_inst_t     inst,
                       const vtss_chip_no_t  chip_no,
                       const vtss_gpio_no_t  gpio_no,
                       BOOL                  *const value);



/**
 * \brief Write to GPIO output pin.
 *
 * \param inst [IN]     Target instance reference.
 * \param chip_no [IN]  Chip number (if multi-chip instance).
 * \param gpio_no [IN]  GPIO pin number.
 * \param value [IN]    TRUE to set pin high, FALSE to set pin low.
 *
 * \return Return code.
 **/
vtss_rc vtss_gpio_write(const vtss_inst_t     inst,
                        const vtss_chip_no_t  chip_no,
                        const vtss_gpio_no_t  gpio_no,
                        const BOOL            value);

/**
 * \brief Get GPIO event indication
 *
 * \param inst [IN]         Target instance reference.
 * \param chip_no [IN]      Chip number (if multi-chip instance).
 * \param events [OUT]      Event indication for each GPIO pin - must point to VTSS_GPIOS of BOOL.
 *
 * \return Return code.
 **/
vtss_rc vtss_gpio_event_poll(const vtss_inst_t        inst,
                             const vtss_chip_no_t     chip_no,
                             BOOL                     *const events);

/**
 * \brief Set GPIO event enable
 *
 * \param inst [IN]         Target instance reference.
 * \param chip_no [IN]      Chip number (if multi-chip instance).
 * \param gpio_no [IN]      GPIO pin number.
 * \param enable  [IN]      Enable or disable event.
 *
 * \return Return code.
 **/
vtss_rc vtss_gpio_event_enable(const vtss_inst_t       inst,
                               const vtss_chip_no_t    chip_no,
                               const vtss_gpio_no_t    gpio_no,
                               BOOL                    enable);

// The GPIO functionality identifier
typedef enum {
    VTSS_GPIO_FUNC_PTP_0,   // PTP 0 GPIO functionality
    VTSS_GPIO_FUNC_PTP_1,   // PTP 1 GPIO functionality
    VTSS_GPIO_FUNC_PTP_2,   // PTP 2 GPIO functionality
    VTSS_GPIO_FUNC_PTP_3,   // PTP 3 GPIO functionality
    VTSS_GPIO_FUNC_PTP_4    // PTP 4 GPIO functionality
} vtss_gpio_func_t;

// GPIO functionality ALT mode
typedef enum
{
    VTSS_GPIO_FUNC_ALT_0,  // Alternate function 0
    VTSS_GPIO_FUNC_ALT_1,  // Alternate function 1
    VTSS_GPIO_FUNC_ALT_2   // Alternate function 2
} vtss_gpio_func_alt_t;

// GPIO functionality information
typedef struct {
    vtss_gpio_no_t       gpio_no;    // GPIO pin number.
    vtss_gpio_func_alt_t alt;        // GPIO ALT function.
} vtss_gpio_func_info_t;

/**
 * \brief Get the GPIO information that is board specific for this GPIO functionality
 *
 * \param gpio_func [IN]    GPIO functionality identifier.
 * \param info [OUT]        GPIO pin functionality information.
 *
 * \return Return code.
 **/
typedef vtss_rc (*vtss_gpio_func_info_get_t)(const vtss_inst_t       inst,
                                             const vtss_gpio_func_t  gpio_func,
                                             vtss_gpio_func_info_t   *const info);

#endif /* GPIOS */

/* - Serial GPIO control ---------------------------------------------------- */

#if defined(VTSS_FEATURE_SERIAL_GPIO)

#if defined(VTSS_ARCH_LUTON26) || defined(VTSS_ARCH_OCELOT) || defined(VTSS_ARCH_SERVAL_T) || defined(VTSS_ARCH_LAN966X)
/** \brief Number of serial GPIO groups */
#define VTSS_SGPIO_GROUPS 1
#endif /* VTSS_ARCH_LUTON26/SERVAL/SERVAL_T */

#if defined(VTSS_ARCH_JAGUAR_2_B) || defined(VTSS_ARCH_JAGUAR_2_C)
/** \brief Number of serial GPIO groups */
#define VTSS_SGPIO_GROUPS 3
#endif /* VTSS_ARCH_JAGUAR_2_B/C */

#if defined(VTSS_ARCH_SPARX5)
/** \brief Number of serial GPIO groups */
#define VTSS_SGPIO_GROUPS  3
#endif /* VTSS_ARCH_SPARX5 */

/** \brief Serial GPIO group */
typedef u32 vtss_sgpio_group_t;

/** \brief Number of serial GPIO ports */
#define VTSS_SGPIO_PORTS 32

/** \brief SGPIO output mode */
typedef enum
{
    VTSS_SGPIO_MODE_OFF,            /**< Off */
    VTSS_SGPIO_MODE_ON,             /**< On */
    VTSS_SGPIO_MODE_0,              /**< Mode 0 */
    VTSS_SGPIO_MODE_1,              /**< Mode 1 */
    VTSS_SGPIO_MODE_0_ACTIVITY,     /**< Mode 0 when link activity */
    VTSS_SGPIO_MODE_1_ACTIVITY,     /**< Mode 1 when link activity */
    VTSS_SGPIO_MODE_0_ACTIVITY_INV, /**< Mode 0 when link activity, inversed polarity */
    VTSS_SGPIO_MODE_1_ACTIVITY_INV, /**< Mode 1 when link activity, inversed polarity */
    VTSS_SGPIO_MODE_NO_CHANGE       /**< Do not change the SGPIO mode (the mode is controlled elsewhere) */
} vtss_sgpio_mode_t;

/** \brief SGPIO blink mode */
typedef enum
{
    VTSS_SGPIO_BMODE_TOGGLE, /**< Burst toggle (mode 1 only) */
    VTSS_SGPIO_BMODE_0_625,  /**< 0.625 Hz (mode 0 only) */
    VTSS_SGPIO_BMODE_1_25,   /**< 1.25 Hz */
    VTSS_SGPIO_BMODE_2_5,    /**< 2.5 Hz */
    VTSS_SGPIO_BMODE_5       /**< 5 Hz */
} vtss_sgpio_bmode_t;

/** \brief SGPIO port configuration */
typedef struct
{
    BOOL              enabled; /**< Port enabled/disabled */
    vtss_sgpio_mode_t mode[4]; /**< Mode for each bit */
    BOOL              int_pol_high[4];  /**< SGPIO interrupt polarity for each bit - TRUE - Interrupt when SGPIO pin high, FALSE - Interrupt when SGPIO pin low. */
} vtss_sgpio_port_conf_t;

/** \brief SGPIO configuration for a group */
typedef struct
{
    vtss_sgpio_bmode_t     bmode[2];                     /**< Blink mode 0 and 1 */
    u8                     bit_count;                    /**< Bits enabled per port, 1-4 */
    vtss_sgpio_port_conf_t port_conf[VTSS_SGPIO_PORTS];  /**< Port configuration */
} vtss_sgpio_conf_t;

/**
 * \brief Get SGPIO configuration
 *
 * \param inst [IN]     Target instance reference.
 * \param chip_no [IN]  Chip number (if multi-chip instance).
 * \param group [IN]    SGPIO group.
 * \param conf [OUT]    SGPIO configuration.
 *
 * \return Return code.
 **/
vtss_rc vtss_sgpio_conf_get(const vtss_inst_t        inst,
                            const vtss_chip_no_t     chip_no,
                            const vtss_sgpio_group_t group,
                            vtss_sgpio_conf_t        *const conf);

/**
 * \brief Set SGPIO configuration
 *
 * \param inst [IN]     Target instance reference.
 * \param chip_no [IN]  Chip number (if multi-chip instance).
 * \param group [IN]    SGPIO group.
 * \param conf [IN]     SGPIO configuration.
 *
 * \return Return code.
 **/
vtss_rc vtss_sgpio_conf_set(const vtss_inst_t        inst,
                            const vtss_chip_no_t     chip_no,
                            const vtss_sgpio_group_t group,
                            const vtss_sgpio_conf_t  *const conf);

/** \brief SGPIO read data for a port */
typedef struct
{
    BOOL value[4]; /**< Data for each and bit */
} vtss_sgpio_port_data_t;

/**
 * \brief Read SGPIO data
 *
 * \param inst [IN]     Target instance reference.
 * \param chip_no [IN]  Chip number (if multi-chip instance).
 * \param group [IN]    SGPIO group.
 * \param data [OUT]    SGPIO data.
 *
 * \return Return code.
 **/
vtss_rc vtss_sgpio_read(const vtss_inst_t        inst,
                        const vtss_chip_no_t     chip_no,
                        const vtss_sgpio_group_t group,
                        vtss_sgpio_port_data_t   data[VTSS_SGPIO_PORTS]);
/**
 * \brief Get SGPIO event indication
 *
 * \param inst [IN]          Target instance reference.
 * \param chip_no [IN]       Chip number (if multi-chip instance).
 * \param group [IN]         SGPIO group.
 * \param bit [IN]           SGPIO port bit (0-3).
 * \param events [OUT]       Event indication for each port for the selected bit - must point to VTSS_SGPIO_PORTS of BOOL.
 *
 * \return Return code.
 **/
vtss_rc vtss_sgpio_event_poll(const vtss_inst_t        inst,
                              const vtss_chip_no_t     chip_no,
                              const vtss_sgpio_group_t group,
                              const u32                bit,
                              BOOL                     *const events);

/**
 * \brief Get SGPIO event enable
 *
 * \param inst [IN]          Target instance reference.
 * \param chip_no [IN]       Chip number (if multi-chip instance).
 * \param group [IN]         SGPIO group.
 * \param port [IN]          SGPIO port (0-31).
 * \param bit [IN]           SGPIO port bit (0-3).
 * \param enable [IN]        Event for each port for the selected bit is enabled or disabled.
 *
 * \return Return code.
 **/
vtss_rc vtss_sgpio_event_enable(const vtss_inst_t        inst,
                                const vtss_chip_no_t     chip_no,
                                const vtss_sgpio_group_t group,
                                const vtss_port_no_t     port,
                                const u32                bit,
                                BOOL                     enable);

#endif /* VTSS_FEATURE_SERIAL_GPIO */


#if defined(VTSS_FEATURE_INTERRUPTS)

/**
 * \brief Configure interrupt.
 * \param inst [IN] Target instance reference.
 * \param mask [IN] Interrupt mask - Configures the interrupts for the bits set in the mask.
 * \param polarity [IN] Polarity - Interrupt polarity.
 * \param enable [IN] Enable   - 1 = enable, 0 = disable.
 *
 * \return Return code.
**/
vtss_rc vtss_intr_cfg(const vtss_inst_t       inst,
                      const u32               mask,
                      const BOOL              polarity,
                      const BOOL              enable);


/**
\brief Interrupt source structure.
*/
typedef struct {
    BOOL  link_change[VTSS_PORT_ARRAY_SIZE]; /**< Applies to XAUI, 100FX and 1000X ports */
} vtss_intr_t;

/**
 * \brief Set the interrupt mask.
 * \param inst [IN] Target instance reference.
 * \param mask [IN] Pointer to mask structure.
 *
 * \return Return code.
**/
vtss_rc vtss_intr_mask_set(const vtss_inst_t             inst,
                           vtss_intr_t *mask);

/**
 * \brief Get the interrupt status for all enabled sources.
 *        The interrupt status bit is cleared by the function
 *
 * \param inst [IN] Target instance reference.
 * \param status [OUT] Pointer to a structure with status of all enabled interrupt sources.
 *
 * \return Return code.
 **/
vtss_rc vtss_intr_status_get(const vtss_inst_t             inst,
                             vtss_intr_t *status);

/**
 * \brief This vil negate polarity on fast link fail detection signals when active
 *        This is only intended to be used on Luton26 RevB as a work around for the
 *        Atom PHY interrupt always active problem
 *
 * \param inst [IN] Target instance reference.
 *
 * \return Return code.
 **/
vtss_rc  vtss_intr_pol_negation(const vtss_inst_t   inst);

#endif /* VTSS_FEATURE_INTERRUPTS */

#ifdef VTSS_FEATURE_IRQ_CONTROL

/**
 * \brief Interrupt sources.
 */
typedef enum
{
    VTSS_IRQ_XTR,               /**< Frame Extraction Ready (register-based) */
    VTSS_IRQ_FDMA_XTR,          /**< Frame Extraction Ready (manual DMA-based) */
    VTSS_IRQ_SOFTWARE,          /**< Software IRQ */
    VTSS_IRQ_PTP_RDY,           /**< PTP Timestamp Ready */
    VTSS_IRQ_PTP_SYNC,          /**< PTP Synchronization IRQ */
    VTSS_IRQ_EXT0,              /**< EXT0 IRQ */
    VTSS_IRQ_EXT1,              /**< EXT1 IRQ */
    VTSS_IRQ_OAM,               /**< OAM IRQ */
    VTSS_IRQ_SGPIO,             /**< Serial GPIO IRQ */
    VTSS_IRQ_SGPIO2,            /**< Serial GPIO2 IRQ */
    VTSS_IRQ_DPLL,              /**< DPLL */
    VTSS_IRQ_GPIO,              /**< GPIO */
    VTSS_IRQ_DEV_ALL,           /**< Device (port) IRQ */
    VTSS_IRQ_CU_PHY_0,          /**< LAN966X internal PHY 0 */
    VTSS_IRQ_CU_PHY_1,          /**< LAN966X internal PHY 1 */
    VTSS_IRQ_KR_SD10G_0,        /**< KR IRQ 0 */
    VTSS_IRQ_KR_SD10G_1,        /**< KR IRQ 1 */
    VTSS_IRQ_KR_SD10G_2,        /**< KR IRQ 2 */
    VTSS_IRQ_KR_SD10G_3,        /**< KR IRQ 3 */
    VTSS_IRQ_KR_SD10G_4,        /**< KR IRQ 4 */
    VTSS_IRQ_KR_SD10G_5,        /**< KR IRQ 5 */
    VTSS_IRQ_KR_SD10G_6,        /**< KR IRQ 6 */
    VTSS_IRQ_KR_SD10G_7,        /**< KR IRQ 7 */
    VTSS_IRQ_KR_SD10G_8,        /**< KR IRQ 8 */
    VTSS_IRQ_KR_SD10G_9,        /**< KR IRQ 9 */
    VTSS_IRQ_KR_SD10G_10,       /**< KR IRQ 10 */
    VTSS_IRQ_KR_SD10G_11,       /**< KR IRQ 11 */
    VTSS_IRQ_KR_SD10G_12,       /**< KR IRQ 12 */
    VTSS_IRQ_KR_SD10G_13,       /**< KR IRQ 13 */
    VTSS_IRQ_KR_SD10G_14,       /**< KR IRQ 14 */
    VTSS_IRQ_KR_SD10G_15,       /**< KR IRQ 15 */
    VTSS_IRQ_KR_SD10G_16,       /**< KR IRQ 16 */
    VTSS_IRQ_KR_SD10G_17,       /**< KR IRQ 17 */
    VTSS_IRQ_KR_SD10G_18,       /**< KR IRQ 18 */
    VTSS_IRQ_KR_SD10G_19,       /**< KR IRQ 19 */

    VTSS_IRQ_MAX,               /**< Maximum IRQ Source - MUST be the last in this enum*/
} vtss_irq_t;

/**
 * \brief Interrupt configuration options.
 */
typedef struct {
    BOOL external;               /**< Redirect to external IRQ */
    u8   destination;            /**< IRQ destination index */
} vtss_irq_conf_t;

/**
 * \brief Interrupt status structure.
 */
typedef struct {
    u32 active;         /**< Bitmap for pending IRQs (VTSS_IRQ_xxx) */
    u32 raw_ident;      /**< RAW (target dependentant) bitmap for active pending IRQs */
    u32 raw_status;     /**< RAW (target dependentant) bitmap for all pending IRQs */
    u32 raw_mask;       /**< RAW (target dependentant) bitmap for IRQs mask */
} vtss_irq_status_t;

/**
 * \brief Get IRQ configuration
 *
 * \param inst [IN]     Target instance reference.
 * \param irq  [IN]     Interrupt source.
 * \param conf [OUT]    IRQ configuration.
 *
 * \return Return code.
 **/
vtss_rc  vtss_irq_conf_get(const vtss_inst_t inst,
                           const vtss_irq_t irq,
                           vtss_irq_conf_t *conf);

/**
 * \brief Set IRQ configuration
 *
 * \param inst [IN]     Target instance reference.
 * \param irq  [IN]     Interrupt source.
 * \param conf [IN]     IRQ configuration.
 *
 * \return Return code.
 **/
vtss_rc  vtss_irq_conf_set(const vtss_inst_t inst,
                           const vtss_irq_t irq,
                           const vtss_irq_conf_t *const conf);

/**
 * \brief Get IRQ status (active sources), mask current sources
 *
 * \param inst   [IN]   Target instance reference.
 * \param status [OUT]  IRQ status.
 *
 * \return Return code.
 **/
vtss_rc  vtss_irq_status_get_and_mask(const vtss_inst_t inst,
                                      vtss_irq_status_t *status);

/**
 * \brief Control a specific interrupt source
 *
 * \param inst   [IN]   Target instance reference.
 * \param irq    [IN]   Interrupt source.
 * \param enable [IN]   Enable or disable source.
 *
 * \return Return code.
 **/
vtss_rc  vtss_irq_enable(const vtss_inst_t inst,
                         const vtss_irq_t irq,
                         BOOL enable);

#endif /* VTSS_FEATURE_IRQ_CONTROL */


/* - API tod functions -------------------------------------- */

/**
 * \brief Get the current hw nanosec time
 *  This function is called from interrupt
 * \returns actual ns counter
 */
u32 vtss_tod_get_ns_cnt(void);

/**
 * \brief If the actual HW does not support time stamping, an external callback
 * function can be set up to do the work.
 * \returns actual ns counter.
 */
typedef u32 (*tod_get_ns_cnt_cb_t)(void);  /* Get ns Counter callback  */

/**
 * \brief Set an external hw nanosec read function.
 *
 * \param cb pointer to callback function
 */
void vtss_tod_set_ns_cnt_cb(tod_get_ns_cnt_cb_t cb);

/**
 * vtss_os_timestamp_t
 * VTSS_OS_TIMESTAMP()
 *   These two provides a mean to have the API timestamp events for use
 *   by the application. It is up to the platform specific code to
 *   implement the actual functions to obtain the timestamp.
 *   The implementation *must* be callable from interrupt context, so no
 *   implicit waits or sleeps are allowed.
 */
typedef struct {
    u32 hw_cnt; /**< hardware counter */
} vtss_os_timestamp_t;
#define VTSS_OS_TIMESTAMP(timestamp)                                    \
  do {                                                                  \
    /* Currently no need to lock scheduler, since it's only          */ \
    /* called from a function, where the sceduler is already locked. */ \
    /* cyg_scheduler_lock(__FILE__, __LINE__); */                                         \
    (timestamp)->hw_cnt = vtss_tod_get_ns_cnt();                        \
    /* cyg_scheduler_unlock(__FILE__, __LINE__); */                                       \
  } while(0); /**< VTSS_OS_TIMESTAMP() provides the implementation that will fill in the timestamp. */


/* - Fan control functions -------------------------------------- */
#if defined(VTSS_FEATURE_FAN)

#if defined(VTSS_FEATURE_TEMP_SENSOR)
/**
 * \brief Initialize the temperature sensor
 *
 * \param inst [IN]        Target instance reference
 * \param enable [IN]       Set to true if sensor shall be active else false
 *
 * \return Return code.
 **/
vtss_rc vtss_temp_sensor_init(const vtss_inst_t inst,
                              const BOOL enable);

/**
 * \brief Read temperature sensor value
 *
 * \param inst [IN]        Target instance reference
 * \param temperature [OUT]      Temperature from sensor (range from -46 to 135 degC)
 *
 * \return Return code.
 **/

vtss_rc vtss_temp_sensor_get(const vtss_inst_t     inst,
                             i16                   *temperature);
#endif

/** \brief FAN PWM frequency */
typedef enum
{
    VTSS_FAN_PWM_FREQ_25KHZ,
    VTSS_FAN_PWM_FREQ_120HZ,
    VTSS_FAN_PWM_FREQ_100HZ,
    VTSS_FAN_PWM_FREQ_80HZ,
    VTSS_FAN_PWM_FREQ_60HZ,
    VTSS_FAN_PWM_FREQ_40HZ,
    VTSS_FAN_PWM_FREQ_20HZ,
    VTSS_FAN_PWM_FREQ_10HZ
} vtss_fan_pwd_freq_t;

/** \brief FAN Types  */
typedef enum
{
    VTSS_FAN_2_WIRE_TYPE,
    VTSS_FAN_3_WIRE_TYPE,
    VTSS_FAN_4_WIRE_TYPE
} vtss_fan_type_t;


/** \brief Maximum fan speed level (Fan runs at full speed) */
#define VTSS_FAN_SPEED_MAX 0x255
/** \brief Minimum fan speed level (Fan is OFF) */
#define VTSS_FAN_SPEED_MIN 0x0


/** \brief Fan specifications */
typedef struct
{
    vtss_fan_pwd_freq_t fan_pwm_freq;      /**< Fan PWM frequency*/
    BOOL                fan_low_pol;       /**< Fan polarity of the PWM output. TRUE = PWM is logic 0 when on. FALSE = PWM is logic 1 when on */
    BOOL                fan_open_col;      /**< PWM output is open collector if TRUE.*/
    vtss_fan_type_t     type;              /**< 2,3 or 4 wire fan type*/
    u32                 ppr;               /**< Pulses per rotation. Only valid for 3 and 4 wire fans */
} vtss_fan_conf_t;


/**
 * \brief Get the number of fan rotations
 *
 * \param inst [IN]       Target instance reference
 * \param fan_spec [IN]   Fan specification
 * \param rotation_count [OUT] Number of fan rotation countered for the last second.
 *
 * \return Return code.
 **/
vtss_rc vtss_fan_rotation_get(const vtss_inst_t inst,
                              vtss_fan_conf_t   *const fan_spec,
                              u32               *rotation_count);



/**
 * \brief Set fan cool level (Duty cycle)
 *
 * \param inst [IN]       Target instance reference
 * \param lvl  [IN]       Level. 0 = Fan off, 255 = fan fully on
 *
 * \return Return code.
**/
vtss_rc vtss_fan_cool_lvl_set(const vtss_inst_t     inst,
                              u8 lvl);


/**
 * \brief Initialise fan controller)
 *
 * \param inst [IN]    Target instance reference
 * \param spec [IN]    Fan specifications
 *
 * \return Return code.
**/
vtss_rc vtss_fan_controller_init(const vtss_inst_t     inst,
                                 const vtss_fan_conf_t *const spec);



/**
 * \brief Get fan cool level (Duty cycle)
 *
 * \param inst [IN]       Target instance reference
 * \param lvl  [IN]       Level. 0 = Fan off, 255 = fan fully on
 *
 * \return Return code.
**/
vtss_rc vtss_fan_cool_lvl_get(const vtss_inst_t     inst,
                              u8 * lvl);


#endif /* VTSS_FEATURE_FAN */

/* - EEE functions -------------------------------------- */
#ifdef VTSS_FEATURE_EEE
/** \brief EEE port configuration */
typedef struct
{
    BOOL eee_ena;          /**< Enable EEE                                                                                                                                                       */
    u8   eee_fast_queues;  /**< Queues set in this mask will activate egress path as soon as any data is available. Vector for enabling fast queues. bit 0 = queue 0, bit 1 = queue 1 and so on. */
    u16  tx_tw;            /**< Time from path is activated until frame transmission restarted.                                                                                                  */
    u8   lp_advertisement; /**< Link partner EEE advertisement. Bit 0 = Link partner advertises 100BASE-T capability. Bit 1 = Link partner advertises 1000BASE-T capability.                     */

    BOOL optimized_for_power; /**< EEE can be optimized for either most power savings or least traffic latency */
} vtss_eee_port_conf_t;

/**
 * \brief Set EEE configuration
 *
 * \param inst     [IN] Target instance reference
 * \param port_no  [IN] Port number
 * \param eee_conf [IN] EEE configuration
 *
 * \return Return code.
 **/
vtss_rc vtss_eee_port_conf_set(const vtss_inst_t          inst,
                               const vtss_port_no_t       port_no,
                               const vtss_eee_port_conf_t *const eee_conf);

#endif /* VTSS_FEATURE_EEE */

/**
 * \brief Get general purpose data pointer
 *
 * \param inst       [IN]  Target instance reference.
 * \param data       [OUT] Pointer data

 * \return Return code.
 *
 **/
vtss_rc vtss_misc_appdata_get(const vtss_inst_t        inst,
                              void **data);


/**
 * \brief Set general purpose data pointer
 *
 * \param inst       [IN]  Target instance reference.
 * \param data       [IN]  Pointer data

 * \return Return code.
 *
 **/
vtss_rc vtss_misc_appdata_set(const vtss_inst_t        inst,
                              void *data);

/**
 * ============================================================================
 * Symreg
 * ============================================================================
 **/

/** \brief Symbolic descriptiopn of a register. */
typedef struct {
    const char      *name;       /**< Name of register */
    unsigned long   addr;        /**< Address of register */
    unsigned long   repl_cnt;    /**< Replication count of register */
    unsigned long   repl_width;  /**< Replication width of register */
} vtss_symreg_reg_t;

/** \brief Symbolic descriptiopn of a register group. */
typedef struct {
    const char         *name;       /**< Name of register group */
    unsigned long      base_addr;   /**< Base address of register group */
    unsigned long      repl_cnt;    /**< Replication count of register group */
    unsigned long      repl_width;  /**< Replication width of register group */
    vtss_symreg_reg_t const *regs;  /**< Pointer to symbolic registers (null terminated) */
} vtss_symreg_reggrp_t;

/** \brief Symbolic descriptiopn of a register target. */
typedef struct {
    const char            *name;          /**< Name of register target */
    int                   repl_number;    /**< Target instance number */
    unsigned long         tgt_id;         /**< Target ID */
    unsigned long         base_addr;      /**< Base address */
    vtss_symreg_reggrp_t const *reggrps;  /**< Pointer to symbolic register groups (null terminated) */
} vtss_symreg_target_t;

/** \brief Symbolic register base data. */
typedef struct {
    const vtss_symreg_target_t *targets;           /**< Pointer to targets (not null terminated) */
    unsigned long               targets_cnt;       /**< Number of targets */
    unsigned long               io_origin1_offset; /**< IO register offset */
    unsigned long               repl_cnt_max;      /**< Highest number of replications */
    unsigned long               name_len_max;      /**< Max name length */
} vtss_symreg_data_t;

/**
 * \brief Get symbolic register data.
 *
 * \param inst       [IN]  Target instance reference.
 * \param data       [OUT] data

 * \return Return code.
 *
 **/
vtss_rc vtss_symreg_data_get(const vtss_inst_t   inst,
                             vtss_symreg_data_t *const data);

#ifdef __cplusplus
}
#endif
#endif /* VTSS_MISC_API_H_ */
:@byteposiÞ:	@str"#ifndef _VTSS_MISC_API_H_
:@line_cacheo:Parslet::Source::LineCache:@line_endse:!Parslet::Source::RangeSearch[iPipiqiriviiiÙiÝiÞiøiii/iJi]ijiqiriii¡iáiiiPifigiiiiÑi
iBi}i­iìi iTiiÒiiNii½iýiIiiµiåiiNii¼i½i iii2i?iAiniiÔi	i?	i@	i{	i	i	iº	iÉ	iË	i
i4
i5
i9
i[
i^
i
i±
i´
iÌ
iÑ
iiRiSiTiXizi}iiÐiÓiëiði-iqirii²iöiüii"i#i$i(iIiLiqii»iåii@imipiiiÉi	iIiiÈiiNiiii¹i¼iáii+ioi³iûi6ihikiiiÆiiJiiÍiiWiii·i¸iÒiäiói i^ii«i¬iÏiÞiiHi~i¹iïiiHivi°iÜiiAii·iéiiBiniªiáiiLiiÀiiPii¿ii.idi¬iåi!iii«ißi iWiiÇiøiùi(iaiwixiyiÈiìiíi i( ix iÑ i;!i!iï!iH"i«"i#i~#iÝ#iò#ió#i$i$ie$i$i$iß$ià$iä$i%i%iA%iD%i\%ia%i%i%i¢%iÆ%iÉ%iú%i'&iO&iR&ij&io&i­&iì&i2'iQ'iR'i'i'i¼'iÍ'i	(i9(ie(i(i¦(i§(i«(iÅ(iÈ(iî(iñ(i,)i-)i1)iM)iP)iv)iy)i¶)i·)iÞ)iï)i9*iN*iO*iS*is*iv*i¦*iÌ*iÏ*iç*iê*i +i^+i_+ic+i+i+i¸+iÞ+iá+iù+iü+i.,ih,ii,i,iÐ,iÑ,iÕ,i -i-i6-it-i·-iß-iâ-iú-iÿ-i0.id.i.iÏ.iÐ.iÑ.iÕ.iÿ.i/i5/is/i¶/iÞ/iá/iù/iþ/i00ie0i0iË0iÌ0iÍ0iÑ0i1i1iB1i1iÃ1ië1i12i42iL2iQ2i2iÆ2iÿ2i93is3it3i¢3i£3i§3iç3iê3i4iE4iH4i`4ie4i4iÙ4iÚ4i"5i#5i95iH5iJ5i5i°5iÂ5iÃ5iÇ5ië5iî5i!6iW6iZ6ir6iw6i©6iæ6iç6iè6i+7i,7i07i`7ic7i7i7i®7i³7iä7iå7ié7i68i98i>8iM8i8iþ8iH9i¡9i :i^:i¼:i;ix;i;i;i;iÚ;iÝ;i<iO<iR<i<iÚ<i=iB=iE=i]=ib=i=iß=ià=iä=i$>i'>iZ>i>iÃ>iÆ>iÞ>iã>i$?ih?i¬?i­?i±?iæ?ié?iî?iý?iB@i@i£@i¤@i¨@iÓ@iÖ@iÛ@iê@i&AifAi¨AiÅAiÆAiÊAiBiBiKBiqBiçBiêBi1CirCi·CiÚCiÝCiõCiúCiBDiDiâDiãDiçDi+Ei.EiaEiEi¸EiñEiôEiFiFiZFi¦FiòFi>Gi?Gi^Gi_Gi§Gi¨GiäGiHiHi2HiXHiYHiyHiHi©HiÇHiçHièHiIi$Ii6IiTIirIisIiIi°IiÂIiàIiÿIi JiJi6Ji7JiOJioJiJiJi«JiæJiçJiëJi
KiKiKiKiKKiwKi®KiáKiLiGLizLi­LiàLiôLiõLiùLiMiMiHMiMi¯MiÒMiÕMiíMiòMi*NieNi NiÙNiÚNiÞNiOiOiEOiOi¬OiäOiçOiÿOiPi7Pi<PixPi·PiöPi5Qi6Qi7Qi8Qi<Qi`QicQiQiÔQiýQi>RiARiYRi^RiRiÇRiýRi9Si:Si;Si<Si@SidSigSiSiØSiTiETiHTi`TieTiTiÐTiUi=Ui>UiBUifUiiUi UiâUiEViHVi`VieVi¡ViàVi&Wi'Wi+WiKWiNWiWiÇWiôWi)Xi,XiDXiIXiXiÆXiYiFYiGYilYi{Yi³YiëYi#Zi[ZiZi§Zi¨ZiÇZiÔZiÖZi	[i<[io[i[i[iª[i»[iô[i/\iH\iI\iM\i£\i¦\iá\i!]i$]i<]iA]i]iÜ]i/^i0^iC^iD^i^i^i¼^i½^i6_ia_i}_i¬_i­_ið_i`i7`i[`i\`iz`i¥`iÂ`ià`iá`iai!ai"aiLaihaiiaiaiaiaiÈai÷ai*bi]bi£biébiBcicidididi<diIdiKdidiÇdiôdi eiJei`eiaeieieieiÖeifi³fiÍfiÎfiüfigigiagi½gihi&hi'hi+hiMhiPhihiÁhiæhiiiii.ii3iinii¬iièii+ji,ji0jiRjiUjijiÆjiëjikiki3ki8kiski±kiíki0li1liZliiliklili¶li·li»liÕliØlimiIminmimimi­mi²miémi#ni[ni¥ni©niÎniÑni	oiLoivoi©oi$pi'pi?piDpipiÁpiÿpi;qiqiqiqi¨qi«qiãqi&riPriri³risisi,si1sipsi²siòsi1tioti±ti²tiØtiÙtiÚtiÿti uiui#uiRui¯uiæui vi#vi;vi?visvi§vißviwiwiwiwi?wiBwiSwi¯wi¾wi¿wiÃwiåwixiCxiFxi^xibxi¡xiÐxiÑxiÕxiyiOyiRyiyiÝyiàyiøyiýyi>ziqzirzivziÉzi{iP{iS{i{i{i{i¢{iÝ{iÞ{i|i|i$|i%|i)|iF|iJ|iW|iY|i©|iû|i0}il}i¬}iÝ}i~i>~iv~i¯~iÜ~i	iCiiÁiòi#iTii¶içiiIizi«iÝiiAisi¥i×i	i;imii iúii	ii8i<iMiiÎiáiâiæiii!ihiÁiifi{i|ii i£iÖi i+i.iFiKi~i¯iâiãiçii
i=igiii­i²iåiiUiViZiiiÐiôi÷iiiRiiiiÇiÊiýi'iYi\itiyiªiÙi ii'i(i)ijikioiiÄiâiæiii
iZii£i§iñiòiöi*i-iWi[iiii¬iÃiiNiiÔiÿiii=iTiièi2i|iØi"i~iåiæiçi,iJiKiqiui¡i¤iÙi&i)iAiFi|i®i¯i³iÛiÞiiiiliiiiÃiiii-i:i<iYivii¯iËiçiii5i6iOi\i^ixii«i¾i¿iÀiÿi iSirisitii¤i¦iêi{iÓiiiiiiiÈiËiÿi+iiii iÖiiYiZi[i\i`iiiÁiiii!i[iiiii­i°iáiii&i*igi¬i­i®i¯i³iÝiàiiUiXipiti®i×iØiÙi÷iøi5 iM ir i i iG¡i¢iÏ¢i£i£i¤i¤i¤i#¤iC¤iF¤ix¤i¤iÆ¤iÉ¤iá¤iæ¤i&¥ii¥iµ¥i¶¥iÔ¥iÕ¥iÙ¥i¦i¦i=¦ie¦if¦i~¦i¦i¦iÃ¦iï¦ið¦iñ¦iõ¦i §i#§iY§i§i§i§i§i¢§iß§i
¨i¨i¨i_¨ii¨i¹¨i¾¨i¿¨iò¨i©i=©iz©iÁ©iªiªiªiWªihªi«ªiöªiF«i«iò«i
¬i¬iE¬iV¬i ¬ié¬i%­id­iÌ­iä­iå­i®i!®i®iÒ®i ¯iz¯iÅ¯iÛ¯iÜ¯ià¯i°i	°i?°i_°i`°ix°i{°i°i·°iõ°iö°i	±i±i±i0±:@last_line_endi0±{;o;;o;	;
@
;iø;" #define _VTSS_MISC_API_H_

;@{;o;;o;	;
@
;i;"!#include <vtss/api/types.h>
;@{;o;;o;	;
@
;i/;" #include "vtss_init_api.h"
;@{;o;;o;	;
@
;iJ;"#ifdef __cplusplus
;@{:keywordo;;o;	;
@
;i];"extern;@:stringo;;o;	;
@
;id;""C";@; [{;o;;o;	;
@
;ij;"#endif

;@{
;o;;o;	;
@
;i;"typedef;@:enum_type_declare{;o;;o;	;
@
;i;"	enum;@:
enums[{:	enum{:enum_nameo;;o;	;
@
;i¥;"VTSS_TRACE_LAYER_AIL;@:cap0{;{;o;;o;	;
@
;iå;"VTSS_TRACE_LAYER_CIL;@;0{;{;o;;o;	;
@
;i;"VTSS_TRACE_LAYER_COUNT  ;@;0:typedef_nameo;;o;	;
@
;iR;"vtss_trace_layer_t;@:
array[ ;0{
;o;;o;	;
@
;i;"typedef;@;{;o;;o;	;
@
;i;"	enum;@;[{;{;o;;o;	;
@
;i;"VTSS_TRACE_GROUP_DEFAULT;@;0{;{;o;;o;	;
@
;iÕ;"VTSS_TRACE_GROUP_PORT;@;0{;{;o;;o;	;
@
;i;"VTSS_TRACE_GROUP_PHY;@;0{;{;o;;o;	;
@
;iF;"VTSS_TRACE_GROUP_PACKET;@;0{;{;o;;o;	;
@
;i;"VTSS_TRACE_GROUP_AFI;@;0{;{;o;;o;	;
@
;i±;"VTSS_TRACE_GROUP_QOS;@;0{;{;o;;o;	;
@
;ið;"VTSS_TRACE_GROUP_L2;@;0{;{;o;;o;	;
@
;i$;"VTSS_TRACE_GROUP_L3;@;0{;{;o;;o;	;
@
;iX;"VTSS_TRACE_GROUP_SECURITY;@;0{;{;o;;o;	;
@
;i;"VTSS_TRACE_GROUP_EVC;@;0{;{;o;;o;	;
@
;iÖ;"!VTSS_TRACE_GROUP_FDMA_NORMAL;@;0{;{;o;;o;	;
@
;i;"VTSS_TRACE_GROUP_FDMA_IRQ;@;0{;{;o;;o;	;
@
;iR;"VTSS_TRACE_GROUP_REG_CHECK;@;0{;{;o;;o;	;
@
;i;"VTSS_TRACE_GROUP_MPLS;@;0{;{;o;;o;	;
@
;iÁ;"VTSS_TRACE_GROUP_HW_PROT;@;0{;{;o;;o;	;
@
;i;"VTSS_TRACE_GROUP_HQOS;@;0{;{;o;;o;	;
@
;iM;"VTSS_TRACE_GROUP_MACSEC;@;0{;{;o;;o;	;
@
;i;"VTSS_TRACE_GROUP_VCAP;@;0{;{;o;;o;	;
@
;i¹;"VTSS_TRACE_GROUP_OAM;@;0{;{;o;;o;	;
@
;ié;"VTSS_TRACE_GROUP_MRP;@;0{;{;o;;o;	;
@
;i;"VTSS_TRACE_GROUP_TS;@;0{;{;o;;o;	;
@
;iR;"VTSS_TRACE_GROUP_CLOCK;@;0{;{;o;;o;	;
@
;i;"VTSS_TRACE_GROUP_EMUL;@;0{;{;o;;o;	;
@
;iÁ;"%VTSS_TRACE_GROUP_COUNT          ;@;0;o;;o;	;
@
;i;"vtss_trace_group_t;@;[ ;0{
;o;;o;	;
@
;i2;"typedef;@;{;o;;o;	;
@
;i:;"	enum;@;[{;{;o;;o;	;
@
;iE;"VTSS_TRACE_LEVEL_NONE;@;0{;{;o;;o;	;
@
;ir;"VTSS_TRACE_LEVEL_ERROR;@;0{;{;o;;o;	;
@
;i¢;"VTSS_TRACE_LEVEL_INFO;@;0{;{;o;;o;	;
@
;iØ;"VTSS_TRACE_LEVEL_DEBUG;@;0{;{;o;;o;	;
@
;i	;"VTSS_TRACE_LEVEL_NOISE;@;0{;{;o;;o;	;
@
;iD	;"VTSS_TRACE_LEVEL_COUNT  ;@;0;o;;o;	;
@
;i}	;"vtss_trace_level_t;@;[ ;0{
;o;;o;	;
@
;iº	;"typedef;@:struct_type_declare{:struct_members[{:member{:normal{	:	typeo;;o;	;
@
;iÏ	;"vtss_trace_level_t ;@:	nameo;;o;	;
@
;iâ	;"
level;@;[{:	expro;;o;	;
@
;iè	;"VTSS_TRACE_LAYER_COUNT;@;0;o;;o;	;
@
;i!
;"vtss_trace_conf_t;@;[ ;0{:func_proto{;{	;o;;o;	;
@
;iÑ
;"vtss_rc ;@; o;;o;	;
@
;iÙ
;"vtss_trace_conf_get;@;[ ;0:	args[{;{	;o;;o;	;
@
;ií
;"const vtss_trace_group_t  ;@; o;;o;	;
@
;i;"
group;@;[ ;0{;{	;o;;o;	;
@
;i*;"&vtss_trace_conf_t         *const ;@; o;;o;	;
@
;iK;"	conf;@;[ ;0;0{;"{;{	;o;;o;	;
@
;ið;"vtss_rc ;@; o;;o;	;
@
;iø;"vtss_trace_conf_set;@;[ ;0;#[{;{	;o;;o;	;
@
;i;"const vtss_trace_group_t  ;@; o;;o;	;
@
;i&;"
group;@;[ ;0{;{	;o;;o;	;
@
;iI;"&const vtss_trace_conf_t   *const ;@; o;;o;	;
@
;ij;"	conf;@;[ ;0;0{;o;;o;	;
@
;i;"-#if defined(__GNUC__) && (__GNUC__ > 2)
;@{;o;;o;	;
@
;i²;"I#define VTSS_ATTR_PRINTF(X, Y) __attribute__ ((format(printf,X,Y)))
;@{;o;;o;	;
@
;iö;"#else
;@{;o;;o;	;
@
;iü;"$#define VTSS_ATTR_PRINTF(X, Y)
;@{;o;;o;	;
@
;i;"#endif


;@{;"{;{	;o;;o;	;
@
;i;"
void ;@; o;;o;	;
@
;i;"vtss_callout_trace_printf;@;[ ;0;#[{;{	;o;;o;	;
@
;i¨;"const vtss_trace_layer_t  ;@; o;;o;	;
@
;iÂ;"
layer;@;[ ;0{;{	;o;;o;	;
@
;iè;"const vtss_trace_group_t  ;@; o;;o;	;
@
;i;"
group;@;[ ;0{;{	;o;;o;	;
@
;i(;"const vtss_trace_level_t  ;@; o;;o;	;
@
;iB;"
level;@;[ ;0{;{	;o;;o;	;
@
;ih;" const char                *;@; o;;o;	;
@
;i;"	file;@;[ ;0{;{	;o;;o;	;
@
;i¨;"const int                 ;@; o;;o;	;
@
;iÂ;"	line;@;[ ;0{;{	;o;;o;	;
@
;iç;" const char                *;@; o;;o;	;
@
;i;"function;@;[ ;0{;{	;o;;o;	;
@
;i+;" const char                *;@; o;;o;	;
@
;iF;"format;@;[ ;0;0{;"{;{	;o;;o;	;
@
;i;"
void ;@; o;;o;	;
@
;i;" vtss_callout_trace_hex_dump;@;[ ;0;#[{;{	;o;;o;	;
@
;i¥;"const vtss_trace_layer_t  ;@; o;;o;	;
@
;i¿;"
layer;@;[ ;0{;{	;o;;o;	;
@
;iç;"const vtss_trace_group_t  ;@; o;;o;	;
@
;i;"
group;@;[ ;0{;{	;o;;o;	;
@
;i);"const vtss_trace_level_t  ;@; o;;o;	;
@
;iC;"
level;@;[ ;0{;{	;o;;o;	;
@
;ik;" const char                *;@; o;;o;	;
@
;i;"	file;@;[ ;0{;{	;o;;o;	;
@
;i­;"const int                 ;@; o;;o;	;
@
;iÇ;"	line;@;[ ;0{;{	;o;;o;	;
@
;iî;" const char                *;@; o;;o;	;
@
;i	;"function;@;[ ;0{;{	;o;;o;	;
@
;i4;" const u8                  *;@; o;;o;	;
@
;iO;"byte_p;@;[ ;0{;{	;o;;o;	;
@
;ix;"const int                 ;@; o;;o;	;
@
;i;"byte_cnt;@;[ ;0;0{;o;;o;	;
@
;i;"#if VTSS_OPT_DEBUG_PRINT

;@{
;o;;o;	;
@
;iä;"typedef;@;{;o;;o;	;
@
;iì;"	enum;@;[{;{;o;;o;	;
@
;i÷;"VTSS_DEBUG_LAYER_ALL;@;0{;{;o;;o;	;
@
;i$;"VTSS_DEBUG_LAYER_AIL;@;0{;{;o;;o;	;
@
;ib;"VTSS_DEBUG_LAYER_CIL  ;@;0;o;;o;	;
@
;i;"vtss_debug_layer_t;@;[ ;0{
;o;;o;	;
@
;iÏ;"typedef;@;{;o;;o;	;
@
;i×;"	enum;@;[0{;{;o;;o;	;
@
;iâ;"VTSS_DEBUG_GROUP_ALL;@;0{;{;o;;o;	;
@
;i;"VTSS_DEBUG_GROUP_INIT;@;0{;{;o;;o;	;
@
;iL;"VTSS_DEBUG_GROUP_MISC;@;0{;{;o;;o;	;
@
;i;"VTSS_DEBUG_GROUP_PORT;@;0{;{;o;;o;	;
@
;i½;"VTSS_DEBUG_GROUP_PORT_CNT;@;0{;{;o;;o;	;
@
;ió;"VTSS_DEBUG_GROUP_PHY;@;0{;{;o;;o;	;
@
;i;"VTSS_DEBUG_GROUP_VLAN;@;0{;{;o;;o;	;
@
;iL;"VTSS_DEBUG_GROUP_PVLAN;@;0{;{;o;;o;	;
@
;iz;"VTSS_DEBUG_GROUP_MAC_TABLE;@;0{;{;o;;o;	;
@
;i´;"VTSS_DEBUG_GROUP_ACL;@;0{;{;o;;o;	;
@
;ià;"VTSS_DEBUG_GROUP_QOS;@;0{;{;o;;o;	;
@
;i;"VTSS_DEBUG_GROUP_AGGR;@;0{;{;o;;o;	;
@
;iE;"VTSS_DEBUG_GROUP_GLAG;@;0{;{;o;;o;	;
@
;i;"VTSS_DEBUG_GROUP_STP;@;0{;{;o;;o;	;
@
;i»;"VTSS_DEBUG_GROUP_MIRROR;@;0{;{;o;;o;	;
@
;ií;"VTSS_DEBUG_GROUP_EVC;@;0{;{;o;;o;	;
@
;i;"VTSS_DEBUG_GROUP_ERPS;@;0{;{;o;;o;	;
@
;iF;"VTSS_DEBUG_GROUP_EPS;@;0{;{;o;;o;	;
@
;ir;"VTSS_DEBUG_GROUP_SR;@;0{;{;o;;o;	;
@
;i®;"VTSS_DEBUG_GROUP_PACKET;@;0{;{;o;;o;	;
@
;iå;"VTSS_DEBUG_GROUP_FDMA;@;0{;{;o;;o;	;
@
;i;"VTSS_DEBUG_GROUP_TS;@;0{;{;o;;o;	;
@
;iP;"VTSS_DEBUG_GROUP_PHY_TS;@;0{;{;o;;o;	;
@
;i;"VTSS_DEBUG_GROUP_WM;@;0{;{;o;;o;	;
@
;iÄ;"VTSS_DEBUG_GROUP_LRN;@;0{;{;o;;o;	;
@
;i;"VTSS_DEBUG_GROUP_IPMC;@;0{;{;o;;o;	;
@
;iT;"VTSS_DEBUG_GROUP_STACK;@;0{;{;o;;o;	;
@
;i;"VTSS_DEBUG_GROUP_CMEF;@;0{;{;o;;o;	;
@
;iÃ;"VTSS_DEBUG_GROUP_HOST;@;0{;{;o;;o;	;
@
;i;"VTSS_DEBUG_GROUP_MPLS;@;0{;{;o;;o;	;
@
;i2;"VTSS_DEBUG_GROUP_HW_PROT;@;0{;{;o;;o;	;
@
;ih;"VTSS_DEBUG_GROUP_HQOS;@;0{;{;o;;o;	;
@
;i°;"VTSS_DEBUG_GROUP_VXLAT;@;0{;{;o;;o;	;
@
;ié;"VTSS_DEBUG_GROUP_OAM;@;0{;{;o;;o;	;
@
;i%;"VTSS_DEBUG_GROUP_MRP;@;0{;{;o;;o;	;
@
;im;"VTSS_DEBUG_GROUP_SER_GPIO;@;0{;{;o;;o;	;
@
;i¯;"VTSS_DEBUG_GROUP_L3;@;0{;{;o;;o;	;
@
;iã;"VTSS_DEBUG_GROUP_AFI;@;0{;{;o;;o;	;
@
;i$;"VTSS_DEBUG_GROUP_MACSEC;@;0{;{;o;;o;	;
@
;i[;"VTSS_DEBUG_GROUP_SERDES;@;0{;{;o;;o;	;
@
;i;"VTSS_DEBUG_GROUP_KR;@;0{;{;o;;o;	;
@
;iË;"VTSS_DEBUG_GROUP_MUX;@;0{;{;o;;o;	;
@
;i,;"!VTSS_DEBUG_GROUP_COUNT      ;@;0;o;;o;	;
@
;ic;"vtss_debug_group_t;@;[ ;0{;o;;o;	;
@
;iÈ;"*#define VTSS_CHIP_NO_ALL 0xffffffff

;@{
;o;;o;	;
@
;i ;"typedef;@;{;[{;{;{	;o;;o;	;
@
;i, ;""vtss_debug_layer_t           ;@; o;;o;	;
@
;iI ;"
layer;@;[ ;0{;{;{	;o;;o;	;
@
;i| ;""vtss_debug_group_t           ;@; o;;o;	;
@
;i ;"
group;@;[ ;0{;{;{	;o;;o;	;
@
;iÕ ;""vtss_chip_no_t               ;@; o;;o;	;
@
;iò ;"chip_no;@;[ ;0{;{;{	;o;;o;	;
@
;i?!;""BOOL                         ;@; o;;o;	;
@
;i\!;"port_list;@;[{;!o;;o;	;
@
;if!;"VTSS_PORT_ARRAY_SIZE;@;0{;{;{	;o;;o;	;
@
;i!;""BOOL                         ;@; o;;o;	;
@
;i°!;"	full;@;[ ;0{;{;{	;o;;o;	;
@
;ió!;""BOOL                         ;@; o;;o;	;
@
;i";"
clear;@;[ ;0{;{;{	;o;;o;	;
@
;iL";""BOOL                         ;@; o;;o;	;
@
;ii";"vml_format;@;[ ;0{;{;{	;o;;o;	;
@
;i¯";""BOOL                         ;@; o;;o;	;
@
;iÌ";"has_action;@;[ ;0{;{;{	;o;;o;	;
@
;i#;""u32                          ;@; o;;o;	;
@
;i2#;"action;@;[ ;0{;{;{	;o;;o;	;
@
;i#;""u32                          ;@; o;;o;	;
@
;i#;"prm;@;[{;!o;;o;	;
@
;i£#;"10;@;0;o;;o;	;
@
;iß#;"vtss_debug_info_t;@;[ ;0{;o;;o;	;
@
;i$;"typedef;@:typedef_fptr{	:return_typeo;;o;	;
@
;i$;"	int ;@:fptr_nameo;;o;	;
@
;i$;"vtss_debug_printf_t;@;#[{;{	;o;;o;	;
@
;i±$;"const char *;@; o;;o;	;
@
;i½$;"fmt;@;[ ;0;0{;"{;{	;o;;o;	;
@
;ia%;"vtss_rc ;@; o;;o;	;
@
;ii%;"vtss_debug_info_get;@;[ ;0;#[{;{	;o;;o;	;
@
;i}%;"vtss_debug_info_t *const ;@; o;;o;	;
@
;i%;"	info;@;[ ;0;0{;"{;{	;o;;o;	;
@
;io&;"vtss_rc ;@; o;;o;	;
@
;iw&;"vtss_debug_info_print;@;[ ;0;#[{;{	;o;;o;	;
@
;i&;"const vtss_inst_t         ;@; o;;o;	;
@
;i§&;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iË&;"const vtss_debug_printf_t ;@; o;;o;	;
@
;iå&;"
prntf;@;[ ;0{;{	;o;;o;	;
@
;i
';"&const vtss_debug_info_t   *const ;@; o;;o;	;
@
;i+';"	info;@;[ ;0;0{;o;;o;	;
@
;i2';"%#endif // VTSS_OPT_DEBUG_PRINT

;@{
;o;;o;	;
@
;i¼';"typedef;@;{;[	{;{;{	;o;;o;	;
@
;iÑ';"vtss_inst_t ;@; o;;o;	;
@
;iÝ';"	inst;@;[ ;0{;{;{	;o;;o;	;
@
;i(;"const char *;@; o;;o;	;
@
;i(;"function;@;[ ;0{;{;{	;o;;o;	;
@
;i=(;"const char *;@; o;;o;	;
@
;iI(;"	file;@;[ ;0{;{;{	;o;;o;	;
@
;ii(;"int        ;@; o;;o;	;
@
;it(;"	line;@;[ ;0;o;;o;	;
@
;i(;"vtss_api_lock_t;@;[ ;0{;"{;{	;o;;o;	;
@
;iñ(;"
void ;@; o;;o;	;
@
;iö(;"vtss_callout_lock;@;[ ;0;#[{;{	;o;;o;	;
@
;i);""const vtss_api_lock_t *const ;@; o;;o;	;
@
;i%);"	lock;@;[ ;0;0{;"{;{	;o;;o;	;
@
;iy);"
void ;@; o;;o;	;
@
;i~);"vtss_callout_unlock;@;[ ;0;#[{;{	;o;;o;	;
@
;i);""const vtss_api_lock_t *const ;@; o;;o;	;
@
;i¯);"	lock;@;[ ;0;0{
;o;;o;	;
@
;iÞ);"typedef;@;{;[{;{;{	;o;;o;	;
@
;ió);"vtss_chip_no_t ;@; o;;o;	;
@
;i*;"chip_no;@;[ ;0;o;;o;	;
@
;i;*;"vtss_debug_lock_t;@;[ ;0{;"{;{	;o;;o;	;
@
;iê*;"vtss_rc ;@; o;;o;	;
@
;iò*;"vtss_debug_lock;@;[ ;0;#[{;{	;o;;o;	;
@
;i+;"const vtss_inst_t       ;@; o;;o;	;
@
;i+;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i8+;"$const vtss_debug_lock_t *const ;@; o;;o;	;
@
;iW+;"	lock;@;[ ;0;0{;"{;{	;o;;o;	;
@
;iü+;"vtss_rc ;@; o;;o;	;
@
;i,;"vtss_debug_unlock;@;[ ;0;#[{;{	;o;;o;	;
@
;i,;"const vtss_inst_t ;@; o;;o;	;
@
;i(,;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iH,;"vtss_debug_lock_t *const ;@; o;;o;	;
@
;ia,;"	lock;@;[ ;0;0{;o;;o;	;
@
;ii,;"$#if defined(VTSS_FEATURE_MISC)
;@{;"{;{	;o;;o;	;
@
;iÿ-;"vtss_rc ;@; o;;o;	;
@
;i.;"vtss_reg_read;@;[ ;0;#[	{;{	;o;;o;	;
@
;i.;"const vtss_inst_t    ;@; o;;o;	;
@
;i*.;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iF.;"const vtss_chip_no_t ;@; o;;o;	;
@
;i[.;"chip_no;@;[ ;0{;{	;o;;o;	;
@
;iz.;"const u32            ;@; o;;o;	;
@
;i.;"	addr;@;[ ;0{;{	;o;;o;	;
@
;i«.;"!u32                  *const ;@; o;;o;	;
@
;iÇ.;"
value;@;[ ;0;0{;"{;{	;o;;o;	;
@
;iþ/;"vtss_rc ;@; o;;o;	;
@
;i0;"vtss_reg_write;@;[ ;0;#[	{;{	;o;;o;	;
@
;i0;"const vtss_inst_t    ;@; o;;o;	;
@
;i*0;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iG0;"const vtss_chip_no_t ;@; o;;o;	;
@
;i\0;"chip_no;@;[ ;0{;{	;o;;o;	;
@
;i|0;"const u32            ;@; o;;o;	;
@
;i0;"	addr;@;[ ;0{;{	;o;;o;	;
@
;i®0;"const u32            ;@; o;;o;	;
@
;iÃ0;"
value;@;[ ;0;0{;"{;{	;o;;o;	;
@
;iQ2;"vtss_rc ;@; o;;o;	;
@
;iY2;"vtss_reg_write_masked;@;[ ;0;#[
{;{	;o;;o;	;
@
;io2;"const vtss_inst_t    ;@; o;;o;	;
@
;i2;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i¨2;"const vtss_chip_no_t ;@; o;;o;	;
@
;i½2;"chip_no;@;[ ;0{;{	;o;;o;	;
@
;iä2;"const u32            ;@; o;;o;	;
@
;iù2;"	addr;@;[ ;0{;{	;o;;o;	;
@
;i3;"const u32            ;@; o;;o;	;
@
;i23;"
value;@;[ ;0{;{	;o;;o;	;
@
;iW3;"const u32            ;@; o;;o;	;
@
;il3;"	mask;@;[ ;0;0{;"{;{	;o;;o;	;
@
;ie4;"vtss_rc ;@; o;;o;	;
@
;im4;"vtss_intr_sticky_clear;@;[ ;0;#[{;{	;o;;o;	;
@
;i4;"const vtss_inst_t    ;@; o;;o;	;
@
;i4;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i¾4;"u32                  ;@; o;;o;	;
@
;iÓ4;"ext;@;[ ;0;0{
;o;;o;	;
@
;i95;"typedef;@;{;[{;{;{	;o;;o;	;
@
;iN5;"
u16  ;@; o;;o;	;
@
;iS5;"part_number;@;[ ;0{;{;{	;o;;o;	;
@
;i5;"
u16  ;@; o;;o;	;
@
;i5;"revision;@;[ ;0;o;;o;	;
@
;i²5;"vtss_chip_id_t;@;[ ;0{;"{;{	;o;;o;	;
@
;iw6;"vtss_rc ;@; o;;o;	;
@
;i6;"vtss_chip_id_get;@;[ ;0;#[{;{	;o;;o;	;
@
;i6;"const vtss_inst_t  ;@; o;;o;	;
@
;i£6;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iÂ6;"vtss_chip_id_t     *const ;@; o;;o;	;
@
;iÜ6;"chip_id;@;[ ;0;0{;"{;{	;o;;o;	;
@
;i³7;"vtss_rc ;@; o;;o;	;
@
;i»7;"vtss_poll_1sec;@;[ ;0;#[{;{	;o;;o;	;
@
;iÊ7;"const vtss_inst_t  ;@; o;;o;	;
@
;iÝ7;"	inst;@;[ ;0;0{
;o;;o;	;
@
;i>8;"typedef;@;{;o;;o;	;
@
;iF8;"	enum;@;[{;{	;o;;o;	;
@
;iQ8;"VTSS_PTP_SYNC_EV ;@:operatoro;;o;	;
@
;ib8;"=;@;!o;;o;	;
@
;ii8;"(1 << 0);@;0{;{	;o;;o;	;
@
;i8;"VTSS_PTP_EXT_SYNC_EV ;@;'o;;o;	;
@
;i´8;"=;@;!o;;o;	;
@
;i·8;"(1 << 1);@;0{;{	;o;;o;	;
@
;i9;"VTSS_PTP_CLK_ADJ_EV ;@;'o;;o;	;
@
;i9;"=;@;!o;;o;	;
@
;i9;"(1 << 2);@;0{;{	;o;;o;	;
@
;iL9;"VTSS_PTP_TX_TSTAMP_EV ;@;'o;;o;	;
@
;ib9;"=;@;!o;;o;	;
@
;id9;"(1 << 3);@;0{;{	;o;;o;	;
@
;i¥9;"VTSS_PTP_EXT_1_SYNC_EV ;@;'o;;o;	;
@
;i¼9;"=;@;!o;;o;	;
@
;i½9;"(1 << 4);@;0{;{	;o;;o;	;
@
;i:;"VTSS_PTP_PIN_0_SYNC_EV ;@;'o;;o;	;
@
;i:;"=;@;!o;;o;	;
@
;i:;"(1 << 5);@;0{;{	;o;;o;	;
@
;ib:;"VTSS_PTP_PIN_1_SYNC_EV ;@;'o;;o;	;
@
;iy:;"=;@;!o;;o;	;
@
;iz:;"(1 << 6);@;0{;{	;o;;o;	;
@
;iÀ:;"VTSS_PTP_PIN_2_SYNC_EV ;@;'o;;o;	;
@
;i×:;"=;@;!o;;o;	;
@
;iØ:;"(1 << 7);@;0{;{	;o;;o;	;
@
;i;;"VTSS_PTP_PIN_3_SYNC_EV ;@;'o;;o;	;
@
;i5;;"=;@;!o;;o;	;
@
;i6;;"(1 << 8);@;0;o;;o;	;
@
;iz;;"vtss_ptp_event_type_t;@;[ ;0{;"{;{	;o;;o;	;
@
;ib=;"vtss_rc ;@; o;;o;	;
@
;ij=;"vtss_ptp_event_poll;@;[ ;0;#[{;{	;o;;o;	;
@
;i~=;"const vtss_inst_t      ;@; o;;o;	;
@
;i=;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i·=;"#vtss_ptp_event_type_t  *const ;@; o;;o;	;
@
;iÕ=;"ev_mask;@;[ ;0;0{;"{;{	;o;;o;	;
@
;iã>;"vtss_rc ;@; o;;o;	;
@
;ië>;"vtss_ptp_event_enable;@;[ ;0;#[{;{	;o;;o;	;
@
;i?;""const vtss_inst_t            ;@; o;;o;	;
@
;i?;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iB?;""const vtss_ptp_event_type_t  ;@; o;;o;	;
@
;i_?;"ev_mask;@;[ ;0{;{	;o;;o;	;
@
;i?;""const BOOL                   ;@; o;;o;	;
@
;i£?;"enable;@;[ ;0;0{
;o;;o;	;
@
;iî?;"typedef;@;{;o;;o;	;
@
;iö?;"	enum;@;[{;{	;o;;o;	;
@
;i@;"VTSS_DEV_ALL_TX_TSTAMP_EV ;@;'o;;o;	;
@
;i@;"=;@;!o;;o;	;
@
;i@;"(1 << 0);@;0{;{	;o;;o;	;
@
;iF@;"VTSS_DEV_ALL_LINK_EV ;@;'o;;o;	;
@
;i[@;"=;@;!o;;o;	;
@
;ib@;"(1 << 1);@;0;o;;o;	;
@
;i@;"vtss_dev_all_event_type_t;@;[ ;0{
;o;;o;	;
@
;iÛ@;"typedef;@;{;o;;o;	;
@
;iã@;"	enum;@;[{;{;o;;o;	;
@
;iî@;"VTSS_DEV_ALL_POLL_ALL;@;0{;{;o;;o;	;
@
;i*A;"VTSS_DEV_ALL_POLL_PRIMARY;@;0{;{;o;;o;	;
@
;ijA;" VTSS_DEV_ALL_POLL_SECONDARY;@;0;o;;o;	;
@
;iªA;"vtss_dev_all_event_poll_t;@;[ ;0{;"{;{	;o;;o;	;
@
;iúC;"vtss_rc ;@; o;;o;	;
@
;iD;"vtss_dev_all_event_poll;@;[ ;0;#[{;{	;o;;o;	;
@
;iD;"'const vtss_inst_t                 ;@; o;;o;	;
@
;i<D;"	inst;@;[ ;0{;{	;o;;o;	;
@
;ibD;"'const vtss_dev_all_event_poll_t   ;@; o;;o;	;
@
;iD;"poll_type;@;[ ;0{;{	;o;;o;	;
@
;i¯D;".vtss_dev_all_event_type_t         *const ;@; o;;o;	;
@
;iØD;"ev_mask;@;[ ;0;0{;"{;{	;o;;o;	;
@
;iF;"vtss_rc ;@; o;;o;	;
@
;iF;"vtss_dev_all_event_enable;@;[ ;0;#[	{;{	;o;;o;	;
@
;i3F;"&const vtss_inst_t                ;@; o;;o;	;
@
;iTF;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i|F;"&const vtss_port_no_t             ;@; o;;o;	;
@
;iF;"port_no;@;[ ;0{;{	;o;;o;	;
@
;iÈF;"&const vtss_dev_all_event_type_t  ;@; o;;o;	;
@
;iéF;"ev_mask;@;[ ;0{;{	;o;;o;	;
@
;iG;"&const BOOL                       ;@; o;;o;	;
@
;i5G;"enable;@;[ ;0;0{;o;;o;	;
@
;i?G;"%#endif /* VTSS_FEATURE_MISC */

;@{;o;;o;	;
@
;i¨G;"A#if defined(VTSS_ARCH_LUTON26) || defined(VTSS_ARCH_OCELOT)
;@{;o;;o;	;
@
;iH;"#undef VTSS_GPIOS
;@{;o;;o;	;
@
;iH;"##define VTSS_GPIOS         32
;@{;o;;o;	;
@
;i2H;",#endif /* VTSS_ARCH_LUTON26/SERVAL */

;@{;o;;o;	;
@
;iYH;"%#if defined(VTSS_ARCH_JAGUAR_2)
;@{;o;;o;	;
@
;iH;"#undef VTSS_GPIOS
;@{;o;;o;	;
@
;i©H;"##define VTSS_GPIOS         64
;@{;o;;o;	;
@
;iÇH;"&#endif /* VTSS_ARCH_JAGUAR_2 */

;@{;o;;o;	;
@
;ièH;"##if defined(VTSS_ARCH_SPARX5)
;@{;o;;o;	;
@
;i$I;"#undef VTSS_GPIOS
;@{;o;;o;	;
@
;i6I;"##define VTSS_GPIOS         64
;@{;o;;o;	;
@
;iTI;"$#endif /* VTSS_ARCH_SPARX5 */

;@{;o;;o;	;
@
;isI;"$#if defined(VTSS_ARCH_LAN966X)
;@{;o;;o;	;
@
;i°I;"#undef VTSS_GPIOS
;@{;o;;o;	;
@
;iÂI;"##define VTSS_GPIOS         78
;@{;o;;o;	;
@
;iàI;"%#endif /* VTSS_ARCH_LAN966X */

;@{
;o;;o;	;
@
;iJ;"typedef;@:type_aliaso;;o;	;
@
;i"J;"	u32 ;@;o;;o;	;
@
;i&J;"vtss_gpio_no_t;@;[ ;0{;o;;o;	;
@
;i7J;"#if defined(VTSS_GPIOS)
;@{;o;;o;	;
@
;ioJ;"##define VTSS_GPIO_NO_START 0

;@{;o;;o;	;
@
;i«J;"A#define VTSS_GPIO_NO_END   (VTSS_GPIO_NO_START+VTSS_GPIOS)

;@{
;o;;o;	;
@
;iK;"typedef;@;{;o;;o;	;
@
;iK;"	enum;@;[{;{;o;;o;	;
@
;i"K;"VTSS_GPIO_OUT;@;0{;{;o;;o;	;
@
;iOK;"VTSS_GPIO_IN;@;0{;{;o;;o;	;
@
;i{K;"VTSS_GPIO_IN_INT;@;0{;{;o;;o;	;
@
;i²K;"VTSS_GPIO_ALT_0;@;0{;{;o;;o;	;
@
;iåK;"VTSS_GPIO_ALT_1;@;0{;{;o;;o;	;
@
;iL;"VTSS_GPIO_ALT_2;@;0{;{;o;;o;	;
@
;iKL;"VTSS_GPIO_ALT_3;@;0{;{;o;;o;	;
@
;i~L;"VTSS_GPIO_ALT_4;@;0{;{;o;;o;	;
@
;i±L;"VTSS_GPIO_ALT_5;@;0;o;;o;	;
@
;iâL;"vtss_gpio_mode_t;@;[ ;0{;"{;{	;o;;o;	;
@
;iòM;"vtss_rc ;@; o;;o;	;
@
;iúM;"vtss_gpio_mode_set;@;[ ;0;#[	{;{	;o;;o;	;
@
;iN;"const vtss_inst_t      ;@; o;;o;	;
@
;i$N;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iEN;"const vtss_chip_no_t   ;@; o;;o;	;
@
;i\N;"chip_no;@;[ ;0{;{	;o;;o;	;
@
;iN;"const vtss_gpio_no_t   ;@; o;;o;	;
@
;iN;"gpio_no;@;[ ;0{;{	;o;;o;	;
@
;i»N;"const vtss_gpio_mode_t ;@; o;;o;	;
@
;iÒN;"	mode;@;[ ;0;0{;"{;{	;o;;o;	;
@
;i<P;"vtss_rc ;@; o;;o;	;
@
;iDP;"vtss_gpio_direction_set;@;[ ;0;#[	{;{	;o;;o;	;
@
;i\P;"const vtss_inst_t     ;@; o;;o;	;
@
;irP;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iP;"const vtss_chip_no_t  ;@; o;;o;	;
@
;i®P;"chip_no;@;[ ;0{;{	;o;;o;	;
@
;i×P;"const vtss_gpio_no_t  ;@; o;;o;	;
@
;iíP;"gpio_no;@;[ ;0{;{	;o;;o;	;
@
;iQ;"const BOOL            ;@; o;;o;	;
@
;i,Q;"output;@;[ ;0;0{;"{;{	;o;;o;	;
@
;i^R;"vtss_rc ;@; o;;o;	;
@
;ifR;"vtss_gpio_read;@;[ ;0;#[	{;{	;o;;o;	;
@
;iuR;"const vtss_inst_t     ;@; o;;o;	;
@
;iR;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i¨R;"const vtss_chip_no_t  ;@; o;;o;	;
@
;i¾R;"chip_no;@;[ ;0{;{	;o;;o;	;
@
;iÞR;"const vtss_gpio_no_t  ;@; o;;o;	;
@
;iôR;"gpio_no;@;[ ;0{;{	;o;;o;	;
@
;iS;""BOOL                  *const ;@; o;;o;	;
@
;i1S;"
value;@;[ ;0;0{;"{;{	;o;;o;	;
@
;ieT;"vtss_rc ;@; o;;o;	;
@
;imT;"vtss_gpio_write;@;[ ;0;#[	{;{	;o;;o;	;
@
;i}T;"const vtss_inst_t     ;@; o;;o;	;
@
;iT;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i±T;"const vtss_chip_no_t  ;@; o;;o;	;
@
;iÇT;"chip_no;@;[ ;0{;{	;o;;o;	;
@
;ièT;"const vtss_gpio_no_t  ;@; o;;o;	;
@
;iþT;"gpio_no;@;[ ;0{;{	;o;;o;	;
@
;iU;"const BOOL            ;@; o;;o;	;
@
;i5U;"
value;@;[ ;0;0{;"{;{	;o;;o;	;
@
;ieV;"vtss_rc ;@; o;;o;	;
@
;imV;"vtss_gpio_event_poll;@;[ ;0;#[{;{	;o;;o;	;
@
;iV;"const vtss_inst_t        ;@; o;;o;	;
@
;iV;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i¾V;"const vtss_chip_no_t     ;@; o;;o;	;
@
;i×V;"chip_no;@;[ ;0{;{	;o;;o;	;
@
;iýV;"%BOOL                     *const ;@; o;;o;	;
@
;iW;"events;@;[ ;0;0{;"{;{	;o;;o;	;
@
;iIX;"vtss_rc ;@; o;;o;	;
@
;iQX;"vtss_gpio_event_enable;@;[ ;0;#[	{;{	;o;;o;	;
@
;ihX;"const vtss_inst_t       ;@; o;;o;	;
@
;iX;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i¥X;"const vtss_chip_no_t    ;@; o;;o;	;
@
;i½X;"chip_no;@;[ ;0{;{	;o;;o;	;
@
;iåX;"const vtss_gpio_no_t    ;@; o;;o;	;
@
;iýX;"gpio_no;@;[ ;0{;{	;o;;o;	;
@
;i%Y;"BOOL                    ;@; o;;o;	;
@
;i=Y;"enable;@;[ ;0;0{
;o;;o;	;
@
;ilY;"typedef;@;{;o;;o;	;
@
;itY;"	enum;@;[
{;{;o;;o;	;
@
;iY;"VTSS_GPIO_FUNC_PTP_0;@;0{;{;o;;o;	;
@
;i·Y;"VTSS_GPIO_FUNC_PTP_1;@;0{;{;o;;o;	;
@
;iïY;"VTSS_GPIO_FUNC_PTP_2;@;0{;{;o;;o;	;
@
;i'Z;"VTSS_GPIO_FUNC_PTP_3;@;0{;{;o;;o;	;
@
;i_Z;"VTSS_GPIO_FUNC_PTP_4    ;@;0;o;;o;	;
@
;iZ;"vtss_gpio_func_t;@;[ ;0{
;o;;o;	;
@
;iÇZ;"typedef;@;{;o;;o;	;
@
;iÏZ;"	enum;@;[{;{;o;;o;	;
@
;iÚZ;"VTSS_GPIO_FUNC_ALT_0;@;0{;{;o;;o;	;
@
;i[;"VTSS_GPIO_FUNC_ALT_1;@;0{;{;o;;o;	;
@
;i@[;"VTSS_GPIO_FUNC_ALT_2   ;@;0;o;;o;	;
@
;iq[;"vtss_gpio_func_alt_t;@;[ ;0{
;o;;o;	;
@
;iª[;"typedef;@;{;[{;{;{	;o;;o;	;
@
;i¿[;"vtss_gpio_no_t       ;@; o;;o;	;
@
;iÔ[;"gpio_no;@;[ ;0{;{;{	;o;;o;	;
@
;iø[;"vtss_gpio_func_alt_t ;@; o;;o;	;
@
;i\;"alt;@;[ ;0;o;;o;	;
@
;i1\;"vtss_gpio_func_info_t;@;[ ;0{;o;;o;	;
@
;iA];"typedef;@;${	;%o;;o;	;
@
;iI];"vtss_rc ;@;&o;;o;	;
@
;iS];"vtss_gpio_func_info_get_t;@;#[{;{	;o;;o;	;
@
;in];"const vtss_inst_t       ;@; o;;o;	;
@
;i];"	inst;@;[ ;0{;{	;o;;o;	;
@
;i¹];"const vtss_gpio_func_t  ;@; o;;o;	;
@
;iÑ];"gpio_func;@;[ ;0{;{	;o;;o;	;
@
;i	^;"$vtss_gpio_func_info_t   *const ;@; o;;o;	;
@
;i(^;"	info;@;[ ;0;0{;o;;o;	;
@
;i0^;"#endif /* GPIOS */

;@{;o;;o;	;
@
;i^;",#if defined(VTSS_FEATURE_SERIAL_GPIO)

;@{;o;;o;	;
@
;i½^;"~#if defined(VTSS_ARCH_LUTON26) || defined(VTSS_ARCH_OCELOT) || defined(VTSS_ARCH_SERVAL_T) || defined(VTSS_ARCH_LAN966X)
;@{;o;;o;	;
@
;ia_;"!#define VTSS_SGPIO_GROUPS 1
;@{;o;;o;	;
@
;i}_;"5#endif /* VTSS_ARCH_LUTON26/SERVAL/SERVAL_T */

;@{;o;;o;	;
@
;i­_;"H#if defined(VTSS_ARCH_JAGUAR_2_B) || defined(VTSS_ARCH_JAGUAR_2_C)
;@{;o;;o;	;
@
;i`;"!#define VTSS_SGPIO_GROUPS 3
;@{;o;;o;	;
@
;i7`;"*#endif /* VTSS_ARCH_JAGUAR_2_B/C */

;@{;o;;o;	;
@
;i\`;"##if defined(VTSS_ARCH_SPARX5)
;@{;o;;o;	;
@
;i¥`;""#define VTSS_SGPIO_GROUPS  3
;@{;o;;o;	;
@
;iÂ`;"$#endif /* VTSS_ARCH_SPARX5 */

;@{
;o;;o;	;
@
;ia;"typedef;@;(o;;o;	;
@
;i	a;"	u32 ;@;o;;o;	;
@
;ia;"vtss_sgpio_group_t;@;[ ;0{;o;;o;	;
@
;iLa;""#define VTSS_SGPIO_PORTS 32

;@{
;o;;o;	;
@
;ia;"typedef;@;{;o;;o;	;
@
;ia;"	enum;@;[{;{;o;;o;	;
@
;ia;"VTSS_SGPIO_MODE_OFF;@;0{;{;o;;o;	;
@
;iÌa;"VTSS_SGPIO_MODE_ON;@;0{;{;o;;o;	;
@
;iûa;"VTSS_SGPIO_MODE_0;@;0{;{;o;;o;	;
@
;i.b;"VTSS_SGPIO_MODE_1;@;0{;{;o;;o;	;
@
;iab;"VTSS_SGPIO_MODE_0_ACTIVITY;@;0{;{;o;;o;	;
@
;i§b;"VTSS_SGPIO_MODE_1_ACTIVITY;@;0{;{;o;;o;	;
@
;iíb;"#VTSS_SGPIO_MODE_0_ACTIVITY_INV;@;0{;{;o;;o;	;
@
;iFc;"#VTSS_SGPIO_MODE_1_ACTIVITY_INV;@;0{;{;o;;o;	;
@
;ic;"%VTSS_SGPIO_MODE_NO_CHANGE       ;@;0;o;;o;	;
@
;i	d;"vtss_sgpio_mode_t;@;[ ;0{
;o;;o;	;
@
;i<d;"typedef;@;{;o;;o;	;
@
;iDd;"	enum;@;[
{;{;o;;o;	;
@
;iOd;"VTSS_SGPIO_BMODE_TOGGLE;@;0{;{;o;;o;	;
@
;id;"VTSS_SGPIO_BMODE_0_625;@;0{;{;o;;o;	;
@
;iËd;"VTSS_SGPIO_BMODE_1_25;@;0{;{;o;;o;	;
@
;iød;"VTSS_SGPIO_BMODE_2_5;@;0{;{;o;;o;	;
@
;i$e;"VTSS_SGPIO_BMODE_5       ;@;0;o;;o;	;
@
;iLe;"vtss_sgpio_bmode_t;@;[ ;0{
;o;;o;	;
@
;ie;"typedef;@;{;[{;{;{	;o;;o;	;
@
;ie;"BOOL              ;@; o;;o;	;
@
;i¯e;"enabled;@;[ ;0{;{;{	;o;;o;	;
@
;iÚe;"vtss_sgpio_mode_t ;@; o;;o;	;
@
;iìe;"	mode;@;[{;!o;;o;	;
@
;iñe;"4;@;0{;{;{	;o;;o;	;
@
;if;"BOOL              ;@; o;;o;	;
@
;i%f;"int_pol_high;@;[{;!o;;o;	;
@
;i2f;"4;@;0;o;;o;	;
@
;iµf;"vtss_sgpio_port_conf_t;@;[ ;0{
;o;;o;	;
@
;iüf;"typedef;@;{;[{;{;{	;o;;o;	;
@
;ig;"vtss_sgpio_bmode_t     ;@; o;;o;	;
@
;i(g;"
bmode;@;[{;!o;;o;	;
@
;i.g;"2;@;0{;{;{	;o;;o;	;
@
;ieg;"u8                     ;@; o;;o;	;
@
;i|g;"bit_count;@;[ ;0{;{;{	;o;;o;	;
@
;iÁg;"vtss_sgpio_port_conf_t ;@; o;;o;	;
@
;iØg;"port_conf;@;[{;!o;;o;	;
@
;iâg;"VTSS_SGPIO_PORTS;@;0;o;;o;	;
@
;ih;"vtss_sgpio_conf_t;@;[ ;0{;"{;{	;o;;o;	;
@
;i3i;"vtss_rc ;@; o;;o;	;
@
;i;i;"vtss_sgpio_conf_get;@;[ ;0;#[	{;{	;o;;o;	;
@
;iOi;"const vtss_inst_t        ;@; o;;o;	;
@
;ihi;"	inst;@;[ ;0{;{	;o;;o;	;
@
;ii;"const vtss_chip_no_t     ;@; o;;o;	;
@
;i£i;"chip_no;@;[ ;0{;{	;o;;o;	;
@
;iÈi;"const vtss_sgpio_group_t ;@; o;;o;	;
@
;iái;"
group;@;[ ;0{;{	;o;;o;	;
@
;ij;"%vtss_sgpio_conf_t        *const ;@; o;;o;	;
@
;i$j;"	conf;@;[ ;0;0{;"{;{	;o;;o;	;
@
;i8k;"vtss_rc ;@; o;;o;	;
@
;i@k;"vtss_sgpio_conf_set;@;[ ;0;#[	{;{	;o;;o;	;
@
;iTk;"const vtss_inst_t        ;@; o;;o;	;
@
;imk;"	inst;@;[ ;0{;{	;o;;o;	;
@
;ik;"const vtss_chip_no_t     ;@; o;;o;	;
@
;i¨k;"chip_no;@;[ ;0{;{	;o;;o;	;
@
;iÍk;"const vtss_sgpio_group_t ;@; o;;o;	;
@
;iæk;"
group;@;[ ;0{;{	;o;;o;	;
@
;i	l;"%const vtss_sgpio_conf_t  *const ;@; o;;o;	;
@
;i)l;"	conf;@;[ ;0;0{
;o;;o;	;
@
;iZl;"typedef;@;{;[{;{;{	;o;;o;	;
@
;iol;"
BOOL ;@; o;;o;	;
@
;itl;"
value;@;[{;!o;;o;	;
@
;izl;"4;@;0;o;;o;	;
@
;il;"vtss_sgpio_port_data_t;@;[ ;0{;"{;{	;o;;o;	;
@
;i²m;"vtss_rc ;@; o;;o;	;
@
;iºm;"vtss_sgpio_read;@;[ ;0;#[	{;{	;o;;o;	;
@
;iÊm;"const vtss_inst_t        ;@; o;;o;	;
@
;iãm;"	inst;@;[ ;0{;{	;o;;o;	;
@
;in;"const vtss_chip_no_t     ;@; o;;o;	;
@
;in;"chip_no;@;[ ;0{;{	;o;;o;	;
@
;i;n;"const vtss_sgpio_group_t ;@; o;;o;	;
@
;iTn;"
group;@;[ ;0{;{	;o;;o;	;
@
;isn;"vtss_sgpio_port_data_t   ;@; o;;o;	;
@
;in;"	data;@;[{;!o;;o;	;
@
;in;"VTSS_SGPIO_PORTS;@;0;0{;"{;{	;o;;o;	;
@
;iDp;"vtss_rc ;@; o;;o;	;
@
;iLp;"vtss_sgpio_event_poll;@;[ ;0;#[
{;{	;o;;o;	;
@
;ibp;"const vtss_inst_t        ;@; o;;o;	;
@
;i{p;"	inst;@;[ ;0{;{	;o;;o;	;
@
;ip;"const vtss_chip_no_t     ;@; o;;o;	;
@
;i¸p;"chip_no;@;[ ;0{;{	;o;;o;	;
@
;ißp;"const vtss_sgpio_group_t ;@; o;;o;	;
@
;iøp;"
group;@;[ ;0{;{	;o;;o;	;
@
;iq;"const u32                ;@; o;;o;	;
@
;i6q;"bit;@;[ ;0{;{	;o;;o;	;
@
;iYq;"%BOOL                     *const ;@; o;;o;	;
@
;iyq;"events;@;[ ;0;0{;"{;{	;o;;o;	;
@
;i1s;"vtss_rc ;@; o;;o;	;
@
;i9s;"vtss_sgpio_event_enable;@;[ ;0;#[{;{	;o;;o;	;
@
;iQs;"const vtss_inst_t        ;@; o;;o;	;
@
;ijs;"	inst;@;[ ;0{;{	;o;;o;	;
@
;is;"const vtss_chip_no_t     ;@; o;;o;	;
@
;i©s;"chip_no;@;[ ;0{;{	;o;;o;	;
@
;iÒs;"const vtss_sgpio_group_t ;@; o;;o;	;
@
;iës;"
group;@;[ ;0{;{	;o;;o;	;
@
;it;"const vtss_port_no_t     ;@; o;;o;	;
@
;i+t;"	port;@;[ ;0{;{	;o;;o;	;
@
;iQt;"const u32                ;@; o;;o;	;
@
;ijt;"bit;@;[ ;0{;{	;o;;o;	;
@
;it;"BOOL                     ;@; o;;o;	;
@
;i¨t;"enable;@;[ ;0;0{;o;;o;	;
@
;i²t;"-#endif /* VTSS_FEATURE_SERIAL_GPIO */


;@{;o;;o;	;
@
;iÚt;"+#if defined(VTSS_FEATURE_INTERRUPTS)

;@{;"{;{	;o;;o;	;
@
;i?v;"vtss_rc ;@; o;;o;	;
@
;iGv;"vtss_intr_cfg;@;[ ;0;#[	{;{	;o;;o;	;
@
;iUv;"const vtss_inst_t       ;@; o;;o;	;
@
;imv;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iv;"const u32               ;@; o;;o;	;
@
;i¡v;"	mask;@;[ ;0{;{	;o;;o;	;
@
;i½v;"const BOOL              ;@; o;;o;	;
@
;iÕv;"polarity;@;[ ;0{;{	;o;;o;	;
@
;iõv;"const BOOL              ;@; o;;o;	;
@
;iw;"enable;@;[ ;0;0{
;o;;o;	;
@
;iBw;"typedef;@;{;[{;{;{	;o;;o;	;
@
;iWw;"BOOL  ;@; o;;o;	;
@
;i]w;"link_change;@;[{;!o;;o;	;
@
;iiw;"VTSS_PORT_ARRAY_SIZE;@;0;o;;o;	;
@
;i±w;"vtss_intr_t;@;[ ;0{;"{;{	;o;;o;	;
@
;ibx;"vtss_rc ;@; o;;o;	;
@
;ijx;"vtss_intr_mask_set;@;[ ;0;#[{;{	;o;;o;	;
@
;i}x;"#const vtss_inst_t             ;@; o;;o;	;
@
;ix;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i¼x;"vtss_intr_t *;@; o;;o;	;
@
;iÉx;"	mask;@;[ ;0;0{;"{;{	;o;;o;	;
@
;iýy;"vtss_rc ;@; o;;o;	;
@
;iz;"vtss_intr_status_get;@;[ ;0;#[{;{	;o;;o;	;
@
;iz;"#const vtss_inst_t             ;@; o;;o;	;
@
;i8z;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i[z;"vtss_intr_t *;@; o;;o;	;
@
;ihz;"status;@;[ ;0;0{;"{;{	;o;;o;	;
@
;i¢{;"vtss_rc  ;@; o;;o;	;
@
;i«{;"vtss_intr_pol_negation;@;[ ;0;#[{;{	;o;;o;	;
@
;iÂ{;"const vtss_inst_t   ;@; o;;o;	;
@
;iÖ{;"	inst;@;[ ;0;0{;o;;o;	;
@
;iÞ{;"+#endif /* VTSS_FEATURE_INTERRUPTS */

;@{;o;;o;	;
@
;i|;"&#ifdef VTSS_FEATURE_IRQ_CONTROL

;@{
;o;;o;	;
@
;iJ|;"typedef;@;{;o;;o;	;
@
;iR|;"	enum;@;[){;{;o;;o;	;
@
;i]|;"VTSS_IRQ_XTR;@;0{;{;o;;o;	;
@
;i­|;"VTSS_IRQ_FDMA_XTR;@;0{;{;o;;o;	;
@
;iÿ|;"VTSS_IRQ_SOFTWARE;@;0{;{;o;;o;	;
@
;i4};"VTSS_IRQ_PTP_RDY;@;0{;{;o;;o;	;
@
;ip};"VTSS_IRQ_PTP_SYNC;@;0{;{;o;;o;	;
@
;i°};"VTSS_IRQ_EXT0;@;0{;{;o;;o;	;
@
;iá};"VTSS_IRQ_EXT1;@;0{;{;o;;o;	;
@
;i~;"VTSS_IRQ_OAM;@;0{;{;o;;o;	;
@
;iB~;"VTSS_IRQ_SGPIO;@;0{;{;o;;o;	;
@
;iz~;"VTSS_IRQ_SGPIO2;@;0{;{;o;;o;	;
@
;i³~;"VTSS_IRQ_DPLL;@;0{;{;o;;o;	;
@
;ià~;"VTSS_IRQ_GPIO;@;0{;{;o;;o;	;
@
;i;"VTSS_IRQ_DEV_ALL;@;0{;{;o;;o;	;
@
;iG;"VTSS_IRQ_CU_PHY_0;@;0{;{;o;;o;	;
@
;i;"VTSS_IRQ_CU_PHY_1;@;0{;{;o;;o;	;
@
;iÅ;"VTSS_IRQ_KR_SD10G_0;@;0{;{;o;;o;	;
@
;iö;"VTSS_IRQ_KR_SD10G_1;@;0{;{;o;;o;	;
@
;i';"VTSS_IRQ_KR_SD10G_2;@;0{;{;o;;o;	;
@
;iX;"VTSS_IRQ_KR_SD10G_3;@;0{;{;o;;o;	;
@
;i;"VTSS_IRQ_KR_SD10G_4;@;0{;{;o;;o;	;
@
;iº;"VTSS_IRQ_KR_SD10G_5;@;0{;{;o;;o;	;
@
;ië;"VTSS_IRQ_KR_SD10G_6;@;0{;{;o;;o;	;
@
;i;"VTSS_IRQ_KR_SD10G_7;@;0{;{;o;;o;	;
@
;iM;"VTSS_IRQ_KR_SD10G_8;@;0{;{;o;;o;	;
@
;i~;"VTSS_IRQ_KR_SD10G_9;@;0{;{;o;;o;	;
@
;i¯;"VTSS_IRQ_KR_SD10G_10;@;0{;{;o;;o;	;
@
;iá;"VTSS_IRQ_KR_SD10G_11;@;0{;{;o;;o;	;
@
;i;"VTSS_IRQ_KR_SD10G_12;@;0{;{;o;;o;	;
@
;iE;"VTSS_IRQ_KR_SD10G_13;@;0{;{;o;;o;	;
@
;iw;"VTSS_IRQ_KR_SD10G_14;@;0{;{;o;;o;	;
@
;i©;"VTSS_IRQ_KR_SD10G_15;@;0{;{;o;;o;	;
@
;iÛ;"VTSS_IRQ_KR_SD10G_16;@;0{;{;o;;o;	;
@
;i;"VTSS_IRQ_KR_SD10G_17;@;0{;{;o;;o;	;
@
;i?;"VTSS_IRQ_KR_SD10G_18;@;0{;{;o;;o;	;
@
;iq;"VTSS_IRQ_KR_SD10G_19;@;0{;{;o;;o;	;
@
;i¤;"VTSS_IRQ_MAX;@;0;o;;o;	;
@
;iü;"vtss_irq_t;@;[ ;0{
;o;;o;	;
@
;i<;"typedef;@;{;[{;{;{	;o;;o;	;
@
;iQ;"
BOOL ;@; o;;o;	;
@
;iV;"external;@;[ ;0{;{;{	;o;;o;	;
@
;i;"
u8   ;@; o;;o;	;
@
;i;"destination;@;[ ;0;o;;o;	;
@
;iÐ;"vtss_irq_conf_t;@;[ ;0{
;o;;o;	;
@
;i;"typedef;@;{;[	{;{;{	;o;;o;	;
@
;i%;"	u32 ;@; o;;o;	;
@
;i);"active;@;[ ;0{;{;{	;o;;o;	;
@
;il;"	u32 ;@; o;;o;	;
@
;ip;"raw_ident;@;[ ;0{;{;{	;o;;o;	;
@
;iÅ;"	u32 ;@; o;;o;	;
@
;iÉ;"raw_status;@;[ ;0{;{;{	;o;;o;	;
@
;i;"	u32 ;@; o;;o;	;
@
;i;"raw_mask;@;[ ;0;o;;o;	;
@
;ih;"vtss_irq_status_t;@;[ ;0{;"{;{	;o;;o;	;
@
;iK;"vtss_rc  ;@; o;;o;	;
@
;iT;"vtss_irq_conf_get;@;[ ;0;#[{;{	;o;;o;	;
@
;if;"const vtss_inst_t ;@; o;;o;	;
@
;ix;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i;"const vtss_irq_t ;@; o;;o;	;
@
;iª;"irq;@;[ ;0{;{	;o;;o;	;
@
;iÊ;"vtss_irq_conf_t *;@; o;;o;	;
@
;iÛ;"	conf;@;[ ;0;0{;"{;{	;o;;o;	;
@
;i²;"vtss_rc  ;@; o;;o;	;
@
;i»;"vtss_irq_conf_set;@;[ ;0;#[{;{	;o;;o;	;
@
;iÍ;"const vtss_inst_t ;@; o;;o;	;
@
;iß;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i ;"const vtss_irq_t ;@; o;;o;	;
@
;i;"irq;@;[ ;0{;{	;o;;o;	;
@
;i1;""const vtss_irq_conf_t *const ;@; o;;o;	;
@
;iN;"	conf;@;[ ;0;0{;"{;{	;o;;o;	;
@
;i;"vtss_rc  ;@; o;;o;	;
@
;i;"!vtss_irq_status_get_and_mask;@;[ ;0;#[{;{	;o;;o;	;
@
;i:;"const vtss_inst_t ;@; o;;o;	;
@
;iL;"	inst;@;[ ;0{;{	;o;;o;	;
@
;ix;"vtss_irq_status_t *;@; o;;o;	;
@
;i;"status;@;[ ;0;0{;"{;{	;o;;o;	;
@
;iy;"vtss_rc  ;@; o;;o;	;
@
;i;"vtss_irq_enable;@;[ ;0;#[{;{	;o;;o;	;
@
;i;"const vtss_inst_t ;@; o;;o;	;
@
;i¤;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iÃ;"const vtss_irq_t ;@; o;;o;	;
@
;iÔ;"irq;@;[ ;0{;{	;o;;o;	;
@
;iò;"
BOOL ;@; o;;o;	;
@
;i÷;"enable;@;[ ;0;0{;o;;o;	;
@
;i;"-#endif /* VTSS_FEATURE_IRQ_CONTROL */


;@{;"{;{	;o;;o;	;
@
;iæ;"	u32 ;@; o;;o;	;
@
;iê;"vtss_tod_get_ns_cnt;@;[ ;0;#[{;o;;o;	;
@
;iþ;"	void;@;0{;o;;o;	;
@
;i§;"typedef;@;${	;%o;;o;	;
@
;i¯;"	u32 ;@;&o;;o;	;
@
;iµ;"tod_get_ns_cnt_cb_t;@;#[{;o;;o;	;
@
;iÊ;"	void;@;0{;"{;{	;o;;o;	;
@
;i[;"
void ;@; o;;o;	;
@
;i`;"vtss_tod_set_ns_cnt_cb;@;[ ;0;#[{;{	;o;;o;	;
@
;iw;"tod_get_ns_cnt_cb_t ;@; o;;o;	;
@
;i;"cb;@;[ ;0;0{
;o;;o;	;
@
;i;"typedef;@;{;[{;{;{	;o;;o;	;
@
;i;"	u32 ;@; o;;o;	;
@
;i;"hw_cnt;@;[ ;0;o;;o;	;
@
;i?;"vtss_os_timestamp_t;@;[ ;0{;o;;o;	;
@
;iT;"#define VTSS_OS_TIMESTAMP(timestamp)                                    \
  do {                                                                  \
    /* Currently no need to lock scheduler, since it's only          */ \
    /* called from a function, where the sceduler is already locked. */ \
    /* cyg_scheduler_lock(__FILE__, __LINE__); */                                         \
    (timestamp)->hw_cnt = vtss_tod_get_ns_cnt();                        \
    /* cyg_scheduler_unlock(__FILE__, __LINE__); */                                       \
  } while(0); /**< VTSS_OS_TIMESTAMP() provides the implementation that will fill in the timestamp. */


;@{;o;;o;	;
@
;i,;"$#if defined(VTSS_FEATURE_FAN)

;@{;o;;o;	;
@
;iK;"+#if defined(VTSS_FEATURE_TEMP_SENSOR)
;@{;"{;{	;o;;o;	;
@
;iF;"vtss_rc ;@; o;;o;	;
@
;iN;"vtss_temp_sensor_init;@;[ ;0;#[{;{	;o;;o;	;
@
;id;"const vtss_inst_t ;@; o;;o;	;
@
;iv;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i;"const BOOL ;@; o;;o;	;
@
;i¥;"enable;@;[ ;0;0{;"{;{	;o;;o;	;
@
;i;"vtss_rc ;@; o;;o;	;
@
;i;"vtss_temp_sensor_get;@;[ ;0;#[{;{	;o;;o;	;
@
;i§;"const vtss_inst_t     ;@; o;;o;	;
@
;i½;"	inst;@;[ ;0{;{	;o;;o;	;
@
;ià;"i16                   *;@; o;;o;	;
@
;i÷;"temperature;@;[ ;0;0{;o;;o;	;
@
;i;"#endif

;@{
;o;;o;	;
@
;i-;"typedef;@;{;o;;o;	;
@
;i5;"	enum;@;[{;{;o;;o;	;
@
;i@;"VTSS_FAN_PWM_FREQ_25KHZ;@;0{;{;o;;o;	;
@
;i];"VTSS_FAN_PWM_FREQ_120HZ;@;0{;{;o;;o;	;
@
;iz;"VTSS_FAN_PWM_FREQ_100HZ;@;0{;{;o;;o;	;
@
;i;"VTSS_FAN_PWM_FREQ_80HZ;@;0{;{;o;;o;	;
@
;i³;"VTSS_FAN_PWM_FREQ_60HZ;@;0{;{;o;;o;	;
@
;iÏ;"VTSS_FAN_PWM_FREQ_40HZ;@;0{;{;o;;o;	;
@
;ië;"VTSS_FAN_PWM_FREQ_20HZ;@;0{;{;o;;o;	;
@
;i;"VTSS_FAN_PWM_FREQ_10HZ
;@;0;o;;o;	;
@
;i ;"vtss_fan_pwd_freq_t;@;[ ;0{
;o;;o;	;
@
;iO;"typedef;@;{;o;;o;	;
@
;iW;"	enum;@;[{;{;o;;o;	;
@
;ib;"VTSS_FAN_2_WIRE_TYPE;@;0{;{;o;;o;	;
@
;i|;"VTSS_FAN_3_WIRE_TYPE;@;0{;{;o;;o;	;
@
;i;"VTSS_FAN_4_WIRE_TYPE
;@;0;o;;o;	;
@
;i­;"vtss_fan_type_t;@;[ ;0{;o;;o;	;
@
;iÿ;"&#define VTSS_FAN_SPEED_MAX 0x255
;@{;o;;o;	;
@
;iS;"&#define VTSS_FAN_SPEED_MIN 0x0


;@{
;o;;o;	;
@
;i;"typedef;@;{;[
{;{;{	;o;;o;	;
@
;iª;"vtss_fan_pwd_freq_t ;@; o;;o;	;
@
;i¾;"fan_pwm_freq;@;[ ;0{;{;{	;o;;o;	;
@
;iî;"BOOL                ;@; o;;o;	;
@
;i;"fan_low_pol;@;[ ;0{;{;{	;o;;o;	;
@
;i;"BOOL                ;@; o;;o;	;
@
;i;"fan_open_col;@;[ ;0{;{;{	;o;;o;	;
@
;i×;"vtss_fan_type_t     ;@; o;;o;	;
@
;ië;"	type;@;[ ;0{;{;{	;o;;o;	;
@
;i ;"u32                 ;@; o;;o;	;
@
;i4;"ppr;@;[ ;0;o;;o;	;
@
;i;"vtss_fan_conf_t;@;[ ;0{;"{;{	;o;;o;	;
@
;i ;"vtss_rc ;@; o;;o;	;
@
;i¨;"vtss_fan_rotation_get;@;[ ;0;#[{;{	;o;;o;	;
@
;i¾;"const vtss_inst_t ;@; o;;o;	;
@
;iÐ;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iô;"vtss_fan_conf_t   *const ;@; o;;o;	;
@
;i;"fan_spec;@;[ ;0{;{	;o;;o;	;
@
;i5;"u32               *;@; o;;o;	;
@
;iH;"rotation_count;@;[ ;0;0{;"{;{	;o;;o;	;
@
;i!;"vtss_rc ;@; o;;o;	;
@
;i);"vtss_fan_cool_lvl_set;@;[ ;0;#[{;{	;o;;o;	;
@
;i?;"const vtss_inst_t     ;@; o;;o;	;
@
;iU;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iy;"u8 ;@; o;;o;	;
@
;i|;"lvl;@;[ ;0;0{;"{;{	;o;;o;	;
@
;i*;"vtss_rc ;@; o;;o;	;
@
;i2;"vtss_fan_controller_init;@;[ ;0;#[{;{	;o;;o;	;
@
;iK;"const vtss_inst_t     ;@; o;;o;	;
@
;ia;"	inst;@;[ ;0{;{	;o;;o;	;
@
;i;""const vtss_fan_conf_t *const ;@; o;;o;	;
@
;i¥;"	spec;@;[ ;0;0{;"{;{	;o;;o;	;
@
;it;"vtss_rc ;@; o;;o;	;
@
;i|;"vtss_fan_cool_lvl_get;@;[ ;0;#[{;{	;o;;o;	;
@
;i;"const vtss_inst_t     ;@; o;;o;	;
@
;i¨;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iÌ;"
u8 * ;@; o;;o;	;
@
;iÑ;"lvl;@;[ ;0;0{;o;;o;	;
@
;iÙ;"$#endif /* VTSS_FEATURE_FAN */

;@{;o;;o;	;
@
;i5 ;"#ifdef VTSS_FEATURE_EEE
;@{
;o;;o;	;
@
;ir ;"typedef;@;{;[
{;{;{	;o;;o;	;
@
;i ;"
BOOL ;@; o;;o;	;
@
;i ;"eee_ena;@;[ ;0{;{;{	;o;;o;	;
@
;iK¡;"
u8   ;@; o;;o;	;
@
;iP¡;"eee_fast_queues;@;[ ;0{;{;{	;o;;o;	;
@
;i¢;"
u16  ;@; o;;o;	;
@
;i¢;"
tx_tw;@;[ ;0{;{;{	;o;;o;	;
@
;iÓ¢;"
u8   ;@; o;;o;	;
@
;iØ¢;"lp_advertisement;@;[ ;0{;{;{	;o;;o;	;
@
;i£;"
BOOL ;@; o;;o;	;
@
;i£;"optimized_for_power;@;[ ;0;o;;o;	;
@
;i¤;"vtss_eee_port_conf_t;@;[ ;0{;"{;{	;o;;o;	;
@
;iæ¤;"vtss_rc ;@; o;;o;	;
@
;iî¤;"vtss_eee_port_conf_set;@;[ ;0;#[{;{	;o;;o;	;
@
;i¥;" const vtss_inst_t          ;@; o;;o;	;
@
;i ¥;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iE¥;" const vtss_port_no_t       ;@; o;;o;	;
@
;i`¥;"port_no;@;[ ;0{;{	;o;;o;	;
@
;i¥;"'const vtss_eee_port_conf_t *const ;@; o;;o;	;
@
;iª¥;"eee_conf;@;[ ;0;0{;o;;o;	;
@
;i¶¥;"$#endif /* VTSS_FEATURE_EEE */

;@{;"{;{	;o;;o;	;
@
;i¦;"vtss_rc ;@; o;;o;	;
@
;i¦;"vtss_misc_appdata_get;@;[ ;0;#[{;{	;o;;o;	;
@
;i¤¦;"const vtss_inst_t        ;@; o;;o;	;
@
;i½¦;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iá¦;"void **;@; o;;o;	;
@
;iè¦;"	data;@;[ ;0;0{;"{;{	;o;;o;	;
@
;i¢§;"vtss_rc ;@; o;;o;	;
@
;iª§;"vtss_misc_appdata_set;@;[ ;0;#[{;{	;o;;o;	;
@
;iÀ§;"const vtss_inst_t        ;@; o;;o;	;
@
;iÙ§;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iý§;"void *;@; o;;o;	;
@
;i¨;"	data;@;[ ;0;0{
;o;;o;	;
@
;iò¨;"typedef;@;{;[	{;{;{	;o;;o;	;
@
;i©;"const char      *;@; o;;o;	;
@
;i©;"	name;@;[ ;0{;{;{	;o;;o;	;
@
;iA©;"unsigned long   ;@; o;;o;	;
@
;iQ©;"	addr;@;[ ;0{;{;{	;o;;o;	;
@
;i~©;"unsigned long   ;@; o;;o;	;
@
;i©;"repl_cnt;@;[ ;0{;{;{	;o;;o;	;
@
;iÅ©;"unsigned long   ;@; o;;o;	;
@
;iÕ©;"repl_width;@;[ ;0;o;;o;	;
@
;i
ª;"vtss_symreg_reg_t;@;[ ;0{
;o;;o;	;
@
;iWª;"typedef;@;{;[
{;{;{	;o;;o;	;
@
;ilª;"const char         *;@; o;;o;	;
@
;iª;"	name;@;[ ;0{;{;{	;o;;o;	;
@
;i¯ª;"unsigned long      ;@; o;;o;	;
@
;iÂª;"base_addr;@;[ ;0{;{;{	;o;;o;	;
@
;iúª;"unsigned long      ;@; o;;o;	;
@
;i«;"repl_cnt;@;[ ;0{;{;{	;o;;o;	;
@
;iJ«;"unsigned long      ;@; o;;o;	;
@
;i]«;"repl_width;@;[ ;0{;{;{	;o;;o;	;
@
;i«;"vtss_symreg_reg_t const *;@; o;;o;	;
@
;i³«;"	regs;@;[ ;0;o;;o;	;
@
;iô«;"vtss_symreg_reggrp_t;@;[ ;0{
;o;;o;	;
@
;iE¬;"typedef;@;{;[
{;{;{	;o;;o;	;
@
;iZ¬;"const char            *;@; o;;o;	;
@
;iq¬;"	name;@;[ ;0{;{;{	;o;;o;	;
@
;i¤¬;"int                   ;@; o;;o;	;
@
;iº¬;"repl_number;@;[ ;0{;{;{	;o;;o;	;
@
;ií¬;"unsigned long         ;@; o;;o;	;
@
;i­;"tgt_id;@;[ ;0{;{;{	;o;;o;	;
@
;i)­;"unsigned long         ;@; o;;o;	;
@
;i?­;"base_addr;@;[ ;0{;{;{	;o;;o;	;
@
;ih­;"!vtss_symreg_reggrp_t const *;@; o;;o;	;
@
;i­;"reggrps;@;[ ;0;o;;o;	;
@
;iÎ­;"vtss_symreg_target_t;@;[ ;0{
;o;;o;	;
@
;i®;"typedef;@;{;[
{;{;{	;o;;o;	;
@
;i%®;"!const vtss_symreg_target_t *;@; o;;o;	;
@
;iA®;"targets;@;[ ;0{;{;{	;o;;o;	;
@
;i®;"!unsigned long               ;@; o;;o;	;
@
;i¥®;"targets_cnt;@;[ ;0{;{;{	;o;;o;	;
@
;iÖ®;"!unsigned long               ;@; o;;o;	;
@
;iò®;"io_origin1_offset;@;[ ;0{;{;{	;o;;o;	;
@
;i$¯;"!unsigned long               ;@; o;;o;	;
@
;i@¯;"repl_cnt_max;@;[ ;0{;{;{	;o;;o;	;
@
;i~¯;"!unsigned long               ;@; o;;o;	;
@
;i¯;"name_len_max;@;[ ;0;o;;o;	;
@
;iÇ¯;"vtss_symreg_data_t;@;[ ;0{;"{;{	;o;;o;	;
@
;i°;"vtss_rc ;@; o;;o;	;
@
;i°;"vtss_symreg_data_get;@;[ ;0;#[{;{	;o;;o;	;
@
;i°;"const vtss_inst_t   ;@; o;;o;	;
@
;i±°;"	inst;@;[ ;0{;{	;o;;o;	;
@
;iÔ°;"vtss_symreg_data_t *const ;@; o;;o;	;
@
;iî°;"	data;@;[ ;0;0{;o;;o;	;
@
;iö°;"#ifdef __cplusplus
;@{;o;;o;	;
@
;i±;"#endif
;@{;o;;o;	;
@
;i±;"##endif /* VTSS_MISC_API_H_ */
;@